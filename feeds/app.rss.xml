<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Focus</title><link>http://heloman.github.io/</link><description></description><atom:link href="http://heloman.github.io/feeds/app.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 22 Apr 2014 00:00:00 +0800</lastBuildDate><item><title>Map-Reduce原理</title><link>http://heloman.github.io/pages/2014/04/map-reduceyuan-li.html</link><description>&lt;h1&gt;Map-Reduce&lt;/h1&gt;
&lt;p&gt;Map-Reduce是由Google在2004年提出的大数据并行编程架构，分为Map（映射）和Reduce（化简）两个步骤，因此得名。它隐藏并行化、容错、数据分布、负载均衡等细节，可以搭建在普通PC上，程序员可以很方便完成大数据并行编程。&lt;/p&gt;
&lt;h2&gt;并行运算的效率&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;假如使用1个处理器花费T1时长可以完成任务，而使用了p个处理器需要Tp时长。那么加速比为：S(Speeup) = T1/Tp，效率为：E = S/p = T1 / (p Tp) &lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;一般效率都小于1，而且p越大效率越低，但是在数据集增大时，效率会相应的有所提高。&lt;br /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;传统的并行处理架构&lt;/h2&gt;
&lt;h3&gt;数据并行架构：共享内存-分割任务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;内存（数据）是共享的，把任务分为p个部分，分别由p个处理器完成。为防止冲突，每个处理器都要在开始工作时对使用的数据段加锁，以阻塞其他任务使用这一数据段。任务完成之后，才会解锁。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;很显然，如果p个处理器同时对不同的数据段进行处理，效率是很高的。但如果有冲突，就会带来额外的通信开销，降低效率。&lt;br /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;消息传递架构：消息传递-分割数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如MPI和PVM。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;消息传递机制把数据分为p个数据段，p个CPU分别使用一个数据段完成同样的任务。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;这种方式的问题是，一个CPU的运算需要使用另一个CPU的运算结果以完成下一步的任务，这样，它们之间就需要交换数据。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;这个问题使得消息传递架构比数据并行架构更复杂。但消息传递架构更具有可扩展性，比如在数千个CPU的情况下，减少冲突是很难做到的。&lt;br /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;除了上述两种方式外，共享内存-分割数据和消息传递-分割任务也是可以的。&lt;br /&gt;
&lt;/p&gt;
&lt;h2&gt;Map-Reduce架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Map-Reduce是一种抽象的消息传递，及数据并行化的架构。&lt;br /&gt;
&lt;img alt="" src="img/20140422map_reduce.png" /&gt;&lt;/li&gt;
&lt;li&gt;如图所示，左方为代处理数据集，右方为处理结果数据集。图中圆角矩形代表map和reduce节点，每个对应一台电脑。  &lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Map函数把输入数据中的一个key/value对（k1,v1）映射为一组临时key/value对（k2,v2）。每个key/value对都是被独立操作的，而且没有修改原始数据，因此Map操作是可以高度并行的，如图示map1、map2……mapM。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;Reduce函数接收键为特定的k2的一组临时key/value对，并合并这些结果得到最终结果（k2,v3），这里键值k2是不变的。如图示reduce1，reduce2……reduceR。相对来说实现并行要难一些。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;除了这两个函数之外，还需要做一些额外工作。&lt;ul&gt;
&lt;li&gt;每个Reduce节点只接收键固定的临时key/value对，平台要根据临时key/value对的键把key/value对送至相应的Reduce节点。&lt;/li&gt;
&lt;li&gt;临时key/value对的读写工作量也相当大。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Word counting&lt;/h2&gt;
&lt;p&gt;Word counting指的是给出一系列文档，统计所有单词的词频。Word counting就是Map-Reduce的Hello word!。&lt;br /&gt;
&lt;img alt="" src="img/20140422map_reduce_word_count.png" /&gt;
- 输入数据：（k1,v1），k1是文档id，v1是文档内容，即图中的(d1,"w1w2w4")，d1代表文档id，w1代表一个单词&lt;br /&gt;
- Map函数：从文档中每读入一个单词，就产生一个临时key/value对，即图中左边一列灰色宽箭头&lt;br /&gt;
- 临时元素：（k2,v2），k2是单词，v2是单词出现次数，即图中的第二列(w1,2)&lt;br /&gt;
- Reduce函数：接收所有具有同一个k2的临时key/value对，对v2求和得到v3，即图中右边一列灰色宽箭头
- 输出结果：（k2,v3），v3是所有文档中单词k2的词频数&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heLomaN</dc:creator><pubDate>Tue, 22 Apr 2014 00:00:00 +0800</pubDate><guid>tag:heloman.github.io,2014-04-22:pages/2014/04/map-reduceyuan-li.html</guid><category>big data</category></item><item><title>django开发视频网站项目记录</title><link>http://heloman.github.io/pages/2013/11/djangokai-fa-shi-pin-wang-zhan-xiang-mu-ji-lu.html</link><description>&lt;h3&gt;20131108启动&lt;/h3&gt;
&lt;p&gt;下载了Owntube，尝试运行。官方文档给出的运行方式是virtualenv，一个虚拟的python环境。我索性直接在系统环境内安装了相关的软件。django版本真的比较低。&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;在settings.py中很多变量需要配置，根据官方给出的&lt;a href="https://docs.djangoproject.com/en/1.3/howto/static-files/"&gt;文档&lt;/a&gt;：&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;使用django.contrib.staticfiles应用，默认配置包含的 AppDirectoriesFinder 会搜索所有已经安装的应用的 &lt;code&gt;static/&lt;/code&gt; 子目录。 &lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;并且对于一些不适合放进相关app的文件， &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;是默认的搜索路径。不过这些只适用本地开发，并且要安装FileSystemFinder应用。&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;这些文件会以 &lt;code&gt;STATIC_URL&lt;/code&gt; 提供。&lt;/p&gt;
&lt;p&gt;这个服务只在DEBUG为True时，即本地开发时有效。发布网站时，要使用 &lt;code&gt;./manage.py collectstatic&lt;/code&gt; 命令来搜集所有STATICFILES_DIRS路径以及app下的静态文件到STATIC_ROOT文件夹下面。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.path.dirname(__file__)&lt;/code&gt; 可以输出当前路径。&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;当前配置为：&lt;br /&gt;
    STATIC_ROOT = '/home/czk/djangoproject/OwnTube/colect_staitic/'
    STATIC_URL = '/static/'
    import os
    PROJECT_PATH = os.path.abspath(os.path.dirname(&lt;strong&gt;file&lt;/strong&gt;))
    STATICFILES_DIRS = (
        PROJECT_PATH + '/static',
    )&lt;/p&gt;
&lt;h4&gt;下一步开发计划：&lt;/h4&gt;
&lt;p&gt;完成一个最简单的视频播放模板，从html文件开始，然后再做模板。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;20131109 初步搞定&lt;/h3&gt;
&lt;p&gt;之前的&lt;a href="http://www.projekktor.com/"&gt;projekktor&lt;/a&gt;并没有用上。&lt;br /&gt;
现在的方案是： &lt;br /&gt;
    文件上传根目录
    MEDIA_ROOT = '/home/czk/djangoproject/uvideo/media/'
    static目录下为css等文件，并包括上传的视频，这样就能够用目录+file_path的方式获得视频链接
    STATICFILES_DIRS = (
        '/home/czk/djangoproject/uvideo/static/',
        '/home/czk/djangoproject/uvideo/media/',
    )&lt;/p&gt;
&lt;p&gt;完成了在管理界面整套试卷的视频上传，以及播放。&lt;/p&gt;
&lt;h4&gt;下一步计划&lt;/h4&gt;
&lt;p&gt;部署到学校服务器上面，加入flash播放器。&lt;br /&gt;
&lt;/p&gt;
&lt;h4&gt;部署到Apache+wsgi服务器上面要做的改变&lt;/h4&gt;
&lt;p&gt;安装好apache2和libapache2-mod-wsgi之后&lt;br /&gt;
首先settings.py里面，DATABASES的NAME要改成绝对路径&lt;br /&gt;
修改/etc/apache2/httpd.conf&lt;br /&gt;
    LoadModule wsgi_module modules/mod_wsgi.so
    WSGIScriptAlias / "/home/czk/djangoproject/uvideo/django.wsgi"
    Alias /static /home/czk/djangoproject/uvideo/colect_static/
    &lt;Directory "/home/czk/djangoproject/uvideo/"&gt;
        Order Deny,Allow
        Allow from all
    &lt;/Directory&gt;&lt;/p&gt;
&lt;p&gt;目录下建立django.wsgi，写入内容：
    #!/usr/bin/env python
    import os
    import sys
    sys.path.append('/home/czk/djangoproject/uvideo')
    os.environ['DJANGO_SETTINGS_MODULE'] = 'uvideo.settings'
    import django.core.handlers.wsgi
    application = django.core.handlers.wsgi.WSGIHandler()&lt;/p&gt;
&lt;p&gt;deploy过程中碰到python-lib目录权限的问题，更改了所有相应文件的权限才解决。&lt;br /&gt;
碰到admin应用无法读取数据库文件的问题，把整个项目文件权限更改为777得到解决。&lt;br /&gt;
这次是把所有的文件搜集到了colect_static下面，应该把STATIC_ROOT设置为和MEDIA_ROOT相同。&lt;br /&gt;
本来在local开发模式下面，视频是无法快进的，但没想到deploy之后就可以了。&lt;br /&gt;
目前视频的播放还是存在问题的，opera无法播放，可能还是需要加入一个flash播放器。&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;在admin界面下上传文件会显示ascii编码错误，这个需要更改 /etc/apache2/envvars 中的 LANG 设置。具体情况见&lt;a href="http://www.hiaward.com:10004/wiki/dev/ApacheConfigure/"&gt;博客1&lt;/a&gt;和&lt;a href="http://hi.baidu.com/justin_jia/item/cda58f5f866ef2464eff20a3"&gt;博客2&lt;/a&gt;.&lt;br /&gt;
不过，这个问题另一个解决办法可能是更改上传的文件名为英文，见&lt;a href="http://blog.csdn.net/jianhong1990/article/details/7382873"&gt;博文&lt;/a&gt;。&lt;br /&gt;
&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heLomaN</dc:creator><pubDate>Fri, 08 Nov 2013 00:00:00 +0800</pubDate><guid>tag:heloman.github.io,2013-11-08:pages/2013/11/djangokai-fa-shi-pin-wang-zhan-xiang-mu-ji-lu.html</guid><category>django</category></item><item><title>Ubuntu系统安装Matlab2012a</title><link>http://heloman.github.io/pages/2013/09/ubuntuxi-tong-an-zhuang-matlab2012a.html</link><description>&lt;h3&gt;下载安装&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;下载matlab的安装镜像，注意一定是unix版本到。 &lt;/li&gt;
&lt;li&gt;挂载iso文件： &lt;code&gt;sudo mount -o loop Mathworks.Matlab.R2012a.UNIX.iso /mnt/tmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;到tmp目录下面执行 &lt;code&gt;sudo ./install&lt;/code&gt;，安装并激活&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;启动程序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;运行matlab的方式为：&lt;code&gt;sudo /usr/local/MATLAB/R2012a/bin/matlab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;运行的时候的警告信息，&lt;code&gt;/usr/local/MATLAB/R2012a/bin/util/oscheck.sh: /lib/libc.so.6: not found&lt;/code&gt;。需要创建一个链接解决:&lt;code&gt;sudo ln -s /lib/i386-linux-gnu/libc.so.6 /lib/libc.so.6&lt;/code&gt;64位系统需要改动。&lt;/li&gt;
&lt;li&gt;在软件中心安装matlab-support，添加matlab的安装目录为/usr/local/MATLAB/R2012a，这样可以在面板里面直接运行程序。
11.如果要创建快捷方式，可以在&lt;code&gt;启动运行程序&lt;/code&gt;中添加 &lt;code&gt;gksudo '/usr/local/MATLAB/R2012a/bin/matlab -desktop'&lt;/code&gt;，然后拖动到文件夹。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;设置启动目录&lt;/h3&gt;
&lt;p&gt;可以使用命令：&lt;code&gt;sudo gedit /usr/local/MATLAB/R2012a/toolbox/local/matlabrc.m&lt;/code&gt;，最后加上:&lt;code&gt;cd ‘default path’ %default path&lt;/code&gt;换成你默认目录即可。&lt;/p&gt;
&lt;h3&gt;解决中文乱码问题&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="http://wmyming01.blog.163.com/blog/static/12964879120121120102253573/"&gt;http://wmyming01.blog.163.com/blog/static/12964879120121120102253573/&lt;/a&gt;
关于中文乱码的问题：如果系统已经安装中文字体，则打开Matlab后去File-&amp;gt;Preferences&amp;gt;Fonts里设置Desktop code font 和Desktop text font为支持中文的字体，如WenQuanYi Micro Hei Mono，立即生效。如果系统没中文字体就安装。此时Matlab界面仍是英文，添加自定义工具箱目录时遇到中文乱码问题，可以使用ln -s  源目录  目标目录  命令创建软链接，暂时解决。
此时m文件中的中文注释可能乱码，暂时没找到解决方案，因为中文注释是在windows下用写的，编码有差别。以后注释尽量用英文，在中文编码上时间消耗太多了。&lt;/p&gt;
&lt;h3&gt;解决运行时java错误&lt;/h3&gt;
&lt;p&gt;改变.matlab目录所有者即可：&lt;code&gt;chown -R user:user ./.matlab&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">heLomaN</dc:creator><pubDate>Wed, 04 Sep 2013 00:00:00 +0800</pubDate><guid>tag:heloman.github.io,2013-09-04:pages/2013/09/ubuntuxi-tong-an-zhuang-matlab2012a.html</guid><category>ubuntu</category><category>matlab</category></item></channel></rss>