<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Focus</title><link href="http://heloman.github.io/" rel="alternate"></link><link href="http://heloman.github.io/feeds/algorithm.atom.xml" rel="self"></link><id>http://heloman.github.io/</id><updated>2014-07-27T00:00:00+08:00</updated><entry><title>如何写出一个较好的快速排序程序</title><link href="http://heloman.github.io/pages/2014/07/ru-he-xie-chu-ge-jiao-hao-de-kuai-su-pai-xu-cheng-xu.html" rel="alternate"></link><updated>2014-07-27T00:00:00+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-07-27:pages/2014/07/ru-he-xie-chu-ge-jiao-hao-de-kuai-su-pai-xu-cheng-xu.html</id><summary type="html">&lt;h2&gt;写出一个较好的快速排序程序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;快速排序是常用的排序算法之一，但要想写出一个又快又准的使用程序，就不是那么简单了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;需要注意的事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先要写正确。通常使用递归实现。其递归相当于二叉树展开，因此如果要用迭代实现的话需要使用一个队列来保存后续遍历信息。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;快速排序需要找到一个pivot值，如果顺序选择pivot则易造成N^2的复杂度，如果使用随机数则效果最好，但开销又太大，采取三数中值法比较合适。三数中值法指的是选取第一个值，最后一个值，数组中间的值的中值。有文献表明可以提升5%的运行时间。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;当数组长度较小时，如10个元素以下，最好使用插入排序或者选择排序完成，以防止复杂度常数因子过大或多次函数调用带来的开销。而递归到底层数组长度总是会变小的，因此这么做非常有必要。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;在合并前后两部分数组时，采用两边夹方法，在前后两部分各找到一个大于和小于的值再交换。相比通常情况下找到比pivot小的值就进行交换，能提高运行效率。&lt;br /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;实现代码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;代码如下。包括插入排序insert_sort，递归函数，三分中值函数三个辅助函数。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;三分中值函数其实采用的是插入排序。通过三次比较，确定中值。&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;插值算法使用临时变量tmp避免了大量swap函数调用。&lt;br /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iomanip&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;cstdlib&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ctime&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;inline&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    num&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = num&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    num&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = t;
}

void insert_sort(vector&lt;span class="nt"&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt; num){
    int tmp, j;
    for (int i = 1; i &lt;span class="nt"&gt;&amp;lt; num&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="err"&gt;();&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++){&lt;/span&gt;
        &lt;span class="na"&gt;tmp =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;num&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
        &lt;span class="na"&gt;for&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;j =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;i&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;1&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="na"&gt;j&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;= 0 &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; num&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &amp;gt; tmp; j--)
            num&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = num&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
        num&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; =tmp;
    }
}

int quick_sort_sub(vector&lt;span class="nt"&gt;&amp;lt;int&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt; num, int p, int q){
    if (p &amp;gt;= q)
        return 0;

    // if 4 elements or less, use insert sort
    if (p + 10 &amp;gt; q){
        vector&lt;span class="nt"&gt;&amp;lt;int&amp;gt;&lt;/span&gt; tnum(num.begin() + p, num.begin() + q + 1);
        insert_sort(tnum);
        for (int i = 0; i &lt;span class="nt"&gt;&amp;lt; tnum&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="err"&gt;();&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
            &lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="na"&gt; =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;tnum&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;idx =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;quick_three_partition(num,&lt;/span&gt; &lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;q&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;
    &lt;span class="na"&gt;swap&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;idx&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;q&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;

    &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;pivot =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;num&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;left =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;p,&lt;/span&gt; &lt;span class="na"&gt;right =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;q&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;1&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;1&lt;/span&gt;&lt;span class="err"&gt;){&lt;/span&gt;
        &lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;pivot&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
            &lt;span class="err"&gt;++&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
        &lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;= pivot)
            --right;
        if (left &lt;span class="nt"&gt;&amp;lt; right&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
            &lt;span class="na"&gt;swap&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;
        &lt;span class="na"&gt;else&lt;/span&gt;
            &lt;span class="na"&gt;break&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;swap&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;q&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;
    &lt;span class="na"&gt;quick_sort_sub&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;1&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;
    &lt;span class="na"&gt;quick_sort_sub&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="na"&gt;1&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;q&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;

    &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;void&lt;/span&gt; &lt;span class="na"&gt;quick_sort&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;vector&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;int&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt; num){
    quick_sort_sub(num, 0, num.size() - 1);
}

int main(){
    const int n = 10;
    /*int num_array&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;= {2,1};
    vector&lt;span class="nt"&gt;&amp;lt;int&amp;gt;&lt;/span&gt; num(num_array, num_array + n);*/

    srand( time(NULL) );
    vector&lt;span class="nt"&gt;&amp;lt;int&amp;gt;&lt;/span&gt; num(n);
    for (auto&lt;span class="err"&gt;&amp;amp;&lt;/span&gt; e : num)
        e = rand() % n;

    quick_sort(num);

    for (auto&lt;span class="err"&gt;&amp;amp;&lt;/span&gt; e : num)
        cout &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt; setw&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;4&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;e&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;;&lt;/span&gt;
    &lt;span class="na"&gt;cout&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;

    &lt;span class="na"&gt;cout&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;vector&lt;/span&gt; &lt;span class="na"&gt;is&lt;/span&gt; &lt;span class="na"&gt;sorted&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="na"&gt;:&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;is_sorted&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;begin&lt;/span&gt;&lt;span class="err"&gt;(),&lt;/span&gt; &lt;span class="na"&gt;num&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="err"&gt;())&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;

    &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Quick Sort"></category></entry><entry><title>《剑指offer》解题笔记</title><link href="http://heloman.github.io/pages/2014/07/jian-zhi-offer-jie-ti-bi-ji.html" rel="alternate"></link><updated>2014-07-22T00:00:00+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-07-22:pages/2014/07/jian-zhi-offer-jie-ti-bi-ji.html</id><summary type="html">&lt;h1&gt;《剑指offer》解题笔记&lt;/h1&gt;
&lt;p&gt;《剑指offer》共50题，这两周使用C++花时间做了一遍，谨在此把一些很巧妙的方法、写代码遇到的难点、易犯错的细节等做一个简单的标注，但不会太过详细，具体算法还是请参考书本。 &lt;br /&gt;
做的比较急，代码还有很多不完善的地方，如有错误，欢迎改正，地址为：&lt;a href="https://github.com/heLomaN/sword_of_offer.git"&gt;github:sword_of_offer&lt;/a&gt;。可以使用&lt;code&gt;git clone https://github.com/heLomaN/sword_of_offer.git&lt;/code&gt;命令获取代码。&lt;br /&gt;
其中，少数无法验证正确与否的题目没有写代码，部分二叉树的题目写了代码，但由于生成二叉树太过麻烦没有验证。&lt;br /&gt;
&lt;/p&gt;
&lt;h2&gt;解题笔记&lt;/h2&gt;
&lt;h3&gt;Q3&lt;/h3&gt;
&lt;p&gt;声明并初始化二维数组的语句如何写？&lt;br /&gt;
cin如何判断输入结束？&lt;/p&gt;
&lt;h3&gt;Q4&lt;/h3&gt;
&lt;p&gt;字符数组的末尾位置计算差了1，忘了加上\0，要小心&lt;/p&gt;
&lt;h3&gt;Q5&lt;/h3&gt;
&lt;p&gt;递归的方法更简洁&lt;/p&gt;
&lt;h3&gt;Q6&lt;/h3&gt;
&lt;p&gt;stl的find算法&lt;br /&gt;
vector传值性能差，应该用引用&lt;br /&gt;
截取一段时要根据左右子树的长度来截，再次find是错误的&lt;/p&gt;
&lt;h3&gt;Q7&lt;/h3&gt;
&lt;p&gt;stack的pop返回值是void，而top方法才返回顶部值&lt;/p&gt;
&lt;h3&gt;Q8&lt;/h3&gt;
&lt;p&gt;这个二分相当的难。尤其是非递归的写法&lt;br /&gt;
边界值处理要仔细想&lt;br /&gt;
不能忽略如1 0 1的特殊情况&lt;br /&gt;
&lt;/p&gt;
&lt;h3&gt;Q9&lt;/h3&gt;
&lt;p&gt;应该用long long类型&lt;/p&gt;
&lt;h3&gt;Q10&lt;/h3&gt;
&lt;p&gt;求数的二进制表示种1的个数应记住：减1再&amp;amp;自身总会消去一个1&lt;/p&gt;
&lt;h3&gt;Q11&lt;/h3&gt;
&lt;p&gt;除以2用&amp;gt;&amp;gt;，模2用&amp;amp;，效率更高&lt;br /&gt;
应该加上错误检测&lt;/p&gt;
&lt;h3&gt;Q12&lt;/h3&gt;
&lt;p&gt;遇到数字有关的题，首先考虑是不是大数问题&lt;/p&gt;
&lt;h3&gt;Q13&lt;/h3&gt;
&lt;p&gt;把下一个节点的值拷贝到当前节点即可，之后删除下一个节点&lt;/p&gt;
&lt;h3&gt;Q14&lt;/h3&gt;
&lt;p&gt;9du oj要求奇数或偶数的顺序不变，现在的代码没有符合这个要求&lt;/p&gt;
&lt;h3&gt;Q15&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;node *p,q&lt;/code&gt;只把p声明为指针，小心&lt;br /&gt;
参考&lt;a href="https://github.com/julycoding/The-Art-Of-Programming-By-July"&gt;https://github.com/julycoding/The-Art-Of-Programming-By-July&lt;/a&gt;，&lt;code&gt;*&lt;/code&gt;应该靠近类型名&lt;/p&gt;
&lt;h3&gt;Q16&lt;/h3&gt;
&lt;p&gt;画图以帮助理解&lt;/p&gt;
&lt;h3&gt;Q18&lt;/h3&gt;
&lt;p&gt;!p判断指针为空是可以的&lt;br /&gt;
代码未测试&lt;/p&gt;
&lt;h3&gt;Q22&lt;/h3&gt;
&lt;p&gt;方法很难想起来，要仔细分析其中规律&lt;/p&gt;
&lt;h3&gt;Q25&lt;/h3&gt;
&lt;p&gt;代码未测试&lt;/p&gt;
&lt;h3&gt;Q26&lt;/h3&gt;
&lt;p&gt;方法很难想起来 第三步分离链表操作不够简洁&lt;/p&gt;
&lt;h3&gt;Q27&lt;/h3&gt;
&lt;p&gt;使用了一个辅助vector，书上的方法不能仔细的写出来&lt;/p&gt;
&lt;h3&gt;Q28&lt;/h3&gt;
&lt;p&gt;这种解法无法处理多个字符重复的情况，会造成重复&lt;br /&gt;
递归的时候修改全局数组，但递归调用后要把全局数组修改回来，和之前递归调用前后出入栈的方法有异曲同工之妙&lt;br /&gt;
8皇后问题也可以用这个方法解决&lt;/p&gt;
&lt;h3&gt;Q29&lt;/h3&gt;
&lt;p&gt;求数组中任意第K大的数字有成熟的O(n)的算法&lt;/p&gt;
&lt;h3&gt;Q30&lt;/h3&gt;
&lt;p&gt;C++中throw new excetion("error")是不正确的，不能用字符串初始化excetion&lt;br /&gt;
set和multiset是基于红黑树实现的&lt;br /&gt;
&lt;/p&gt;
&lt;h3&gt;Q31&lt;/h3&gt;
&lt;p&gt;第一种解法和DP解法原理是一样的&lt;br /&gt;
&lt;/p&gt;
&lt;h3&gt;Q32&lt;/h3&gt;
&lt;p&gt;1到n个9之间出现1的次数是n*10^(n-1)&lt;br /&gt;
代码未测试&lt;br /&gt;
&lt;/p&gt;
&lt;h3&gt;Q33&lt;/h3&gt;
&lt;p&gt;itoa不是标准库函数，只是linux下的库函数，可以用printf代替&lt;br /&gt;
string可以直接+、&amp;gt;、&amp;lt;运算&lt;br /&gt;
&lt;/p&gt;
&lt;h3&gt;Q34&lt;/h3&gt;
&lt;p&gt;关键是如何保证已经找到的丑数数组是有序的&lt;/p&gt;
&lt;h3&gt;Q35&lt;/h3&gt;
&lt;p&gt;memset函数是在cstring头文件中&lt;/p&gt;
&lt;h3&gt;Q35&lt;/h3&gt;
&lt;p&gt;关键是merge两个数组时的细节处理&lt;br /&gt;
归并排序相当于O(n)的空间换来了时间复杂度提升到O(nlogn)&lt;br /&gt;
&lt;/p&gt;
&lt;h3&gt;Q37&lt;/h3&gt;
&lt;p&gt;代码未测试&lt;/p&gt;
&lt;h3&gt;Q38&lt;/h3&gt;
&lt;p&gt;关键是改变二分查找的循环判断条件&lt;/p&gt;
&lt;h3&gt;Q39&lt;/h3&gt;
&lt;p&gt;题目2的算法不易想起&lt;br /&gt;
代码未测试&lt;/p&gt;
&lt;h3&gt;Q40&lt;/h3&gt;
&lt;p&gt;方法很巧妙&lt;br /&gt;
C++中auto&amp;amp; e : v遍历容器注意v指向元素的引用才可以改变容器中的值&lt;br /&gt;
&lt;/p&gt;
&lt;h3&gt;Q41&lt;/h3&gt;
&lt;p&gt;书中未给出算法证明，亟待解决&lt;/p&gt;
&lt;h3&gt;Q43&lt;/h3&gt;
&lt;p&gt;方法巧妙，解法很难想起来&lt;/p&gt;
&lt;h3&gt;Q45&lt;/h3&gt;
&lt;p&gt;方法巧妙，解法很难想起来&lt;/p&gt;
&lt;h3&gt;Q50&lt;/h3&gt;
&lt;p&gt;如果有指向父节点的指针，那么找到这两个点到根节点的链表，求第一个公共节点&lt;br /&gt;
如果没有，那么dfs遍历得到这两个点的链表，求第一个公共节点&lt;br /&gt;
&lt;/p&gt;</summary><category term="剑指offer"></category></entry><entry><title>Codeforces初体验</title><link href="http://heloman.github.io/pages/2014/06/codeforceschu-ti-yan.html" rel="alternate"></link><updated>2014-06-24T00:00:00+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-06-24:pages/2014/06/codeforceschu-ti-yan.html</id><summary type="html">&lt;h2&gt;Codeforces印象&lt;/h2&gt;
&lt;p&gt;这两天抽时间去codeforces体验了一把。&lt;br /&gt;
首先，果然有众多大牛存在，很多名人一直参加每周一次的比赛，积分2000+，并参与出题。&lt;br /&gt;
另外，上面题目很多，估计至少一千题。比赛结束后，题目将转为练习题，可以持续尝试。每道题目都有标签，如greedy， math， matrices等等，可以点击相应的标签只做相关的题目。可惜我做了好几道之后才发现。&lt;/p&gt;
&lt;h2&gt;这次解决的题目&lt;/h2&gt;
&lt;p&gt;首次尝试，这次做的几个都是选的完成人数最多的，比较简单，但还是有些东西是从中新学习到的。以后最好分类练习。&lt;/p&gt;
&lt;h3&gt;1A    Theatre Square&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用a x a的砖块去铺满面积m x n的广场，不准破坏砖块，允许超出广场，求砖块数目&lt;/li&gt;
&lt;li&gt;分别计算长宽至少多少块即可&lt;/li&gt;
&lt;li&gt;小技巧：(m-1)/a+1来计算长度方向的砖块数目&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;limits&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;long&lt;/span&gt; &lt;span class="nx"&gt;long&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;//cout &amp;lt;&amp;lt; numeric_limits&amp;lt;long&amp;gt;::max() &amp;lt;&amp;lt; endl;&lt;/span&gt;
  &lt;span class="nx"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4A    Watermelon&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;太过简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;158A  Next Round&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;太过简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;71A   Way Too Long Words&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;给定一个单词，如果长度超过10，改成缩写形式：首字母+中间的字母个数+尾字母&lt;/li&gt;
&lt;li&gt;直接输出结果即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;118A  String Task&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;给定一个单词，删掉所有元音字母，其余字母转换为小写并每个字母前加.符号&lt;/li&gt;
&lt;li&gt;使用ostringstream和tolower函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;sstream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;ostringstream&lt;/span&gt; &lt;span class="nx"&gt;ostr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;tolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;o&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;u&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="nx"&gt;ostr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;ostr.str&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;158B  Taxi&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;n个小组，每组不超过4人，出租车每车不能超过4人，同组人不能分开，求最少要多少辆车&lt;/li&gt;
&lt;li&gt;贪心，尽量坐满每一辆车，剩下的进行组合&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// can&amp;#39;t initialize a vector with its element;&lt;/span&gt;
  &lt;span class="c1"&gt;//vector&amp;lt;int&amp;gt; test(1,2,3,4);&lt;/span&gt;
  &lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;stat&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; += 1;
  }

  int num_taxi = 0;
  num_taxi += stat&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
  if(stat&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&amp;gt;= stat&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;){
    num_taxi += stat&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    num_taxi += (stat&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;+1)/2;
  }
  else{
    num_taxi += stat&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    stat&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; -= stat&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    num_taxi += (stat&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; + stat&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;*2 -1)/4 + 1;
  }

  cout &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt; num&lt;/span&gt;&lt;span class="na"&gt;_taxi&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
  &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;50A   Domino piling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;mxn的广场用2x1的砖块铺满，至少多少块？&lt;/li&gt;
&lt;li&gt;分析m,n在为奇偶的情况下的铺法即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;231A  Team&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;太过简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;116A  Tram&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;太多简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;131A  cAPS lOCK&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根据特定条件更改字符串中的字母大小写&lt;/li&gt;
&lt;li&gt;关键是如何遍历字符串中的字符并更改大小写&lt;/li&gt;
&lt;li&gt;for(char &amp;amp;c:s) 可以方便的遍历字符串&lt;/li&gt;
&lt;li&gt;cctype头文件中包含了islower,tolower,isupper,toupper等char字符处理函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;cctype&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;bool&lt;/span&gt; &lt;span class="nx"&gt;meet_rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;s.substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;islower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;meet_rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;islower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;toupper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; 
                &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;282A  Bit++&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;太过简单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点我&lt;/center&gt;&lt;/p&gt;</summary><category term="OJ"></category><category term="Codeforces"></category></entry><entry><title>主定理的证明及应用举例</title><link href="http://heloman.github.io/pages/2014/04/zhu-ding-li-de-zheng-ming-ji-ying-yong-ju-li.html" rel="alternate"></link><updated>2014-04-29T00:00:00+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-04-29:pages/2014/04/zhu-ding-li-de-zheng-ming-ji-ying-yong-ju-li.html</id><summary type="html">&lt;h2&gt;主定理&lt;/h2&gt;
&lt;p&gt;主定理最早出现在《算法导论》中，提供了分治方法带来的递归表达式的渐近复杂度分析。&lt;br /&gt;
规模为n的问题通过分治，得到a个规模为n/b的问题，每次递归带来的额外计算为c(n^d)&lt;br /&gt;
&lt;strong&gt;T(n) &amp;lt;= aT(n/b)+c(n^d)&lt;/strong&gt;&lt;br /&gt;
那么就可以得到问题的复杂度为：&lt;br /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;T(n) = O(n^d log(n)), if a = b^d&lt;/strong&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T(n) = O(n^d ), if a &amp;lt; b^d&lt;/strong&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T(n) = O(n^logb(a))), if a &amp;gt; b^d&lt;/strong&gt;&lt;br /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;证明方法&lt;/h2&gt;
&lt;p&gt;本来使用主定理是可以免去画递归树的，但为了证明主定理，还是需要画树。&lt;br /&gt;
&lt;img alt="" src="img/20140429主定理.png" /&gt;&lt;br /&gt;
可见，每次递归把问题分为a个规模为n/b的子问题。从根节点开始，共有logb(n)+1层，叶子节点数为a^(logb(n))。
那么，第j层共有a^j个子问题，每个问题规模为n/b^j，每个子问题运算量为c*(n/b^j)^d需要完成的计算量为：&lt;br /&gt;
&lt;img alt="" src="img/20140429主定理每层.png" /&gt;&lt;br /&gt;
求和得到整个问题的运算量：&lt;br /&gt;
&lt;img alt="" src="img/20140429主定理所有层.png" /&gt;&lt;br /&gt;
那么，根据a与b^d的关系，很容易得到主定理。&lt;/p&gt;
&lt;h2&gt;应用&lt;/h2&gt;
&lt;h3&gt;二分搜索&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每次问题规模减半，a=1，b=2，d=0&lt;/li&gt;
&lt;li&gt;复杂度为n^0 log(n) = log(n)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;快速排序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;随机选择待排序序列中的一个数字作为划分字问题的标准，划分是否平均影响算法复杂度&lt;/li&gt;
&lt;li&gt;每次问题规模减半，a=2，b=2，d=1&lt;/li&gt;
&lt;li&gt;复杂度为n^2 log(n)&lt;/li&gt;
&lt;li&gt;最差情况下，复杂度为O(n^2)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;归并排序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据列均分为两部分，分别排序，之后以O(n)的复杂度进行合并，空间复杂度O(n)&lt;/li&gt;
&lt;li&gt;每次问题规模减半，a=2，b=2，d=1&lt;/li&gt;
&lt;li&gt;复杂度为n log(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;基数排序(Radix sort)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于待排序的整数序列，从最低位到最高位每次按照相应的位排序一次&lt;/li&gt;
&lt;li&gt;每次递归问题规模变为原来的1/10，但需要求解10个子问题，额外运算为O(n)的，a=10，b=10，d=1&lt;/li&gt;
&lt;li&gt;复杂度为n^1 log(n) = n log(n)，近似为O(kN)，k为整数的位数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;快速傅里叶变换：FFT&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每次问题规模减半，a=2，b=2，d=1&lt;/li&gt;
&lt;li&gt;复杂度为n log(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Karatsuba快速乘法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;正常两个n位数乘法为n^2&lt;/li&gt;
&lt;li&gt;算法把两个乘数各分为高低位两部分，如X*Y = (a+b) * (c+d) = ac+bd + (bc+ad) = ac+bd+(ac+bd - (a-b)(c-d)) &lt;/li&gt;
&lt;li&gt;只需要ac,bd,(a-b)(c-d)三次乘法&lt;/li&gt;
&lt;li&gt;每次问题规模减半，但需要解3个子问题，加法是O(n)的，a=3，b=2，d=1&lt;/li&gt;
&lt;li&gt;复杂度为n^log2(3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;&lt;/p&gt;</summary><category term="Master Theory"></category><category term="分治"></category></entry></feed>