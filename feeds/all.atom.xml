<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Focus</title><link href="http://heloman.github.io/" rel="alternate"></link><link href="http://heloman.github.io/feeds/all.atom.xml" rel="self"></link><id>http://heloman.github.io/</id><updated>2021-01-30T20:08:46+08:00</updated><entry><title>git0710</title><link href="http://heloman.github.io/pages/2021/01/git0710.html" rel="alternate"></link><published>2021-01-30T20:08:46+08:00</published><updated>2021-01-30T20:08:46+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2021-01-30:/pages/2021/01/git0710.html</id><summary type="html">&lt;h1&gt;使用Git完成版本控制&lt;/h1&gt;
&lt;p&gt;我经常同时保存一个程序或一个文档的不同版本，采取的方式就是文件名上面加上日期。
版本控制在团队开发大型项目中是必须的。版本控制系统，可以给程序员自由的修改，很方便的开发多个分支实验新特性，共享代码也很方便。
Git是Linux Torvalds为Linux Kernel编写的版本控制系统，速度快且高效。
有很多版本控制系统，但是相比他们git有以下优点：
- 本地存储，不需要联网，速度快
- 易于学习使用
- 提供staging(缓冲区)，使
- 有github等适合分享的网站&lt;/p&gt;
&lt;h2&gt;git的常用命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name ""&lt;/code&gt; 或者改为 &lt;code&gt;user.email ""&lt;/code&gt;,之后用&lt;code&gt;git config --globa --list&lt;/code&gt;查看&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt; 在当前目录下的.git文件夹内建立一个空仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt; 查看当前分支状态，默认的branch是master&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add .&lt;/code&gt; 添加所有文件到仓库 &lt;code&gt;git add …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;使用Git完成版本控制&lt;/h1&gt;
&lt;p&gt;我经常同时保存一个程序或一个文档的不同版本，采取的方式就是文件名上面加上日期。
版本控制在团队开发大型项目中是必须的。版本控制系统，可以给程序员自由的修改，很方便的开发多个分支实验新特性，共享代码也很方便。
Git是Linux Torvalds为Linux Kernel编写的版本控制系统，速度快且高效。
有很多版本控制系统，但是相比他们git有以下优点：
- 本地存储，不需要联网，速度快
- 易于学习使用
- 提供staging(缓冲区)，使
- 有github等适合分享的网站&lt;/p&gt;
&lt;h2&gt;git的常用命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name ""&lt;/code&gt; 或者改为 &lt;code&gt;user.email ""&lt;/code&gt;,之后用&lt;code&gt;git config --globa --list&lt;/code&gt;查看&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt; 在当前目录下的.git文件夹内建立一个空仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt; 查看当前分支状态，默认的branch是master&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add .&lt;/code&gt; 添加所有文件到仓库 &lt;code&gt;git add file1 dir/&lt;/code&gt; 添加文件或目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit&lt;/code&gt; 打开提交备注的编辑页面，hash(&lt;code&gt;#&lt;/code&gt;)字符开头的行会被忽略&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -a -m "message"&lt;/code&gt; 添加所有更改，跳过&lt;code&gt;git add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;忽略某些文件，在&lt;code&gt;.gitignore&lt;/code&gt;文件中添加相应的目录或文件名即可。这个文件也应该添加到仓库。hash开头可以写注释。这个功能很有用，JD就曾经有程序员把后台系统的管理员密码提交到了github上。&lt;/li&gt;
&lt;li&gt;git跟踪的是文件的内容，而不是文件。修改文件后，需要把修改后的文件再次加入仓库，否则下次commit时不会记录此次更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;git分支&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git branch newbranch&lt;/code&gt; 从当前状态创建新的branch&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout newbranch&lt;/code&gt; 切换到新的branch&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge newbranch&lt;/code&gt; 把newbranch的改动提交到当前branch&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;git stash&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这个命令会缓存当前的更改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash apply&lt;/code&gt;会应用缓存的更改&lt;/li&gt;
&lt;li&gt;apply之后再&lt;code&gt;git checkout file&lt;/code&gt;可以取消部分文件来自缓存的更改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;git amend&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git commit --amend&lt;/code&gt;可以更改最后一个的提交&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;查看分支历史&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt; 可以看到当前branch的commit历史&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git shortlog&lt;/code&gt; 可以看到当前branch的commit历史简略索引&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --all&lt;/code&gt;查看所有分支的commit历史&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gitk&lt;/code&gt; 图形化显示当前分支历史&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gitk --all&lt;/code&gt; 图形化显示所有分支历史&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --all --graph --oneline&lt;/code&gt; 使用文本图形化显示所有分支历史&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;git tag&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag -a v0.5 -m 'this is our half-way release'&lt;/code&gt; 创建一个tag&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git describe&lt;/code&gt; 查看当前版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;与远程服务器交互（github）&lt;/h2&gt;
&lt;h3&gt;常用流程&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;git init&lt;/span&gt;
&lt;span class="err"&gt;git add *&lt;/span&gt;
&lt;span class="err"&gt;git commit -m &amp;quot;message&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;git remote add origin git@*.git/httsp:...*.git //origin为标签，可任意更改&lt;/span&gt;
&lt;span class="err"&gt;git push origin master //b把master推送到origin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add -i&lt;/code&gt;可以交互性的更新文件/撤销，查看更改&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;http://www.open-open.com/lib/view/open1328069733264.html&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20171127移动端阴影渲染</title><link href="http://heloman.github.io/pages/2017/11/20171127yi-dong-duan-yin-ying-xuan-ran.html" rel="alternate"></link><published>2017-11-27T02:39:48+08:00</published><updated>2017-11-27T02:39:48+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2017-11-27:/pages/2017/11/20171127yi-dong-duan-yin-ying-xuan-ran.html</id><content type="html">&lt;h2&gt;如何在移动端渲染阴影&lt;/h2&gt;
&lt;h3&gt;为啥&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;手机的性能相比PC非常差劲，如何渲染出视觉效果好的阴影是一个大难题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;现有的方案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如王者荣耀在低配机型，直接在英雄底部贴一张固定的阴影图&lt;ul&gt;
&lt;li&gt;消耗最少，相当于decal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;而王者荣耀在高配机型上，会使用投影阴影&lt;ul&gt;
&lt;li&gt;需要用stencil处理多重阴影&lt;/li&gt;
&lt;li&gt;难以支持投影到平面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;shadow map很少被采用，因为手机端浮点纹理支持不够，性能也比较耗&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;软阴影的实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;实时软阴影需要pcf随机采样&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>设计模式</title><link href="http://heloman.github.io/pages/2017/06/she-ji-mo-shi.html" rel="alternate"></link><published>2017-06-09T03:00:03+08:00</published><updated>2017-06-09T03:00:03+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2017-06-09:/pages/2017/06/she-ji-mo-shi.html</id><summary type="html">&lt;h1&gt;设计模式的思考&lt;/h1&gt;
&lt;h4&gt;设计模式六大原则&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;单一职责原则&lt;ul&gt;
&lt;li&gt;即一个类只负责一项职责，必要时分解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;里氏替换原则&lt;ul&gt;
&lt;li&gt;子类可以扩展父类的功能，但不能改变父类原有的功能，如有必要，添加一个父类子类共同的基类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依赖倒置原则&lt;ul&gt;
&lt;li&gt;高层不依赖低层，也即是高层（父类）定义好接口，低层（子类）实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口隔离原则&lt;ul&gt;
&lt;li&gt;为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;迪米特法则&lt;ul&gt;
&lt;li&gt;一个对象应该对其他对象保持最少的了解。低耦合，高内聚。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开闭原则&lt;ul&gt;
&lt;li&gt;软件实体如类、模块和函数应该对扩展开放，对修改关闭。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;UML类图中常见几种关系&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;泛化（Generalization）&lt;ul&gt;
&lt;li&gt;即继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依赖(Dependency)&lt;ul&gt;
&lt;li&gt;A使用B&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关联（Association)&lt;ul&gt;
&lt;li&gt;B是A的成员变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;聚合（Aggregation）&lt;ul&gt;
&lt;li&gt;一种强关联，A可以包含一个BB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组合(Composition)&lt;ul&gt;
&lt;li&gt;B是A的成员变量，是A的一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;23种设计模式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;li&gt;工厂模式 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;设计模式的思考&lt;/h1&gt;
&lt;h4&gt;设计模式六大原则&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;单一职责原则&lt;ul&gt;
&lt;li&gt;即一个类只负责一项职责，必要时分解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;里氏替换原则&lt;ul&gt;
&lt;li&gt;子类可以扩展父类的功能，但不能改变父类原有的功能，如有必要，添加一个父类子类共同的基类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依赖倒置原则&lt;ul&gt;
&lt;li&gt;高层不依赖低层，也即是高层（父类）定义好接口，低层（子类）实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接口隔离原则&lt;ul&gt;
&lt;li&gt;为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;迪米特法则&lt;ul&gt;
&lt;li&gt;一个对象应该对其他对象保持最少的了解。低耦合，高内聚。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开闭原则&lt;ul&gt;
&lt;li&gt;软件实体如类、模块和函数应该对扩展开放，对修改关闭。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;UML类图中常见几种关系&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;泛化（Generalization）&lt;ul&gt;
&lt;li&gt;即继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;依赖(Dependency)&lt;ul&gt;
&lt;li&gt;A使用B&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关联（Association)&lt;ul&gt;
&lt;li&gt;B是A的成员变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;聚合（Aggregation）&lt;ul&gt;
&lt;li&gt;一种强关联，A可以包含一个BB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组合(Composition)&lt;ul&gt;
&lt;li&gt;B是A的成员变量，是A的一部分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;23种设计模式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;单例模式&lt;/li&gt;
&lt;li&gt;工厂模式：简单、方法、抽象&lt;/li&gt;
&lt;li&gt;原型模式&lt;/li&gt;
&lt;li&gt;模版方法模式&lt;ul&gt;
&lt;li&gt;常用，子类实现不同的算法函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建造者模式&lt;/li&gt;
&lt;li&gt;中介者模式&lt;ul&gt;
&lt;li&gt;将对象间一对多的关联转变为一对一的关联，可以将网状结构变为星状结构。终结者会很复杂&lt;/li&gt;
&lt;li&gt;比如多个对象之间均有交互，那么为了简化引用关系，实现一个中介类，中介对象和交互对象之间包含对方的引用。中介对象可以实现为单例以避免交互对象对中介对象的引用，仅中介对象保持所有交互对象的引用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;观察者模式&lt;ul&gt;
&lt;li&gt;适应于UI事件处理，可以动态更改关联，可同时通知一批多个观察者&lt;/li&gt;
&lt;li&gt;有pull和push两种实现方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;访问者模式&lt;/li&gt;
&lt;li&gt;装饰模式&lt;ul&gt;
&lt;li&gt;比起静态继承，可以直接修饰对象而不是类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;外观模式&lt;ul&gt;
&lt;li&gt;适合封装内部实现&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适配器模式&lt;ul&gt;
&lt;li&gt;用于转换接口，适应新提出的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代理模式&lt;ul&gt;
&lt;li&gt;一般使用继承、组合实现，接口不变，但中间添加了一些控制条件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;命令模式&lt;ul&gt;
&lt;li&gt;把请求调用封装为命令对象，方便实现命令日志、命令队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;组合模式&lt;ul&gt;
&lt;li&gt;让客户端不再区分操作的是组合对象还是叶子对象，而是以一种统一的方式来操作：设计一个抽象的组件类，让它可以代表组合对象和叶子对象&lt;/li&gt;
&lt;li&gt;方便递归，可以实现xm/json解析、行为树&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;桥接模式&lt;ul&gt;
&lt;li&gt;用于解决多种维度的变化，组合多种子类，可替换多继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;状态模式&lt;ul&gt;
&lt;li&gt;用于实现状态机&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;策略模式&lt;/li&gt;
&lt;li&gt;享元模式&lt;ul&gt;
&lt;li&gt;可理解为缓冲池&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;解释器模式&lt;ul&gt;
&lt;li&gt;解释器是一个简单的语法分析工具，做编译器可用到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;迭代器模式&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>光照渲染路径</title><link href="http://heloman.github.io/pages/2017/02/guang-zhao-xuan-ran-lu-jing.html" rel="alternate"></link><published>2017-02-09T01:04:18+08:00</published><updated>2017-02-09T01:04:18+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2017-02-09:/pages/2017/02/guang-zhao-xuan-ran-lu-jing.html</id><summary type="html">&lt;h2&gt;unity shader入门精要&lt;/h2&gt;
&lt;h3&gt;光照渲染路径&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主要方法有如下三种&lt;ul&gt;
&lt;li&gt;顶点照明渲染路径 Vertex Lit Rendering Path&lt;/li&gt;
&lt;li&gt;前向渲染路径 Forward Rendering Path&lt;/li&gt;
&lt;li&gt;延迟光照渲染路径 Deferred Lighting Rendering Path&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Vertex Lit Rendering Path&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;是Forward Rendering Path的一个子集&lt;/li&gt;
&lt;li&gt;所有的光照都是在顶点层级上计算的，此渲染路径不支持大部分的逐像素渲染效果：如，阴影、法线贴图、灯光遮罩、高精度的高光&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Forward Rendering Path&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;影响物体的最亮的几个光源使用逐像素光照模式。接下来，最多有4个点光源会以逐顶点渲染的方式被计算&lt;/li&gt;
&lt;li&gt;N个物体、M个光源就需要N*M次渲染，光源较多时性能会受影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Deferred Lighting Rendering Path&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;延迟渲染复杂度仅与屏幕分辨率有关&lt;/li&gt;
&lt;li&gt;延迟渲染需要两个Pass，一个用于填充G Buffer …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;unity shader入门精要&lt;/h2&gt;
&lt;h3&gt;光照渲染路径&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;主要方法有如下三种&lt;ul&gt;
&lt;li&gt;顶点照明渲染路径 Vertex Lit Rendering Path&lt;/li&gt;
&lt;li&gt;前向渲染路径 Forward Rendering Path&lt;/li&gt;
&lt;li&gt;延迟光照渲染路径 Deferred Lighting Rendering Path&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Vertex Lit Rendering Path&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;是Forward Rendering Path的一个子集&lt;/li&gt;
&lt;li&gt;所有的光照都是在顶点层级上计算的，此渲染路径不支持大部分的逐像素渲染效果：如，阴影、法线贴图、灯光遮罩、高精度的高光&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Forward Rendering Path&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;影响物体的最亮的几个光源使用逐像素光照模式。接下来，最多有4个点光源会以逐顶点渲染的方式被计算&lt;/li&gt;
&lt;li&gt;N个物体、M个光源就需要N*M次渲染，光源较多时性能会受影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Deferred Lighting Rendering Path&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;延迟渲染复杂度仅与屏幕分辨率有关&lt;/li&gt;
&lt;li&gt;延迟渲染需要两个Pass，一个用于填充G Buffer，一个用于计算光照&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;屏幕后处理的实现&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;OnRenderImage函数可以很方便的对屏幕渲染图像进行处理,只需将实现此函数的脚本添加到camera上&lt;/li&gt;
&lt;li&gt;OnRenderImage可以多个串流叠加&lt;/li&gt;
&lt;li&gt;用于实现边缘检测、高斯模糊、Bloom效果、运动模糊都很方便&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20160906android_opengl</title><link href="http://heloman.github.io/pages/2016/09/20160906android_opengl.html" rel="alternate"></link><published>2016-09-06T17:16:26+08:00</published><updated>2016-09-06T17:16:26+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-09-06:/pages/2016/09/20160906android_opengl.html</id><summary type="html">&lt;h1&gt;安卓平台OpenGL ES的调用&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;开发游戏如果直接使用OpenGL是比较痛苦的，最好的办法是使用封装好的引擎，但很有必要了解在安卓java代码直接调用OpenGL的渲染方法&lt;/li&gt;
&lt;li&gt;固定渲染管线只可通过配置实现不同的效果，而可编程渲染管线通过一般编程的方式实现，可以实现更加灵活的效果&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OpenGL ES&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OpenGL从3.0开始，而OpenGL ES从2.0开始，支持可编程管线&lt;/li&gt;
&lt;li&gt;下图中橙色两块儿即为可编程部分，而顶点和片段着色器要相互配合好才能发挥最大性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Programmable Pipeline of OpenGL 2.0" src="./android_opengl_pipeline.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般通用编程模式为写好两个shader的代码，每次运行程序时即时编译运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;代码框架&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在manifest中声明OpenGL ES &lt;code&gt;&amp;lt;uses-feature android:glEsVersion="0x00020000" android:required="true" /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在入口Acitvity中需要使用GLSurfaceView作为主视图&lt;/li&gt;
&lt;li&gt;在GLSurfaceView中可以扩展出一些其他函数，需要创建一个GLSurfaceView.Renderer的派生类对象负责显示&lt;/li&gt;
&lt;li&gt;GLSurfaceView.Renderer需要关注三个函数：&lt;ul&gt;
&lt;li&gt;onSurfaceCreated：仅调用一次&lt;/li&gt;
&lt;li&gt;onDrawFrame：每次显示都调用&lt;/li&gt;
&lt;li&gt;onSurfaceChanged：view大小变化时调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3D坐标变换&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安卓同样有对应坐标变换的库&lt;code&gt;Matrix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MVP变换的实际乘法顺序是PVM&lt;/li&gt;
&lt;li&gt;V可以通过&lt;code&gt;setLookAtM&lt;/code&gt;得到&lt;/li&gt;
&lt;li&gt;P则是 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;安卓平台OpenGL ES的调用&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;开发游戏如果直接使用OpenGL是比较痛苦的，最好的办法是使用封装好的引擎，但很有必要了解在安卓java代码直接调用OpenGL的渲染方法&lt;/li&gt;
&lt;li&gt;固定渲染管线只可通过配置实现不同的效果，而可编程渲染管线通过一般编程的方式实现，可以实现更加灵活的效果&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OpenGL ES&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;OpenGL从3.0开始，而OpenGL ES从2.0开始，支持可编程管线&lt;/li&gt;
&lt;li&gt;下图中橙色两块儿即为可编程部分，而顶点和片段着色器要相互配合好才能发挥最大性能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Programmable Pipeline of OpenGL 2.0" src="./android_opengl_pipeline.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般通用编程模式为写好两个shader的代码，每次运行程序时即时编译运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;代码框架&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在manifest中声明OpenGL ES &lt;code&gt;&amp;lt;uses-feature android:glEsVersion="0x00020000" android:required="true" /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在入口Acitvity中需要使用GLSurfaceView作为主视图&lt;/li&gt;
&lt;li&gt;在GLSurfaceView中可以扩展出一些其他函数，需要创建一个GLSurfaceView.Renderer的派生类对象负责显示&lt;/li&gt;
&lt;li&gt;GLSurfaceView.Renderer需要关注三个函数：&lt;ul&gt;
&lt;li&gt;onSurfaceCreated：仅调用一次&lt;/li&gt;
&lt;li&gt;onDrawFrame：每次显示都调用&lt;/li&gt;
&lt;li&gt;onSurfaceChanged：view大小变化时调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3D坐标变换&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;安卓同样有对应坐标变换的库&lt;code&gt;Matrix&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;MVP变换的实际乘法顺序是PVM&lt;/li&gt;
&lt;li&gt;V可以通过&lt;code&gt;setLookAtM&lt;/code&gt;得到&lt;/li&gt;
&lt;li&gt;P则是&lt;code&gt;orthoM frustumM/perspectiveM&lt;/code&gt;生成，其中perspectiveM是对frustumM的封装，只是在API Level 14后才存在&lt;/li&gt;
&lt;li&gt;M如果不是I的话，表明模型有位置偏移&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;使用shader画图&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;需要创建一个顶点shader、一个片段shader，以及一个program&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;glCreateShader&lt;/code&gt;可以创建一个shader，之后调用&lt;code&gt;glShaderSource&lt;/code&gt;、&lt;code&gt;glCompileShader&lt;/code&gt;分别设置shader代码和编译&lt;/li&gt;
&lt;li&gt;progam则通过&lt;code&gt;glCreateProgram&lt;/code&gt;创建，调用&lt;code&gt;glAttachShader&lt;/code&gt;添加这两个shader，调用&lt;code&gt;glLinkProgram&lt;/code&gt;进行“链接”生成可执行指令，使用时要&lt;code&gt;glUseProgram&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;示例代码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenGLES20Activity.java    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;androiddeveloper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.support.v7.app.ActionBarActivity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.os.Bundle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.Menu&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.MenuItem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.MotionEvent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.microedition.khronos.opengles.GL10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.app.Activity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.content.Context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.opengl.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OpenGLES20Activity&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Activity&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;GLSurfaceView&lt;/span&gt; &lt;span class="n"&gt;mGLView&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;GLSurfaceView&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;ContentView&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;Activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;mGLView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyGLSurfaceView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mGLView&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyGLSurfaceView&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;GLSurfaceView&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;MyGLRenderer&lt;/span&gt; &lt;span class="n"&gt;mRenderer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyGLSurfaceView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Create&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;OpenGL&lt;/span&gt; &lt;span class="n"&gt;ES&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;
        &lt;span class="n"&gt;setEGLContextClientVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;setRenderMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GLSurfaceView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RENDERMODE_WHEN_DIRTY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;mRenderer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MyGLRenderer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Renderer&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;drawing&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;GLSurfaceView&lt;/span&gt;
        &lt;span class="n"&gt;setRenderer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mRenderer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;TOUCH_SCALE_FACTOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;180.0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;320&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;mPreviousX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;mPreviousY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;onTouchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MotionEvent&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;MotionEvent&lt;/span&gt; &lt;span class="n"&gt;reports&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="n"&gt;details&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;the&lt;/span&gt; &lt;span class="nn"&gt;touch&lt;/span&gt; &lt;span class="nn"&gt;screen&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="n"&gt;controls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;interested&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

        &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getX&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getY&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAction&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;MotionEvent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACTION_MOVE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

                &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mPreviousX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mPreviousY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt; &lt;span class="n"&gt;above&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getHeight&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;mid&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;getWidth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="n"&gt;mRenderer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAngle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;mRenderer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAngle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                        &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;TOUCH_SCALE_FACTOR&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="n"&gt;requestRender&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;mPreviousX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;mPreviousY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MyGLRenderer.java&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;androiddeveloper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;javax.microedition.khronos.opengles.GL10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.opengl.GLES20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.opengl.GLSurfaceView&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.opengl.Matrix&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.os.SystemClock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyGLRenderer&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;GLSurfaceView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Renderer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Triangle&lt;/span&gt; &lt;span class="n"&gt;mTriangle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;mMVPMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;mProjectionMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;mViewMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onSurfaceCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL10&lt;/span&gt; &lt;span class="n"&gt;unused&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;javax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;microedition&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;khronos&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;egl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EGLConfig&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;background&lt;/span&gt; &lt;span class="n"&gt;frame&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glClearColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;mTriangle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Triangle&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;mRotationMatrix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onDrawFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL10&lt;/span&gt; &lt;span class="n"&gt;unused&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;scratch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nb"&gt;long&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SystemClock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uptimeMillis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="il"&gt;4000L&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.090&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setRotateM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mRotationMatrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mAngle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glClear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GL_COLOR_BUFFER_BIT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLookAtM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mViewMatrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;multiplyMM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mMVPMatrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mProjectionMatrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mViewMatrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;Matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;multiplyMM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scratch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mMVPMatrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mRotationMatrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;mTriangle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scratch&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onSurfaceChanged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GL10&lt;/span&gt; &lt;span class="n"&gt;unused&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glViewport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;Matrix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frustumM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mProjectionMatrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ratio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;loadShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;shaderCode&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt; &lt;span class="n"&gt;shader&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GL_VERTEX_SHADER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="n"&gt;shader&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GL_FRAGMENT_SHADER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;shader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glCreateShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;shader&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glShaderSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shaderCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glCompileShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;shader&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;volatile&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;mAngle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;getAngle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mAngle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setAngle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mAngle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Triangle.java&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;androiddeveloper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.nio.ByteBuffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.nio.ByteOrder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.nio.FloatBuffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.opengl.GLES20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Triangle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;FloatBuffer&lt;/span&gt; &lt;span class="n"&gt;vertexBuffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;coordinates&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;
    &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;COORDS_PER_VERTEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;triangleCoords&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;counterclockwise&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mf"&gt;0.622008459&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;
            &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.311004243&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
             &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.311004243&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;  &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blue&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;
    &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mf"&gt;0.63671875&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.76953125&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.22265625&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mProgram&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Triangle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;initialize&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="nb"&gt;buffer&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="n"&gt;coordinates&lt;/span&gt;
        &lt;span class="n"&gt;ByteBuffer&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ByteBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;allocateDirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;coordinate&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;triangleCoords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="n"&gt;hardware&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s native byte order&lt;/span&gt;
        &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ByteOrder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nativeOrder&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;floating&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="nb"&gt;buffer&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;the&lt;/span&gt; &lt;span class="nn"&gt;ByteBuffer&lt;/span&gt;
        &lt;span class="n"&gt;vertexBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asFloatBuffer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;coordinates&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;FloatBuffer&lt;/span&gt;
        &lt;span class="n"&gt;vertexBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;triangleCoords&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;buffer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;coordinate&lt;/span&gt;
        &lt;span class="n"&gt;vertexBuffer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;vertexShader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyGLRenderer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GL_VERTEX_SHADER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;vertexShaderCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fragmentShader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyGLRenderer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GL_FRAGMENT_SHADER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;fragmentShaderCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="n"&gt;OpenGL&lt;/span&gt; &lt;span class="n"&gt;ES&lt;/span&gt; &lt;span class="n"&gt;Program&lt;/span&gt;
        &lt;span class="n"&gt;mProgram&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glCreateProgram&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt; &lt;span class="n"&gt;shader&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glAttachShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mProgram&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vertexShader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="n"&gt;shader&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glAttachShader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mProgram&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fragmentShader&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;creates&lt;/span&gt; &lt;span class="n"&gt;OpenGL&lt;/span&gt; &lt;span class="n"&gt;ES&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;executables&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glLinkProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mProgram&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;vertexShaderCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;uniform mat4 uMVPMatrix;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;attribute vec4 vPosition;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;void main() {&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;  gl_Position = uMVPMatrix * vPosition;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;fragmentShaderCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;precision mediump float;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;uniform vec4 vColor;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;void main() {&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;  gl_FragColor = vColor;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mPositionHandle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mColorHandle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;vertexCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;triangleCoords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;COORDS_PER_VERTEX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;vertexStride&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;COORDS_PER_VERTEX&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt;

    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mMVPMatrixHandle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;mvpMatrix&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;OpenGL&lt;/span&gt; &lt;span class="n"&gt;ES&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glUseProgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mProgram&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt; &lt;span class="n"&gt;shader&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s vPosition member&lt;/span&gt;
        &lt;span class="n"&gt;mPositionHandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glGetAttribLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mProgram&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;vPosition&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Enable&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;triangle&lt;/span&gt; &lt;span class="n"&gt;vertices&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glEnableVertexAttribArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mPositionHandle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Prepare&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;triangle&lt;/span&gt; &lt;span class="n"&gt;coordinate&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glVertexAttribPointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mPositionHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;COORDS_PER_VERTEX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GL_FLOAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;vertexStride&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vertexBuffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="n"&gt;shader&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s vColor member&lt;/span&gt;
        &lt;span class="n"&gt;mColorHandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glGetUniformLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mProgram&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;vColor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Set&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;drawing&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;triangle&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glUniform4fv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mColorHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;mMVPMatrixHandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glGetUniformLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mProgram&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;uMVPMatrix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glUniformMatrix4fv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mMVPMatrixHandle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mvpMatrix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Draw&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;triangle&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glDrawArrays&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GL_TRIANGLES&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vertexCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Disable&lt;/span&gt; &lt;span class="n"&gt;vertex&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;
        &lt;span class="n"&gt;GLES20&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glDisableVertexAttribArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mPositionHandle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;作者Focustc，来自于&lt;a href="http://blog.csdn.net/caozhk"&gt;CSDN&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20160823安卓逆向工程</title><link href="http://heloman.github.io/pages/2016/08/20160823an-zhuo-ni-xiang-gong-cheng.html" rel="alternate"></link><published>2016-08-23T21:20:16+08:00</published><updated>2016-08-23T21:20:16+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-08-23:/pages/2016/08/20160823an-zhuo-ni-xiang-gong-cheng.html</id><summary type="html">&lt;h1&gt;安卓逆向简介&lt;/h1&gt;
&lt;h2&gt;常用逆向方法&lt;/h2&gt;
&lt;h3&gt;Apk文件格式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Apk文件其实是一个zip文件，解压之后可以看到其中的目录结构&lt;/li&gt;
&lt;li&gt;AndroidManifest.xml&lt;ul&gt;
&lt;li&gt;已经过编译，包括activity、权限等配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;classes.dex&lt;ul&gt;
&lt;li&gt;java程序生成的.class文件经过打包生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;resources.arsc&lt;ul&gt;
&lt;li&gt;资源文件索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;res&lt;ul&gt;
&lt;li&gt;此文件夹包括布局文件、图片、strings等文件，可以通过R.java引用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lib&lt;ul&gt;
&lt;li&gt;用到的第三方库，包括.so文件。.so文件不易破解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;assets&lt;ul&gt;
&lt;li&gt;不经编译的资源文件，可以通过AssetManager类访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;META-INF&lt;ul&gt;
&lt;li&gt;应用签名文件，用于验证apk中的文件没有被修改过&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;使用dex2jar和jdgui查看java代码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先将apk或者apk中的dex文件拖到&lt;code&gt;d2j-dex2jar.bat&lt;/code&gt;上，会得到一个jar文件&lt;/li&gt;
&lt;li&gt;用jdgui打开此jar文件，即可看到java源码&lt;/li&gt;
&lt;li&gt;注意，部分源码无法正确得到&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;使用apktool反编译和打包&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;反编译命令&lt;code&gt;apktool d *.apk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重新打包命令 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;安卓逆向简介&lt;/h1&gt;
&lt;h2&gt;常用逆向方法&lt;/h2&gt;
&lt;h3&gt;Apk文件格式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Apk文件其实是一个zip文件，解压之后可以看到其中的目录结构&lt;/li&gt;
&lt;li&gt;AndroidManifest.xml&lt;ul&gt;
&lt;li&gt;已经过编译，包括activity、权限等配置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;classes.dex&lt;ul&gt;
&lt;li&gt;java程序生成的.class文件经过打包生成&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;resources.arsc&lt;ul&gt;
&lt;li&gt;资源文件索引&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;res&lt;ul&gt;
&lt;li&gt;此文件夹包括布局文件、图片、strings等文件，可以通过R.java引用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;lib&lt;ul&gt;
&lt;li&gt;用到的第三方库，包括.so文件。.so文件不易破解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;assets&lt;ul&gt;
&lt;li&gt;不经编译的资源文件，可以通过AssetManager类访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;META-INF&lt;ul&gt;
&lt;li&gt;应用签名文件，用于验证apk中的文件没有被修改过&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;使用dex2jar和jdgui查看java代码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先将apk或者apk中的dex文件拖到&lt;code&gt;d2j-dex2jar.bat&lt;/code&gt;上，会得到一个jar文件&lt;/li&gt;
&lt;li&gt;用jdgui打开此jar文件，即可看到java源码&lt;/li&gt;
&lt;li&gt;注意，部分源码无法正确得到&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;使用apktool反编译和打包&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;反编译命令&lt;code&gt;apktool d *.apk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重新打包命令&lt;code&gt;apktool p folder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用auto-sign重签名&lt;ul&gt;
&lt;li&gt;将apk改名为update.zip,复制到签名工具的目录下,运行Sign.bat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重新打包之前可以修改smali文件夹下的源码达到破解的目的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;使用IDA Pro查看.so文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;窗口左侧选中函数后，按F5可以在Pseudocode窗口查看反编译得到的C代码&lt;/li&gt;
&lt;li&gt;同样可以动态调试.so代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;常用apk保护方法&lt;/h2&gt;
&lt;h3&gt;加固/加壳&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;加壳指的是将dex文件加密后和加密apk写入一个新的dex文件，运行时首先通过加密apk解密得到源dex文件，再通过DexClassLoader动态加载源dex&lt;/li&gt;
&lt;li&gt;运行时必然将源dex加载到内存中运行，因此在加载源dex后dump内存中对应区块即可得到源dex文件，即脱壳成功&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;混淆&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;混淆java或者C#(Unity)代码，即使反编译也无法看懂源代码，增加分析代码逻辑的难度&lt;/li&gt;
&lt;li&gt;对于java代码，可以配置proguard脚本生成apk时混淆classes.dex&lt;/li&gt;
&lt;li&gt;对于Unity项目，反编译后得到的Assembly-CSharp.dll即可使用.NET Reflector直接查看源代码，建议使用Obfuscar混淆&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;运行时验证&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;目的是防止二次打包&lt;/li&gt;
&lt;li&gt;可以对dex文件进行验证&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;阻止内存修改&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;要对抗八门神器这种内存修改器，可以将关键变量实时加密，仅在使用时解密&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;作者Focustc，来自于&lt;a href="http://blog.csdn.net/caozhk"&gt;CSDN&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>python的几个基本问题</title><link href="http://heloman.github.io/pages/2016/07/pythonde-ji-ge-ji-ben-wen-ti.html" rel="alternate"></link><published>2016-07-06T11:09:58+08:00</published><updated>2016-07-06T11:09:58+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-07-06:/pages/2016/07/pythonde-ji-ge-ji-ben-wen-ti.html</id><content type="html">&lt;h1&gt;python的几个基本问题&lt;/h1&gt;
&lt;h2&gt;标识符皆引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所有标识符皆引用，只是指向了一个分配好的对象&lt;/li&gt;
&lt;li&gt;list中存储的也是对元素的引用，dict等容器也是如此&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;is和==&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;is和is not用来检测两个标识符是否指向同一个对象&lt;/li&gt;
&lt;li&gt;==和!=用来检测两个标识符指向的对象的值是否相等&lt;/li&gt;
&lt;li&gt;通常使用后者，仅当需要测试是否同一个对象时才使用前者&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;除法和余数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;m/n = q ---- r&lt;/li&gt;
&lt;li&gt;必有m = n*q + r&lt;/li&gt;
&lt;li&gt;r与n同号，且abs(r) &amp;lt; abs(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;函数参数传引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;python函数传参数相当于赋值操作，把实参赋值给形参&lt;/li&gt;
&lt;li&gt;返回值也相当于赋值操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;异常处理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用大量检测来保证函数的输入正确是没有必要的，可能花费的代价更高&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20160616vrui</title><link href="http://heloman.github.io/pages/2016/06/20160616vrui.html" rel="alternate"></link><published>2016-06-16T09:07:32+08:00</published><updated>2016-06-16T09:07:32+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-06-16:/pages/2016/06/20160616vrui.html</id><content type="html">&lt;h1&gt;VR游戏的UI设计&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;除了按钮还可以探索其他交互方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fuse按钮&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用一个焦点来指示视线位置，长时间注视来确认点击&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;按钮摆放&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;按钮要足够大，间隔也要足够大&lt;/li&gt;
&lt;li&gt;暴风VR在播放视频时把按钮放到最底下，很不错&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;倒计时按钮&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;注视过程中提供一些反馈，如桶被填满、圆环转一圈等效果&lt;/li&gt;
&lt;li&gt;最好提供直接点击的确认方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;按钮辅助&lt;/h3&gt;
&lt;h3&gt;GearVR触摸板+按钮辅助&lt;/h3&gt;
&lt;h2&gt;不能掉帧&lt;/h2&gt;
&lt;h2&gt;头控要考虑可移动范围&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;尽量减少头部移动&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;血条显示位置&lt;/h2&gt;</content><category term="misc"></category></entry><entry><title>20160612安卓按键键码修改</title><link href="http://heloman.github.io/pages/2016/06/20160612an-zhuo-an-jian-jian-ma-xiu-gai.html" rel="alternate"></link><published>2016-06-12T22:44:02+08:00</published><updated>2016-06-12T22:44:02+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-06-12:/pages/2016/06/20160612an-zhuo-an-jian-jian-ma-xiu-gai.html</id><summary type="html">&lt;h1&gt;安卓系统按键映射修改&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;谨记录下靠着自己摸索，安卓平板使用时一个bug的解决方案，及修改按钮功能的方法。这个bug目前搜不到解决方案，能独立解决还是很有成就感的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;解决反复打开谷歌语音搜索的bug&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;手里一部驰为hi8，是国产双系统平板，在安卓系统下如果插上耳机会自动暂停和播放音乐，并反复打开谷歌搜索&lt;/li&gt;
&lt;li&gt;这个bug目前网上没有找到答案。自己猜测，应该是耳机接口不匹配，相当于一直按着线控耳机上的播放/暂停按钮出现的情况&lt;/li&gt;
&lt;li&gt;安卓系统基于linux，应该有办法修改按键键码的，谷歌知道，/system/usr/keylayout/qwerty.kl中保存了按键配置信息。但打开后看到注释写明此文件已不再使用，新系统采用的是Generic.kl文件中的配置&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开Generic.kl可以看到其中数据全都是如下格式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;key 163 MEDIA_NEXT&lt;/span&gt;
&lt;span class="err"&gt;key 164 MEDIA_PLAY_PAUSE&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;key 172 HOME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;很明显，数字就是键码，而后面的大写字母则是对应的功能。遍历整个文件，只有上述提到的164关联了play和pause两个功能，大胆猜测这就是线控耳机的那个按钮。遂注释掉这一行重启平板，果然反复启动谷歌语音搜索的bug不见了，音乐播放器也不会反复自动打开了，当然，如果有需要使用线控耳机也不能用了~&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;屏蔽Win按钮 …&lt;/h3&gt;</summary><content type="html">&lt;h1&gt;安卓系统按键映射修改&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;谨记录下靠着自己摸索，安卓平板使用时一个bug的解决方案，及修改按钮功能的方法。这个bug目前搜不到解决方案，能独立解决还是很有成就感的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;解决反复打开谷歌语音搜索的bug&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;手里一部驰为hi8，是国产双系统平板，在安卓系统下如果插上耳机会自动暂停和播放音乐，并反复打开谷歌搜索&lt;/li&gt;
&lt;li&gt;这个bug目前网上没有找到答案。自己猜测，应该是耳机接口不匹配，相当于一直按着线控耳机上的播放/暂停按钮出现的情况&lt;/li&gt;
&lt;li&gt;安卓系统基于linux，应该有办法修改按键键码的，谷歌知道，/system/usr/keylayout/qwerty.kl中保存了按键配置信息。但打开后看到注释写明此文件已不再使用，新系统采用的是Generic.kl文件中的配置&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开Generic.kl可以看到其中数据全都是如下格式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;key 163 MEDIA_NEXT&lt;/span&gt;
&lt;span class="err"&gt;key 164 MEDIA_PLAY_PAUSE&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;key 172 HOME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;很明显，数字就是键码，而后面的大写字母则是对应的功能。遍历整个文件，只有上述提到的164关联了play和pause两个功能，大胆猜测这就是线控耳机的那个按钮。遂注释掉这一行重启平板，果然反复启动谷歌语音搜索的bug不见了，音乐播放器也不会反复自动打开了，当然，如果有需要使用线控耳机也不能用了~&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;屏蔽Win按钮&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;经常使用这个平板玩儿虚荣，最为烦恼的是玩儿着玩儿着不小心碰到类Win按钮，直接回到了桌面，再次切换回游戏的话，都已经输了一波了。因此解决上述问题后有了屏蔽Win按钮的想法&lt;/li&gt;
&lt;li&gt;这个按钮对应的键码想必就是HOME了，这个kl文件中总共有两行key都是HOME，两次试验确定&lt;code&gt;key 102 HOME&lt;/code&gt;才对应Win键，同样注释掉，搞定~&lt;/li&gt;
&lt;li&gt;嗯，这个kl文件同样采用的是&lt;code&gt;#&lt;/code&gt;作为行注释标记&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;作者Focustc，来自于&lt;a href="http://blog.csdn.net/caozhk"&gt;CSDN&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20160606python定时杀进程</title><link href="http://heloman.github.io/pages/2016/06/20160606pythonding-shi-sha-jin-cheng.html" rel="alternate"></link><published>2016-06-06T15:43:32+08:00</published><updated>2016-06-06T15:43:32+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-06-06:/pages/2016/06/20160606pythonding-shi-sha-jin-cheng.html</id><summary type="html">&lt;h1&gt;python定时杀进程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;之前写了个python脚本用selenium+phantomjs爬新帖子，在循环拉取页面的过程中，phantomjs总是block住，使用WebDriverWait设置最长等待时间无效。用firefox替换phantomjs无改善&lt;/li&gt;
&lt;li&gt;因为这个脚本不会长期使用，因此采取临时办法，新开一个子线程固定周期杀死phantomjs进程，这样selenium就会在block最多不超过此周期后返回。当然在爬虫脚本中做一些微调防止部分url被跳过&lt;/li&gt;
&lt;li&gt;定时执行任务采用sched模块，很多人将其与crontab相提并论&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;杀死特定进程的命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kill -9  pid&lt;/code&gt;命令可以无条件终止对应pid进程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;获取名为phantomjs的进程pid&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ps命令列出进程信息&lt;/li&gt;
&lt;li&gt;grep过滤得指定名字的进程信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;awk '{print $2}'&lt;/code&gt;提取第二列pid信息&lt;/li&gt;
&lt;li&gt;最终命令为：kill -9 `ps -aux|grep phantomjs|awk '{print $2}'`&lt;/li&gt;
&lt;li&gt;python可以用os.system()执行shell命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;使用sched模块周期执行任务&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sched模块使用heapq保存event队列，其event为namedtuple类型&lt;/li&gt;
&lt;li&gt;sched需要提供两个函数，一个用来获取时间变化，一个用于等待一段时间，可自定义&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;基本API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sched.scheduler(time_func …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;python定时杀进程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;之前写了个python脚本用selenium+phantomjs爬新帖子，在循环拉取页面的过程中，phantomjs总是block住，使用WebDriverWait设置最长等待时间无效。用firefox替换phantomjs无改善&lt;/li&gt;
&lt;li&gt;因为这个脚本不会长期使用，因此采取临时办法，新开一个子线程固定周期杀死phantomjs进程，这样selenium就会在block最多不超过此周期后返回。当然在爬虫脚本中做一些微调防止部分url被跳过&lt;/li&gt;
&lt;li&gt;定时执行任务采用sched模块，很多人将其与crontab相提并论&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;杀死特定进程的命令&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;kill -9  pid&lt;/code&gt;命令可以无条件终止对应pid进程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;获取名为phantomjs的进程pid&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ps命令列出进程信息&lt;/li&gt;
&lt;li&gt;grep过滤得指定名字的进程信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;awk '{print $2}'&lt;/code&gt;提取第二列pid信息&lt;/li&gt;
&lt;li&gt;最终命令为：kill -9 `ps -aux|grep phantomjs|awk '{print $2}'`&lt;/li&gt;
&lt;li&gt;python可以用os.system()执行shell命令&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;使用sched模块周期执行任务&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;sched模块使用heapq保存event队列，其event为namedtuple类型&lt;/li&gt;
&lt;li&gt;sched需要提供两个函数，一个用来获取时间变化，一个用于等待一段时间，可自定义&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;基本API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sched.scheduler(time_func, sleep_func)&lt;/code&gt; 函数返回一个scheduler对象，time_func是一个返回数字的计时函数，而sleep_func可接受此数字参数，并延时相应时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scheduler.enter(delay, priority, action, argument)&lt;/code&gt;在&lt;code&gt;delay&lt;/code&gt;时间段后，用参数&lt;code&gt;argument&lt;/code&gt;调用&lt;code&gt;action&lt;/code&gt;， &lt;code&gt;argument&lt;/code&gt;必须是一个tuple。若要在固定时刻运行，则应调用&lt;code&gt;scheduler.enterabs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scheduler.cancel(event)&lt;/code&gt;取消定时任务。event为enter函数返回值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scheduler.run()&lt;/code&gt;开始执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;任务时间重叠&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在执行任务时有可能要block一段时间，任务返回后可能已经超过下一个任务的定时时刻，这种情况下会立刻执行下一个任务，而不会跳过&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;周期执行&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;类似于递归调用，写一个wrapper function，在任务里面再次定时下一次任务即可&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;def wrapper(func, delay):&lt;/span&gt;
&lt;span class="err"&gt;    scheduler.enter(delay, 0, wrapper, (func, delay))&lt;/span&gt;
&lt;span class="err"&gt;    func()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;最终代码&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;sched&lt;/span&gt;

&lt;span class="n"&gt;schedule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sched&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;kill -9 `ps -aux|grep phantomjs|awk &amp;#39;{print $2}&amp;#39;`&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;recycle_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recycle_eval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;phantomjs killed&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;
    &lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recycle_eval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;作者Focustc，来自于&lt;a href="http://blog.csdn.net/caozhk"&gt;CSDN&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20160506unity_camera</title><link href="http://heloman.github.io/pages/2016/05/20160506unity_camera.html" rel="alternate"></link><published>2016-05-31T12:02:36+08:00</published><updated>2016-05-31T12:02:36+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-05-31:/pages/2016/05/20160506unity_camera.html</id><summary type="html">&lt;h1&gt;Unity的camera组件&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;文章介绍的是个大概，其中rendering paths和culling、clear flag还有更详细的用法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;正交和透视&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;unity的camera支持两种投影方式：正交和透视&lt;/li&gt;
&lt;li&gt;人眼看到的物体，近处的比较大、远处的比较小，unity的摄像机支持这种透视效果，称为透视相机&lt;/li&gt;
&lt;li&gt;如果不需要物体大小随到摄像机的距离改变，可以采用正交投影&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;可视区域&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一般摄像机仅关注一个范围内的物体，垂直于摄像机z轴有两个平面，分别称为远、近裁剪平面，只有两个平面之间的物体才会投影到摄像机&lt;/li&gt;
&lt;li&gt;对于正交投影，可视区域为一个长方体&lt;/li&gt;
&lt;li&gt;对于透视投影，可视区域为一个锥体的一部分，锥体顶端是摄像机，锥体底面为远裁剪面，并被近裁剪面切割掉顶部&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;背景图和天空盒&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在户外场景，投影到2D平面后部分区域是没有任何投影的，这时可以用背景色填充，但更逼真的方法是使用天空盒&lt;/li&gt;
&lt;li&gt;摄像机转动时会看到天空盒的不同位置，但位置始终在天空盒的正中心&lt;/li&gt;
&lt;li&gt;天空盒是由6张图片拼接成的立方体盒子，显示在所有物体之后&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;多摄像头切换&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果多个摄像头可用，则深度最大的摄像头会显示在最上方，覆盖其他摄像头。可以设置disable完成多个摄像头之间的切换&lt;/li&gt;
&lt;li&gt;使用第二个摄像机显示小地图&lt;ul&gt;
&lt;li&gt;深度调高，以显示在上方&lt;/li&gt;
&lt;li&gt;设置viewport rect，调整占用2D屏幕的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;摄像头射线投影 …&lt;/h2&gt;</summary><content type="html">&lt;h1&gt;Unity的camera组件&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;文章介绍的是个大概，其中rendering paths和culling、clear flag还有更详细的用法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;正交和透视&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;unity的camera支持两种投影方式：正交和透视&lt;/li&gt;
&lt;li&gt;人眼看到的物体，近处的比较大、远处的比较小，unity的摄像机支持这种透视效果，称为透视相机&lt;/li&gt;
&lt;li&gt;如果不需要物体大小随到摄像机的距离改变，可以采用正交投影&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;可视区域&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一般摄像机仅关注一个范围内的物体，垂直于摄像机z轴有两个平面，分别称为远、近裁剪平面，只有两个平面之间的物体才会投影到摄像机&lt;/li&gt;
&lt;li&gt;对于正交投影，可视区域为一个长方体&lt;/li&gt;
&lt;li&gt;对于透视投影，可视区域为一个锥体的一部分，锥体顶端是摄像机，锥体底面为远裁剪面，并被近裁剪面切割掉顶部&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;背景图和天空盒&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在户外场景，投影到2D平面后部分区域是没有任何投影的，这时可以用背景色填充，但更逼真的方法是使用天空盒&lt;/li&gt;
&lt;li&gt;摄像机转动时会看到天空盒的不同位置，但位置始终在天空盒的正中心&lt;/li&gt;
&lt;li&gt;天空盒是由6张图片拼接成的立方体盒子，显示在所有物体之后&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;多摄像头切换&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果多个摄像头可用，则深度最大的摄像头会显示在最上方，覆盖其他摄像头。可以设置disable完成多个摄像头之间的切换&lt;/li&gt;
&lt;li&gt;使用第二个摄像机显示小地图&lt;ul&gt;
&lt;li&gt;深度调高，以显示在上方&lt;/li&gt;
&lt;li&gt;设置viewport rect，调整占用2D屏幕的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;摄像头射线投影&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2D屏幕上的任意点都对应一条射线，可以使用ScreenPointToRay和ViewportPointToRay来获得此射线&lt;/li&gt;
&lt;li&gt;此射线起点位于近裁剪面&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;camera组件参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clear Flags:使用什么清除像素缓存？比如天空盒或当前camera的背景色&lt;ul&gt;
&lt;li&gt;Depth only选项配合Culling Mask可以完成单独显示一个物体不被遮挡的效果，如fps游戏中的枪&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Background:背景色&lt;/li&gt;
&lt;li&gt;Culling Mask:仅渲染选中的layer&lt;/li&gt;
&lt;li&gt;Projection:正交或透视&lt;/li&gt;
&lt;li&gt;Size:当选中正交时，设置可视区域大小&lt;/li&gt;
&lt;li&gt;FOV:当选中透视时，y轴方向视角&lt;/li&gt;
&lt;li&gt;Clipping Planes:裁剪面位置&lt;/li&gt;
&lt;li&gt;Viewport Rect:显示在屏幕上的大小、位置&lt;/li&gt;
&lt;li&gt;Depth:深度，值大的渲染在最前面&lt;/li&gt;
&lt;li&gt;Rendering Path:渲染方法，包括：&lt;ul&gt;
&lt;li&gt;延迟光照Deffered Lighting:将lighting在屏幕空间进行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Target Texture:用于截图，如果使用则会停止渲染到屏幕&lt;/li&gt;
&lt;li&gt;HDR:开启HDR&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;作者Focustc，来自于&lt;a href="http://blog.csdn.net/caozhk"&gt;CSDN&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20160526python开发环境管理pip和virtualenv</title><link href="http://heloman.github.io/pages/2016/05/20160526pythonkai-fa-huan-jing-guan-li-piphe-virtualenv.html" rel="alternate"></link><published>2016-05-26T12:12:24+08:00</published><updated>2016-05-26T12:12:24+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-05-26:/pages/2016/05/20160526pythonkai-fa-huan-jing-guan-li-piphe-virtualenv.html</id><summary type="html">&lt;h1&gt;python开发环境管理：pip和virtualenv&lt;/h1&gt;
&lt;p&gt;不同的python软件需要不同的开发环境，互相之间甚至可能有冲突，怎么处理？使用pip、virtualenv和virtualenvwrapper可以迅速的搭建、转移开发环境，并隔离冲突。&lt;/p&gt;
&lt;h2&gt;软件包管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pip是easy_install的替代品，distribute是setuptools的替代品&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;pip使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用参考文档为：&lt;a href="https://pip.pypa.io/en/latest/user_guide/"&gt;pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install test&lt;/code&gt;安装test包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip list&lt;/code&gt;列出已经安装的包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install --upgrade test&lt;/code&gt;升级test包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip uninstall test&lt;/code&gt;卸载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install test==4.4&lt;/code&gt;指定版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install test&amp;gt;=4.4&lt;/code&gt;指定最小版本号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;到处当前python环境的依赖库要求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;python开发环境管理：pip和virtualenv&lt;/h1&gt;
&lt;p&gt;不同的python软件需要不同的开发环境，互相之间甚至可能有冲突，怎么处理？使用pip、virtualenv和virtualenvwrapper可以迅速的搭建、转移开发环境，并隔离冲突。&lt;/p&gt;
&lt;h2&gt;软件包管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pip是easy_install的替代品，distribute是setuptools的替代品&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;pip使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用参考文档为：&lt;a href="https://pip.pypa.io/en/latest/user_guide/"&gt;pip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install test&lt;/code&gt;安装test包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip list&lt;/code&gt;列出已经安装的包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install --upgrade test&lt;/code&gt;升级test包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip uninstall test&lt;/code&gt;卸载&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install test==4.4&lt;/code&gt;指定版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install test&amp;gt;=4.4&lt;/code&gt;指定最小版本号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;到处当前python环境的依赖库要求&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;根据依赖文件安装库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;virtualenv&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;virtualenv是用来创建独立python运行环境的工具&lt;/li&gt;
&lt;li&gt;可以创建单独的安装目录，解决了依赖项、版本和权限的问题。比如pip不需要sudo了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;创建虚拟环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;virtualenv test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;命令将在当前目前下建立一个名为test的文件夹&lt;/li&gt;
&lt;li&gt;此文件夹下python环境会自动安装pip，方便安装其他程序&lt;/li&gt;
&lt;li&gt;默认将能使用系统中已经安装的包，可以使用&lt;code&gt;--no-site-packages&lt;/code&gt;禁止&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;启动虚拟环境&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source test/bin/activate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;启动之后，可以看到命令行头部出现&lt;code&gt;(test)&lt;/code&gt;字样，表明启动成功&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;退出&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deactivate&lt;/code&gt;用于退出虚拟环境&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm -r test&lt;/code&gt;用于删除虚拟环境&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;virtualenvwrapper&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;virtualenvwrapper是virtualenv的一个扩展，使虚拟环境的管理更加容易&lt;/li&gt;
&lt;li&gt;参考文档&lt;a href="http://virtualenvwrapper.readthedocs.org/en/latest/"&gt;virtualenvwrapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;sudo pip install&lt;/code&gt;之后使用以下命令设置开发环境，可以将最后一行加入&lt;code&gt;.bash_profile&lt;/code&gt;，以后就无需重复初始化了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ mkdir -p &lt;span class="nv"&gt;$WORKON_HOME&lt;/span&gt;
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/Envs
$ &lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方便起见，直接将以下代码加入&lt;code&gt;.bashrc&lt;/code&gt;，因为有些环境下&lt;code&gt;.bash_profile&lt;/code&gt;不会被执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="err"&gt;设置&lt;/span&gt;&lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="err"&gt;工作的目录&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="err"&gt;我们放在用户跟目录下&lt;/span&gt;
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;virtualenvs&lt;/span&gt;

&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;ensure&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;environments&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="n"&gt;isolated&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt;    
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;VIRTUALENVWRAPPER_VIRTUALENV_ARGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--no-site-packages&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;directory&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;virtualenvs&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;virtualenvwrapper&lt;/span&gt;    
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;PIP_VIRTUALENV_BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;WORKON_HOME&lt;/span&gt;

&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;makes&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;detect&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;active&lt;/span&gt; &lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;    
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;PIP_RESPECT_VIRTUALENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;virtualenvwrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="p"&gt;]];&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;        
    &lt;span class="k"&gt;source&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;virtualenvwrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;    
&lt;span class="k"&gt;else&lt;/span&gt;        
    &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;WARNING: Can&amp;#39;t find virtualenvwrapper.sh&amp;quot;&lt;/span&gt;    
&lt;span class="n"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;常用命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkvirtualenv test&lt;/code&gt;创建名为test的虚拟环境&lt;/li&gt;
&lt;li&gt;&lt;code&gt;workon&lt;/code&gt;或者&lt;code&gt;lsvirtualenv&lt;/code&gt;列出所有虚拟环境&lt;/li&gt;
&lt;li&gt;&lt;code&gt;workon test&lt;/code&gt;启动或者切换虚拟环境&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rmvirtualenv test&lt;/code&gt;删除虚拟环境&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deactivate&lt;/code&gt;退出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;作者Focustc，来自于&lt;a href="http://blog.csdn.net/caozhk"&gt;CSDN&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20160523python_json_csv</title><link href="http://heloman.github.io/pages/2016/05/20160523python_json_csv.html" rel="alternate"></link><published>2016-05-26T11:55:34+08:00</published><updated>2016-05-26T11:55:34+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-05-26:/pages/2016/05/20160523python_json_csv.html</id><summary type="html">&lt;h1&gt;使用python开发json、csv数据格式转换工具&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;json和xml是业界常用的数据格式，而游戏行业经常使用csv配表，包括本地化文本和数值。本文介绍csv和json序列化、逆序列化相关的python库，以及开发工具常用的命令行解析库--getopt&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;csv模块&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;csv文件格式并不统一，存在多种分隔符，而csv模块可以很方便的读写csv文件&lt;/li&gt;
&lt;li&gt;csv.reader&lt;ul&gt;
&lt;li&gt;返回一个reader迭代器，迭代器每次给出一个字符串列表，对应于csv文件中的一行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;csv.writer&lt;ul&gt;
&lt;li&gt;相应的，返回一个writer，调用&lt;code&gt;writerrow([stra,strb,...strc])&lt;/code&gt;可以将数据写入文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;csv.DictReader&lt;ul&gt;
&lt;li&gt;创建一个DictReader类，对比reader迭代器，每次迭代给出一个字典对应一行，参数Reader.fieldnames给出了字典的key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;csv.DictWriter&lt;ul&gt;
&lt;li&gt;类似writer，但输出的是字典&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;json模块&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dump(obj, fp)将对象序列化后写入文件fp，indent选项可格式化json文件&lt;/li&gt;
&lt;li&gt;dumps(obj)返回obj序列化之后的字符串&lt;/li&gt;
&lt;li&gt;load(fp)从文件对象fp中反序列化 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;使用python开发json、csv数据格式转换工具&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;json和xml是业界常用的数据格式，而游戏行业经常使用csv配表，包括本地化文本和数值。本文介绍csv和json序列化、逆序列化相关的python库，以及开发工具常用的命令行解析库--getopt&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;csv模块&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;csv文件格式并不统一，存在多种分隔符，而csv模块可以很方便的读写csv文件&lt;/li&gt;
&lt;li&gt;csv.reader&lt;ul&gt;
&lt;li&gt;返回一个reader迭代器，迭代器每次给出一个字符串列表，对应于csv文件中的一行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;csv.writer&lt;ul&gt;
&lt;li&gt;相应的，返回一个writer，调用&lt;code&gt;writerrow([stra,strb,...strc])&lt;/code&gt;可以将数据写入文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;csv.DictReader&lt;ul&gt;
&lt;li&gt;创建一个DictReader类，对比reader迭代器，每次迭代给出一个字典对应一行，参数Reader.fieldnames给出了字典的key&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;csv.DictWriter&lt;ul&gt;
&lt;li&gt;类似writer，但输出的是字典&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;json模块&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;dump(obj, fp)将对象序列化后写入文件fp，indent选项可格式化json文件&lt;/li&gt;
&lt;li&gt;dumps(obj)返回obj序列化之后的字符串&lt;/li&gt;
&lt;li&gt;load(fp)从文件对象fp中反序列化，支持str或unicode&lt;/li&gt;
&lt;li&gt;loads(s)从字符串中反序列化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;getopt解析命令行&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;getopt模块在c语言中也有，python实现了同样功能的模块&lt;/li&gt;
&lt;li&gt;与sys模块配合，获取命令行参数&lt;ul&gt;
&lt;li&gt;sys.argv为命令行列表&lt;/li&gt;
&lt;li&gt;sys.argv[1:]可传递给getopt使用，去除了第一个参数（脚本名）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;getopt.getopt(sys,argv[1:], options[, long_options])&lt;ul&gt;
&lt;li&gt;options为短选项，例如&lt;code&gt;hi:&lt;/code&gt;，表示可以&lt;code&gt;-h&lt;/code&gt;或者&lt;code&gt;-i xxx&lt;/code&gt;的方式使用，&lt;code&gt;:&lt;/code&gt;表示该选项必须附加参数&lt;/li&gt;
&lt;li&gt;long_options为长选项，例如&lt;code&gt;['help', 'input=']&lt;/code&gt;，可以&lt;code&gt;--help&lt;/code&gt;或者&lt;code&gt;--input xxx&lt;/code&gt;的格式使用，&lt;code&gt;=&lt;/code&gt;表示该选项必须附加参数&lt;/li&gt;
&lt;li&gt;第一个返回值为&lt;code&gt;(option, value)&lt;/code&gt;的pair列表，第二个返回值为解析后剩余的参数&lt;/li&gt;
&lt;li&gt;例如命令行参数为&lt;code&gt;-h -i xxx yyy&lt;/code&gt;，则返回值为&lt;code&gt;[('-h', ''), ('-i', xxx)], ['yyy']&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获得pair列表后，根据其中的数据进行不同的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;csv转换为json文件工具举例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;下面为csv文件转换为json的样例代码，以csv第一列作为json dict的key&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;getopt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ast&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;literal_eval&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pretty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getopt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;getopt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetoptError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test.py [-p]&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-h&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;test.py [-p]&amp;#39;&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;pretty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;test.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#print(json.dumps(data, sort_keys=False, indent=4, separators=(&amp;#39;,&amp;#39;, &amp;#39;: &amp;#39;),encoding=&amp;quot;utf-8&amp;quot;,ensure_ascii=False))&lt;/span&gt;
    &lt;span class="n"&gt;write_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pretty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;csv_rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;literal_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csvfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csvfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fieldnames&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;csv_rows&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]])]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;csv_rows&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort_keys&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;separators&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ensure_ascii&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;作者Focustc，来自于&lt;a href="http://blog.csdn.net/caozhk"&gt;CSDN&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20160516排队论</title><link href="http://heloman.github.io/pages/2016/05/20160516pai-dui-lun.html" rel="alternate"></link><published>2016-05-23T11:23:14+08:00</published><updated>2016-05-23T11:23:14+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-05-23:/pages/2016/05/20160516pai-dui-lun.html</id><content type="html">&lt;h1&gt;排队论与提单&lt;/h1&gt;</content><category term="misc"></category></entry><entry><title>20160516unity编辑器扩展</title><link href="http://heloman.github.io/pages/2016/05/20160516unitybian-ji-qi-kuo-zhan.html" rel="alternate"></link><published>2016-05-16T21:01:24+08:00</published><updated>2016-05-16T21:01:24+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-05-16:/pages/2016/05/20160516unitybian-ji-qi-kuo-zhan.html</id><summary type="html">&lt;h1&gt;Unity编辑器扩展之EditorWindow&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;继承这个类的编辑器脚本可以用来创建一个编辑器窗口，类似Inspector窗口&lt;/li&gt;
&lt;li&gt;若要在这个类中添加一些控件，可以使用GUI和GUILayout控件，还可以使用编辑器专用控件EditorGUI/EditorGUILayout&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;脚本创建&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在Assets/Editor文件夹下创建脚本，并继承UnityEditor.EditorWindow&lt;/li&gt;
&lt;li&gt;在OnGUI函数中写控件代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;窗口显示的触发&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一般使用MenuItem属性创建一个菜单选项，点击后调用此函数显示窗口，如&lt;code&gt;EditorWindow.GetWindow(typeof(MyWindow))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;为窗口添加控件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;上述提到的EditorGUILayout等类中包含类各种控件，比如&lt;code&gt;IntField, IntPopup, IntSlider, Vector2Field, TextField&lt;/code&gt;等等&lt;/li&gt;
&lt;li&gt;将创建这些控件的代码放在OnGUI函数中，则每一次渲染窗口都会执行一次&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;其他功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Update():对于可见窗口，每秒调用100次&lt;/li&gt;
&lt;li&gt;OnDestroy():关闭窗口时调用&lt;/li&gt;
&lt;li&gt;OnFocus():窗口被选中时调用&lt;/li&gt;
&lt;li&gt;OnLostFocus():窗口不再被选中时调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例子&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下为示例，还可参考Unity官方文档EditorWindow部分&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEditor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Unity编辑器扩展之EditorWindow&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;继承这个类的编辑器脚本可以用来创建一个编辑器窗口，类似Inspector窗口&lt;/li&gt;
&lt;li&gt;若要在这个类中添加一些控件，可以使用GUI和GUILayout控件，还可以使用编辑器专用控件EditorGUI/EditorGUILayout&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;脚本创建&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在Assets/Editor文件夹下创建脚本，并继承UnityEditor.EditorWindow&lt;/li&gt;
&lt;li&gt;在OnGUI函数中写控件代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;窗口显示的触发&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一般使用MenuItem属性创建一个菜单选项，点击后调用此函数显示窗口，如&lt;code&gt;EditorWindow.GetWindow(typeof(MyWindow))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;为窗口添加控件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;上述提到的EditorGUILayout等类中包含类各种控件，比如&lt;code&gt;IntField, IntPopup, IntSlider, Vector2Field, TextField&lt;/code&gt;等等&lt;/li&gt;
&lt;li&gt;将创建这些控件的代码放在OnGUI函数中，则每一次渲染窗口都会执行一次&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;其他功能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Update():对于可见窗口，每秒调用100次&lt;/li&gt;
&lt;li&gt;OnDestroy():关闭窗口时调用&lt;/li&gt;
&lt;li&gt;OnFocus():窗口被选中时调用&lt;/li&gt;
&lt;li&gt;OnLostFocus():窗口不再被选中时调用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;例子&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下为示例，还可参考Unity官方文档EditorWindow部分&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEditor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MyExt&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EditorWindow&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MenuItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;MyExt/Edit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;MyExt&lt;/span&gt; &lt;span class="n"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyExt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;EditorWindow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyExt&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;OnGUI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Section1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EditorStyles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boldLabel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;param1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;param1 int&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Load&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Load&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Section2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EditorStyles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;boldLabel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;param2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FloatField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;param2 float&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntSlider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;id 0~8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;作者Focustc，来自于&lt;a href="http://blog.csdn.net/caozhk"&gt;CSDN&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20160506Unity中的layer和tag</title><link href="http://heloman.github.io/pages/2016/05/20160506unityzhong-de-layerhe-tag.html" rel="alternate"></link><published>2016-05-06T15:32:26+08:00</published><updated>2016-05-06T15:32:26+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-05-06:/pages/2016/05/20160506unityzhong-de-layerhe-tag.html</id><summary type="html">&lt;h1&gt;Unity中的layer和tag&lt;/h1&gt;
&lt;p&gt;layer和tag均用于标识不同类别的gameobject，侧重点不同&lt;/p&gt;
&lt;h2&gt;Layer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Unity中默认已经有8种layer，但可以自行设置layer，上限32种，对应于一个int值的32位&lt;/li&gt;
&lt;li&gt;对于场景中的gameobject，均可以设置其layer。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用于camera&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;layer和camera配合起来，可以达到尽在camera上渲染特定层gameobject的效果&lt;/li&gt;
&lt;li&gt;相机有culling mask属性，也是对应于一个32位int值，如果对应layer的bit为1，则渲染此layer到此摄像机，在inspector界面可以选择多个layer，也可以在代码中设置多个layer的mask，比如&lt;code&gt;camera.cullingMask = 1&amp;lt;&amp;lt;10 + 1&amp;lt;&amp;lt; 5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;camera的clipping planes属性有类似的作用，可限制绘制的物体距离范围，仅在范围内的将会被绘制。比如在房间中，紧贴camera的墙可以隐藏掉&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用于raycast&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;raycast可检测一条射线与gameobject的碰撞，检测时可以定义layermask参数，从而只和这些layer的物体发生碰撞&lt;/li&gt;
&lt;li&gt;做raycast之前，通常要生成一条射线，相应的api为&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ScreenPointToRay&lt;/code&gt; 从摄像机到屏幕坐标的射线&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ViewportPointToRay&lt;/code&gt; 从摄像机到视口坐标的射线。视口坐标是相对于相机标准化的坐标，左下角为(0,0)，右上角(1 …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Unity中的layer和tag&lt;/h1&gt;
&lt;p&gt;layer和tag均用于标识不同类别的gameobject，侧重点不同&lt;/p&gt;
&lt;h2&gt;Layer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Unity中默认已经有8种layer，但可以自行设置layer，上限32种，对应于一个int值的32位&lt;/li&gt;
&lt;li&gt;对于场景中的gameobject，均可以设置其layer。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用于camera&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;layer和camera配合起来，可以达到尽在camera上渲染特定层gameobject的效果&lt;/li&gt;
&lt;li&gt;相机有culling mask属性，也是对应于一个32位int值，如果对应layer的bit为1，则渲染此layer到此摄像机，在inspector界面可以选择多个layer，也可以在代码中设置多个layer的mask，比如&lt;code&gt;camera.cullingMask = 1&amp;lt;&amp;lt;10 + 1&amp;lt;&amp;lt; 5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;camera的clipping planes属性有类似的作用，可限制绘制的物体距离范围，仅在范围内的将会被绘制。比如在房间中，紧贴camera的墙可以隐藏掉&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用于raycast&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;raycast可检测一条射线与gameobject的碰撞，检测时可以定义layermask参数，从而只和这些layer的物体发生碰撞&lt;/li&gt;
&lt;li&gt;做raycast之前，通常要生成一条射线，相应的api为&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ScreenPointToRay&lt;/code&gt; 从摄像机到屏幕坐标的射线&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ViewportPointToRay&lt;/code&gt; 从摄像机到视口坐标的射线。视口坐标是相对于相机标准化的坐标，左下角为(0,0)，右上角(1,1)。视口坐标可以和世界坐标、屏幕坐标相互转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;做raycast时，定义相关layermusk&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Physics.Raycast(ray, disance, layermask)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果没有定义layermask，则仅忽略IgnoreRaycast layer的物体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;用于灯光&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过设置仅照亮特定layer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tag&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以通过&lt;code&gt;GameObject.FindWithTay()&lt;/code&gt;快速搜索到相关物体&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;作者Focustc，来自于&lt;a href="http://blog.csdn.net/caozhk"&gt;CSDN&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>python新式类和经典类</title><link href="http://heloman.github.io/pages/2016/04/pythonxin-shi-lei-he-jing-dian-lei.html" rel="alternate"></link><published>2016-04-05T21:19:58+08:00</published><updated>2016-04-05T21:19:58+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-04-05:/pages/2016/04/pythonxin-shi-lei-he-jing-dian-lei.html</id><summary type="html">&lt;h1&gt;python的new style class和classic class&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;新式类是为了统一type和object引进的，旧式类已在python3中移除&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首先看一下以下代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;X&lt;/span&gt;:
    &lt;span class="nb"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
    &lt;span class="nb"&gt;pass&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;(&lt;span class="o"&gt;X&lt;/span&gt;), &lt;span class="nb"&gt;type&lt;/span&gt;(&lt;span class="o"&gt;X&lt;/span&gt;())
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;(&lt;span class="n"&gt;Y&lt;/span&gt;), &lt;span class="nb"&gt;type&lt;/span&gt;(&lt;span class="n"&gt;Y&lt;/span&gt;())

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;), &lt;span class="n"&gt;object&lt;/span&gt;.&lt;span class="n"&gt;__class__&lt;/span&gt;, &lt;span class="n"&gt;object&lt;/span&gt;.&lt;span class="n"&gt;__base__&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;(&lt;span class="nb"&gt;type&lt;/span&gt;), &lt;span class="nb"&gt;type&lt;/span&gt;.&lt;span class="n"&gt;__class__&lt;/span&gt;, &lt;span class="nb"&gt;type&lt;/span&gt;.&lt;span class="n"&gt;__base__&lt;/span&gt;

&lt;span class="s"&gt;&amp;lt;type &amp;#39;classobj&amp;#39;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;type &amp;#39;instance&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;type &amp;#39;type&amp;#39;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;class &amp;#39;__main__.Y&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;type &amp;#39;type&amp;#39;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;type …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;python的new style class和classic class&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;新式类是为了统一type和object引进的，旧式类已在python3中移除&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首先看一下以下代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;X&lt;/span&gt;:
    &lt;span class="nb"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):
    &lt;span class="nb"&gt;pass&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;(&lt;span class="o"&gt;X&lt;/span&gt;), &lt;span class="nb"&gt;type&lt;/span&gt;(&lt;span class="o"&gt;X&lt;/span&gt;())
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;(&lt;span class="n"&gt;Y&lt;/span&gt;), &lt;span class="nb"&gt;type&lt;/span&gt;(&lt;span class="n"&gt;Y&lt;/span&gt;())

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;), &lt;span class="n"&gt;object&lt;/span&gt;.&lt;span class="n"&gt;__class__&lt;/span&gt;, &lt;span class="n"&gt;object&lt;/span&gt;.&lt;span class="n"&gt;__base__&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;(&lt;span class="nb"&gt;type&lt;/span&gt;), &lt;span class="nb"&gt;type&lt;/span&gt;.&lt;span class="n"&gt;__class__&lt;/span&gt;, &lt;span class="nb"&gt;type&lt;/span&gt;.&lt;span class="n"&gt;__base__&lt;/span&gt;

&lt;span class="s"&gt;&amp;lt;type &amp;#39;classobj&amp;#39;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;type &amp;#39;instance&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;type &amp;#39;type&amp;#39;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;class &amp;#39;__main__.Y&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;type &amp;#39;type&amp;#39;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;type &amp;#39;type&amp;#39;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;
&lt;span class="s"&gt;&amp;lt;type &amp;#39;type&amp;#39;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;type &amp;#39;type&amp;#39;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;type &amp;#39;object&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上述代码中，X为经典类，继承object的新式类Y则相当于新定义了一个类型&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;新类型系统/对象模型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;首先，&lt;code&gt;type()&lt;/code&gt;和`&lt;strong&gt;class&lt;/strong&gt;``是等价的，给出对象的类型&lt;/li&gt;
&lt;li&gt;type和object是对象模型的两个原生object&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;type和object的关系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;type是所有type的type，而object同时是所有type的基类&lt;/li&gt;
&lt;li&gt;type是type的一个实例，type是object 的子类&lt;/li&gt;
&lt;li&gt;object是type的一个实例，不存在父类&lt;/li&gt;
&lt;li&gt;type object指的是可以实例化、派生子类的object，即各种class/类，其type为type。none-type object的type不是type，不可实例化，不可派生子类，称为实例&lt;/li&gt;
&lt;li&gt;参考&lt;a href="http://www.cafepy.com/article/python_types_and_objects/python_types_and_objects.html#Summary"&gt;python types and objects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code&gt;__dict__&lt;/code&gt;字段&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;类和实例均有&lt;code&gt;__dict__&lt;/code&gt;字段，当取object的属性时，首先到实例的&lt;code&gt;__dict__&lt;/code&gt;中查找，如果找不到，则到&lt;code&gt;__class__.__dict__&lt;/code&gt;中查找，之后会到基类中查找（&lt;code&gt;__class__.__bases__&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;一些内置类型没有&lt;code&gt;__dict__&lt;/code&gt;，如list、tuple&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20160331python不要使用mutable类型默认参数</title><link href="http://heloman.github.io/pages/2016/03/20160331pythonbu-yao-shi-yong-mutablelei-xing-mo-ren-can-shu.html" rel="alternate"></link><published>2016-03-31T21:34:18+08:00</published><updated>2016-03-31T21:34:18+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-03-31:/pages/2016/03/20160331pythonbu-yao-shi-yong-mutablelei-xing-mo-ren-can-shu.html</id><summary type="html">&lt;h1&gt;python勿使用mutable值作为默认参数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先看以下一段代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;([],)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么返回结果发生了改变？python函数执行时，默认参数只会在def函数时初始化一次，并不会每次运行时都发生改变，以后每次调用都使用同一个默认参数变量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;默认参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;函数的默认参数存放在&lt;code&gt;func_defaults&lt;/code&gt;，调用函数时若没有传入默认参数，则取出&lt;code&gt;func_defaults&lt;/code&gt;中的值赋给此形参&lt;/li&gt;
&lt;li&gt;如果默认值为mutable类型，则为传引用，多次调用时必然出现类似上述的错误&lt;/li&gt;
&lt;li&gt;默认参数不要使用mutable类型，使用immutable类型，如None，更合适&lt;/li&gt;
&lt;li&gt;上述函数正确的实现方式为&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;python勿使用mutable值作为默认参数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先看以下一段代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt;
    &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_defaults&lt;/span&gt;

&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;([],)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为什么返回结果发生了改变？python函数执行时，默认参数只会在def函数时初始化一次，并不会每次运行时都发生改变，以后每次调用都使用同一个默认参数变量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;默认参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;函数的默认参数存放在&lt;code&gt;func_defaults&lt;/code&gt;，调用函数时若没有传入默认参数，则取出&lt;code&gt;func_defaults&lt;/code&gt;中的值赋给此形参&lt;/li&gt;
&lt;li&gt;如果默认值为mutable类型，则为传引用，多次调用时必然出现类似上述的错误&lt;/li&gt;
&lt;li&gt;默认参数不要使用mutable类型，使用immutable类型，如None，更合适&lt;/li&gt;
&lt;li&gt;上述函数正确的实现方式为&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20160324查看unity的scene流程</title><link href="http://heloman.github.io/pages/2016/03/20160324cha-kan-unityde-sceneliu-cheng.html" rel="alternate"></link><published>2016-03-25T11:31:00+08:00</published><updated>2016-03-25T11:31:00+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-03-25:/pages/2016/03/20160324cha-kan-unityde-sceneliu-cheng.html</id><summary type="html">&lt;h1&gt;Unity新项目如何快速理清顶层代码结构&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;半路上手新项目时弄懂scene切换流程是有必要的，scene切换可以说是unity最上层的代码资源结构&lt;/li&gt;
&lt;li&gt;要再进一步弄清脚本调用顺序的话，就要选择一个参照标准，时刻停下来，看调用入口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;思路&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;首先我们在入口scene（第一个scene）中添加新的GameObject，绑定脚本，每帧打印当前scene的名字，并防止在scene切换时销毁&lt;/li&gt;
&lt;li&gt;根据打印输出的scene名字，在代码中搜索&lt;code&gt;LoadLevel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;LoadLevel&lt;/code&gt;有一个专门的脚本管理器封装，那么查看被调用位置即得知scene切换入口；如果&lt;code&gt;LoadLevel&lt;/code&gt;分布在脚本中，则被调用位置即为切换入口&lt;/li&gt;
&lt;li&gt;找到切换入口之后，从入口scene开始，分别打开每个scene，并运行。查看运行前后Hierarchy中的GameObject变化，即可知道每个scene初始化时做了什么，再查看scene中脚本的awake和start函数&lt;/li&gt;
&lt;li&gt;这样一来，代码的顶层结构即可得到，可根据需要再继续细查每一个功能模块入口。&lt;/li&gt;
&lt;li&gt;查看功能模块逻辑时，可以搜索相应的单词，比如武器系统搜索&lt;code&gt;weapon&lt;/code&gt;。找到相应的脚本，在init部分加入&lt;code&gt;Debug.Break()&lt;/code&gt;，暂停运行，观察scene中的资源。进而在init部分打印一些log，运行时可以直观的看到调用堆栈&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;代码示例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下是打印当前scene的名字的脚本&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;public …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Unity新项目如何快速理清顶层代码结构&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;半路上手新项目时弄懂scene切换流程是有必要的，scene切换可以说是unity最上层的代码资源结构&lt;/li&gt;
&lt;li&gt;要再进一步弄清脚本调用顺序的话，就要选择一个参照标准，时刻停下来，看调用入口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;思路&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;首先我们在入口scene（第一个scene）中添加新的GameObject，绑定脚本，每帧打印当前scene的名字，并防止在scene切换时销毁&lt;/li&gt;
&lt;li&gt;根据打印输出的scene名字，在代码中搜索&lt;code&gt;LoadLevel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;LoadLevel&lt;/code&gt;有一个专门的脚本管理器封装，那么查看被调用位置即得知scene切换入口；如果&lt;code&gt;LoadLevel&lt;/code&gt;分布在脚本中，则被调用位置即为切换入口&lt;/li&gt;
&lt;li&gt;找到切换入口之后，从入口scene开始，分别打开每个scene，并运行。查看运行前后Hierarchy中的GameObject变化，即可知道每个scene初始化时做了什么，再查看scene中脚本的awake和start函数&lt;/li&gt;
&lt;li&gt;这样一来，代码的顶层结构即可得到，可根据需要再继续细查每一个功能模块入口。&lt;/li&gt;
&lt;li&gt;查看功能模块逻辑时，可以搜索相应的单词，比如武器系统搜索&lt;code&gt;weapon&lt;/code&gt;。找到相应的脚本，在init部分加入&lt;code&gt;Debug.Break()&lt;/code&gt;，暂停运行，观察scene中的资源。进而在init部分打印一些log，运行时可以直观的看到调用堆栈&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;代码示例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;以下是打印当前scene的名字的脚本&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MonoBehaviour&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;AsyncOperation&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;Start&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;DontDestroyOnLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;Update&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadedLevelName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20160323unity切换场景</title><link href="http://heloman.github.io/pages/2016/03/20160323unityqie-huan-chang-jing.html" rel="alternate"></link><published>2016-03-24T09:58:00+08:00</published><updated>2016-03-24T09:58:00+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-03-24:/pages/2016/03/20160323unityqie-huan-chang-jing.html</id><summary type="html">&lt;h1&gt;Unity中的场景切换&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;与电影类似，一个游戏往往需要多个场景。而如果场景中资源较少，那么可以很快的完成切换，如果较多的话，可能需要十几秒时间。在这段时间内播放加载动画等等，可以减少玩家的不耐烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;同步切换场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Application.LoadLevel()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Application.LoadLevelAdditive()&lt;/code&gt;加载完成后保留旧场景中资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;异步切换场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Application.LoadLevelAsync()&lt;/code&gt;异步加载场景，加载过程中当前场景不会卡死。返回值包含加载进度&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;public class test : MonoBehaviour
    {&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;AsyncOperation&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;Start&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;StartCoroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Switch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;Update&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;IEnumerator&lt;/span&gt; &lt;span class="n"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadLevelAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;LoadingScene&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;yield …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Unity中的场景切换&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;与电影类似，一个游戏往往需要多个场景。而如果场景中资源较少，那么可以很快的完成切换，如果较多的话，可能需要十几秒时间。在这段时间内播放加载动画等等，可以减少玩家的不耐烦。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;同步切换场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Application.LoadLevel()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Application.LoadLevelAdditive()&lt;/code&gt;加载完成后保留旧场景中资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;异步切换场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Application.LoadLevelAsync()&lt;/code&gt;异步加载场景，加载过程中当前场景不会卡死。返回值包含加载进度&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;p&gt;public class test : MonoBehaviour
    {&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="n"&gt;AsyncOperation&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;Start&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;StartCoroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Switch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="k"&gt;Update&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;IEnumerator&lt;/span&gt; &lt;span class="n"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadLevelAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;LoadingScene&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Application.LoadLevelAdditiveAsync&lt;/code&gt;加载新场景完成后不释放旧资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;通常做场景切换时，首先切换到一个较小的loading动画场景，之后异步加载新场景&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;无缝场景切换&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;场景管理对象需要一直存在：&lt;code&gt;Object.DontDestroyOnLoad()&lt;/code&gt;可以防止切换场景时销毁&lt;/li&gt;
&lt;li&gt;异步加载新资源，并逐步销毁旧资源&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20160314ugui</title><link href="http://heloman.github.io/pages/2016/03/20160314ugui.html" rel="alternate"></link><published>2016-03-15T01:36:12+08:00</published><updated>2016-03-15T01:36:12+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-03-15:/pages/2016/03/20160314ugui.html</id><content type="html">&lt;h1&gt;ugui&lt;/h1&gt;
&lt;h2&gt;Canvas的三种渲染方式&lt;/h2&gt;
&lt;h3&gt;screen space overlay&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UI永远出现在画面最前端&lt;/li&gt;
&lt;li&gt;无需camera和light&lt;/li&gt;
&lt;li&gt;可以自动适配屏幕&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;screen space camera&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以在UI上层显示特效和模型&lt;/li&gt;
&lt;li&gt;显示效果受到相机透视或者正交的影响&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;world space&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把UI视为3D模型&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20160314char_pointer</title><link href="http://heloman.github.io/pages/2016/03/20160314char_pointer.html" rel="alternate"></link><published>2016-03-14T15:28:54+08:00</published><updated>2016-03-14T15:28:54+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-03-14:/pages/2016/03/20160314char_pointer.html</id><content type="html">&lt;h1&gt;&lt;code&gt;char *&lt;/code&gt;和&lt;code&gt;char*&lt;/code&gt;的区别&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;这两种写法编译上面都没有问题，但是在某些情况下会造成歧义&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;char* p1, p2&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这样的写法声明了指针p1，字符p2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;char *p1, *p2&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这样的写法表示声明了两个指向字符的指针&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;code&gt;*&lt;/code&gt;是变量的修饰符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*p&lt;/code&gt;表示p是一个指针，是修饰p的，而不是修饰&lt;code&gt;char&lt;/code&gt;的&lt;/li&gt;
&lt;li&gt;因此*和p之间不要有空格，否则就会造成误解，误以为&lt;code&gt;char*&lt;/code&gt;是一种数据类型，继而出现上述错误&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20160229文本编码</title><link href="http://heloman.github.io/pages/2016/03/20160229wen-ben-bian-ma.html" rel="alternate"></link><published>2016-03-01T00:04:34+08:00</published><updated>2016-03-01T00:04:34+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-03-01:/pages/2016/03/20160229wen-ben-bian-ma.html</id><summary type="html">&lt;h1&gt;文本编码&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;文本编码这个问题自三年前就困扰着我，当时是用Python处理多国语言时出现的bug，最后问题解决了，但其中具体逻辑并不懂。后来零零散散接触了不少资料，算是大致弄明白，记录如下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;unicode与ascii等编码方案&lt;/h2&gt;
&lt;h3&gt;ascii&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ascii编码方案一共规定了128个字符对应的二进制表示，只占用了一个字节的后面7bit，最高位为0&lt;/li&gt;
&lt;li&gt;欧洲国家使用128个符号不足以表示所有字母，使用了最高位。因此不同的国家128~255表示不同的符号，并不通用，即为扩展的ascii码，包括ISO-8859-1~15。这些都是单个字节编码。&lt;/li&gt;
&lt;li&gt;ISO-8859-1&lt;ul&gt;
&lt;li&gt;ISO-8859-1收录的字符除ASCII收录的字符外，还包括西欧语言、希腊语、泰语、阿拉伯语、希伯来语对应的文字符号。欧元符号出现的比较晚，没有被收录在ISO-8859-1当中&lt;/li&gt;
&lt;li&gt;ISO-8859-1编码范围使用了单字节内的所有空间，在支持ISO-8859-1的系统中传输和存储其他任何编码的字节流都不会被抛弃&lt;/li&gt;
&lt;li&gt;Latin1是ISO-8859-1的别名，有些环境下写作Latin-1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gb2312&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一种双字节编码，包含6763个汉字&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gbk&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对gb2312的扩展，可以表示21003个汉字，兼容gb2312&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gb18030&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;unicode的一种天朝实现&lt;/li&gt;
&lt;li&gt;采用单、双、四字节编码，兼容gb2312&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;base64&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;base64使用64个可打印字符表示二进制数据 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;文本编码&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;文本编码这个问题自三年前就困扰着我，当时是用Python处理多国语言时出现的bug，最后问题解决了，但其中具体逻辑并不懂。后来零零散散接触了不少资料，算是大致弄明白，记录如下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;unicode与ascii等编码方案&lt;/h2&gt;
&lt;h3&gt;ascii&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ascii编码方案一共规定了128个字符对应的二进制表示，只占用了一个字节的后面7bit，最高位为0&lt;/li&gt;
&lt;li&gt;欧洲国家使用128个符号不足以表示所有字母，使用了最高位。因此不同的国家128~255表示不同的符号，并不通用，即为扩展的ascii码，包括ISO-8859-1~15。这些都是单个字节编码。&lt;/li&gt;
&lt;li&gt;ISO-8859-1&lt;ul&gt;
&lt;li&gt;ISO-8859-1收录的字符除ASCII收录的字符外，还包括西欧语言、希腊语、泰语、阿拉伯语、希伯来语对应的文字符号。欧元符号出现的比较晚，没有被收录在ISO-8859-1当中&lt;/li&gt;
&lt;li&gt;ISO-8859-1编码范围使用了单字节内的所有空间，在支持ISO-8859-1的系统中传输和存储其他任何编码的字节流都不会被抛弃&lt;/li&gt;
&lt;li&gt;Latin1是ISO-8859-1的别名，有些环境下写作Latin-1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gb2312&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一种双字节编码，包含6763个汉字&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gbk&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对gb2312的扩展，可以表示21003个汉字，兼容gb2312&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gb18030&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;unicode的一种天朝实现&lt;/li&gt;
&lt;li&gt;采用单、双、四字节编码，兼容gb2312&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;base64&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;base64使用64个可打印字符表示二进制数据。每个单元包含6bit。转换后每76个单元要加上一个换行符。&lt;/li&gt;
&lt;li&gt;可打印字符包括：&lt;code&gt;A-Z a-z 0-9&lt;/code&gt;以及两个其他不定符号，大部分实现为&lt;code&gt;+ /&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将每3个字符编码为4个单元，不足3个的用&lt;code&gt;=&lt;/code&gt;补足&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;unicode&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;unicode试图表示所有的字符&lt;/li&gt;
&lt;li&gt;采用unicode的系统、平台有：&lt;ul&gt;
&lt;li&gt;windows NT及后续系统、java采用utf16作为内置编码&lt;/li&gt;
&lt;li&gt;.net, mac, kde同样使用unicode&lt;/li&gt;
&lt;li&gt;utf-8是unix-like操作系统的主要存储编码方案&lt;/li&gt;
&lt;li&gt;utf-8是html文件最常用的unicode编码&lt;/li&gt;
&lt;li&gt;XML及其子集XHTML采用UTF-8作为标准字集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编码方案&lt;ul&gt;
&lt;li&gt;对每个字符规定了一个码点：code point&lt;/li&gt;
&lt;li&gt;unicode现在包括17个平面，每个平面最多可以存放65536个字符，也即需要至少21个bit才足够表示所有码点。17个平面的码位可表示为从U+xx0000到U+xxFFFF，其中xx表示十六进制值从0016到1016，共计17个平面&lt;/li&gt;
&lt;li&gt;首先的256个字符编码与ISO-8859-1相同&lt;/li&gt;
&lt;li&gt;表示方式为&lt;code&gt;U+&lt;/code&gt;紧跟十六进制表示。基本平面（BMP U+0000到U+FFFF）中采用四个数字（2byte），16个辅助平面（SMP U+10000到U+10FFFF）中采用5~6个数字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实现方案&lt;ul&gt;
&lt;li&gt;实现方案包括Unicode Transformation Format (UTF)和Universal Coded Character Set (UCS)两种&lt;/li&gt;
&lt;li&gt;unicode的实现方式称为Unicode转换格式（Unicode Transformation Format，简称为UTF）&lt;/li&gt;
&lt;li&gt;utf8：8bit变长编码，详细实现见下一节&lt;/li&gt;
&lt;li&gt;utf16：16bit变长编码，下有详述&lt;/li&gt;
&lt;li&gt;utf32：32bit定长编码，完全对应unicode&lt;/li&gt;
&lt;li&gt;usc-2：2byte定长编码，utf16的子集，JavaScript使用此编码方案。因为不能表示更多字符，后续在此基础上发展出了utf16&lt;/li&gt;
&lt;li&gt;usc-4：等价于utf32&lt;/li&gt;
&lt;li&gt;gb18030&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;utf16&lt;ul&gt;
&lt;li&gt;对BMP中的字符使用2byte表示，SMP使用4byte&lt;/li&gt;
&lt;li&gt;BMP从U+D800到U+DFFF之间的码位区段是永久保留不映射到Unicode字符&lt;/li&gt;
&lt;li&gt;辅助平面的字符位共有2^20个，也就是说，对应这些字符至少需要20个二进制位。UTF-16将这20位拆成两半，前10位映射在U+D800到U+DBFF（空间大小2^10），称为高位（H），后10位映射在U+DC00到U+DFFF（空间大小2^10），称为低位（L）。这意味着，一个辅助平面的字符，被拆成两个基本平面的字符表示。&lt;/li&gt;
&lt;li&gt;对于两个字节，发现它的码点在U+D800到U+DBFF之间，就可以断定，紧跟在后面的两个字节的码点，应该在U+DC00到U+DFFF之间，这四个字节必须放在一起解读。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;utf8&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;采用1~4个byte对unicode进行编码，每个字元只有1byte，不存在字节序问题&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unicode和utf8编码对应关系   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;0000 0000-0000 007F | 0xxxxxxx&lt;/span&gt;
&lt;span class="err"&gt;0000 0080-0000 07FF | 110xxxxx 10xxxxxx&lt;/span&gt;
&lt;span class="err"&gt;0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx&lt;/span&gt;
&lt;span class="err"&gt;0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;单字节字符的最高有效比特永远为0。&lt;/li&gt;
&lt;li&gt;多字节序列中的首个字元组的几个最高有效比特决定了序列的长度。最高有效位为110的是2字节序列，而1110的是三字节序列，如此类推。&lt;/li&gt;
&lt;li&gt;多字节序列中其余的字节中的首两个最高有效比特为10&lt;/li&gt;
&lt;li&gt;具体为何根据这样麻烦的规则编码呢？一是防止解码出现歧义，二是尽量压缩存储空间。如果学过编码理论或者信息论应当很容易明白。&lt;/li&gt;
&lt;li&gt;相对于utf16&lt;/li&gt;
&lt;li&gt;utf16编码效率/性能较高，字符到字节转换更为方便&lt;/li&gt;
&lt;li&gt;utf8消耗存储空间较少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;文本和IO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IO时经常需要对文本进行编解码或编码格式转化&lt;/li&gt;
&lt;li&gt;在硬盘文件中：以文件编码格式存储&lt;/li&gt;
&lt;li&gt;在内存中：java和c#用utf16&lt;/li&gt;
&lt;li&gt;如何显示在屏幕上：显卡驱动（虚拟设备）根据输入字节及编码渲染&lt;/li&gt;
&lt;li&gt;网络：按照应用层商定的协议编解码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;utf8和BOM&lt;/h2&gt;
&lt;h3&gt;什么是BOM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BOM（byte order mark）是为 UTF-16 和 UTF-32 准备的，用于标记字节序（byte order）。&lt;/li&gt;
&lt;li&gt;utf不同编码实现的BOM定义：&lt;ul&gt;
&lt;li&gt;UTF-8 &lt;code&gt;EF BB BF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;UTF-16（大端序） &lt;code&gt;FE FF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;UTF-16（小端序） &lt;code&gt;FF FE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;UTF-32（大端序） &lt;code&gt;00 00 FE FF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;UTF-32（小端序） &lt;code&gt;FF FE 00 00&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于utf8，没有字节顺序的议题。UTF-8编码过的字节顺序标记则被用来标示它是UTF-8的文件。它只用来标示一个UTF-8的文件，而不用来说明字节顺序。&lt;/li&gt;
&lt;li&gt;对于utf16和utf32，用来表示大端还是小段&lt;/li&gt;
&lt;li&gt;BOM相当于魔数（magic number）&lt;ul&gt;
&lt;li&gt;图像文件、ELF文件、class文件都存在魔数&lt;/li&gt;
&lt;li&gt;linux命令file能根据魔数（libmagic）判断文件类型&lt;/li&gt;
&lt;li&gt;文件扩展名更重要的作用是让系统决定当用户想打开这个文件的时候用哪种软件运行，如Windows系统中exe文件是可执行档，doc文件默认用Microsoft Word打开的Word文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;记事本四种另存为的编码格式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ANSI（对于英文系统即ASCII编码，中文系统则为GB2312或Big5编码）&lt;/li&gt;
&lt;li&gt;“Unicode”（对应UTF-16 LE）&lt;/li&gt;
&lt;li&gt;“Unicode big endian”（对应UTF-16 BE）&lt;/li&gt;
&lt;li&gt;“UTF-8”：带 BOM 的 UTF-8 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;使用utf8不要包含BOM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不含 BOM 的 UTF-8 才是标准形式，在 UTF-8 文件中放置 BOM 主要是微软的习惯（顺便提一下：把带有 BOM 的小端序 UTF-16 称作「Unicode」而又不详细说明，这也是微软的习惯）。微软在 UTF-8 中使用 BOM 是因为这样可以把 UTF-8 和 ASCII 等编码明确区分开，但这样的文件在 Windows 之外的操作系统里会带来问题。&lt;/li&gt;
&lt;li&gt;许多windows程序（包含记事本）会添加字节顺序标记到UTF-8文件。然而，在类Unix系统中，这种作法则不被建议采用。因为它会妨碍到如shell脚本开头的一些重要的码的正确处理。它亦会影响到无法识别它的编程语言。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F"&gt;wiki:BOM&lt;/a&gt;
&lt;a href="https://zh.wikipedia.org/wiki/Unicode"&gt;wiki:Unicode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>pythonChallenge</title><link href="http://heloman.github.io/pages/2016/02/pythonchallenge.html" rel="alternate"></link><published>2016-02-18T09:17:56+08:00</published><updated>2016-02-18T09:17:56+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-02-18:/pages/2016/02/pythonchallenge.html</id><summary type="html">&lt;h1&gt;pythonChallenge&lt;/h1&gt;
&lt;p&gt;可以将url里的/pc改成/pcc来查看上一题的参考代码&lt;/p&gt;
&lt;h2&gt;0&lt;/h2&gt;
&lt;p&gt;计算2^38即可，替换*.html&lt;/p&gt;
&lt;h2&gt;1&lt;/h2&gt;
&lt;p&gt;观察知为移位加密，需要了解的api有：     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ord()和chr()用于在char和ascii数字之间转换&lt;/li&gt;
&lt;li&gt;推荐使用string.translate()来解密，string.maketrans可以用来生成table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用同样的算法对url中的map进行解密即可得到下一url&lt;/p&gt;
&lt;h2&gt;2&lt;/h2&gt;
&lt;p&gt;根据提示，查看网页源码，要求统计字符串中的低频字符，得到之后拼接成一个单词即可&lt;/p&gt;
&lt;h2&gt;3&lt;/h2&gt;
&lt;p&gt;要求找到一个小写字母，左右两边均有三个大写字母相邻，使用re模块的findall方法，建议看看参考代码，其中给出了多种使用re的方案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;.join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;re.findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="no"&gt;a-z&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="na"&gt;.join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="no"&gt;for&lt;/span&gt; &lt;span class="no"&gt;x&lt;/span&gt; &lt;span class="no"&gt;in&lt;/span&gt; &lt;span class="no"&gt;re …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;pythonChallenge&lt;/h1&gt;
&lt;p&gt;可以将url里的/pc改成/pcc来查看上一题的参考代码&lt;/p&gt;
&lt;h2&gt;0&lt;/h2&gt;
&lt;p&gt;计算2^38即可，替换*.html&lt;/p&gt;
&lt;h2&gt;1&lt;/h2&gt;
&lt;p&gt;观察知为移位加密，需要了解的api有：     &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ord()和chr()用于在char和ascii数字之间转换&lt;/li&gt;
&lt;li&gt;推荐使用string.translate()来解密，string.maketrans可以用来生成table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用同样的算法对url中的map进行解密即可得到下一url&lt;/p&gt;
&lt;h2&gt;2&lt;/h2&gt;
&lt;p&gt;根据提示，查看网页源码，要求统计字符串中的低频字符，得到之后拼接成一个单词即可&lt;/p&gt;
&lt;h2&gt;3&lt;/h2&gt;
&lt;p&gt;要求找到一个小写字母，左右两边均有三个大写字母相邻，使用re模块的findall方法，建议看看参考代码，其中给出了多种使用re的方案&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;.join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;re.findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="no"&gt;a-z&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="na"&gt;.join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="no"&gt;for&lt;/span&gt; &lt;span class="no"&gt;x&lt;/span&gt; &lt;span class="no"&gt;in&lt;/span&gt; &lt;span class="no"&gt;re.findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;^|&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="no"&gt;a-z&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="no"&gt;$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="na"&gt;.join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;re.findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="err"&gt;^|&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="no"&gt;a-z&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="err"&gt;^&lt;/span&gt;&lt;span class="no"&gt;A-Z&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="no"&gt;$&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="na"&gt;.join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;re.findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;(?&amp;lt;=[^A-Z][A-Z]{3})[a-z](?=[A-Z]{3}[^A-Z])&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="no"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用&lt;code&gt;()&lt;/code&gt;包围起来一个group，返回值为group&lt;/p&gt;
&lt;h2&gt;4&lt;/h2&gt;</content><category term="misc"></category></entry><entry><title>Unity调用Native代码</title><link href="http://heloman.github.io/pages/2016/01/unitydiao-yong-nativedai-ma.html" rel="alternate"></link><published>2016-01-29T17:06:10+08:00</published><updated>2016-01-29T17:06:10+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-01-29:/pages/2016/01/unitydiao-yong-nativedai-ma.html</id><content type="html">&lt;h1&gt;Unity调用Native代码&lt;/h1&gt;
&lt;h2&gt;iOS&lt;/h2&gt;
&lt;h3&gt;iOS程序入口&lt;/h3&gt;
&lt;h2&gt;安卓&lt;/h2&gt;
&lt;h3&gt;安卓程序入口&lt;/h3&gt;
&lt;h4&gt;生命周期&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;是否可见&lt;/li&gt;
&lt;li&gt;是否可触摸&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>Android编程权威指南</title><link href="http://heloman.github.io/pages/2016/01/androidbian-cheng-quan-wei-zhi-nan.html" rel="alternate"></link><published>2016-01-13T23:07:54+08:00</published><updated>2016-01-13T23:07:54+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2016-01-13:/pages/2016/01/androidbian-cheng-quan-wei-zhi-nan.html</id><content type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设备默认使用/res/layout目录下布局资源。水平时将尝试使用res/layout-land下资源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设备配置如果发生改变,activity将会销毁后重新创建&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20151014 命令行字典</title><link href="http://heloman.github.io/pages/2015/10/20151014-ming-ling-xing-zi-dian.html" rel="alternate"></link><published>2015-10-14T02:43:53+08:00</published><updated>2015-10-14T02:43:53+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2015-10-14:/pages/2015/10/20151014-ming-ling-xing-zi-dian.html</id><summary type="html">&lt;h1&gt;命令行字典&lt;/h1&gt;
&lt;p&gt;作为一个有追求的程序员，当然想把一切操作通过键盘来完成，让手指保持在键盘上。那么，如何做到用键盘来查询英文单词呢？突发奇想在命令行里用python脚本来爬取有道词典的查询结果，使用&lt;code&gt;requests + BeautifulSoup&lt;/code&gt;实现，效果还不错。  &lt;/p&gt;
&lt;h3&gt;代码&lt;/h3&gt;
&lt;p&gt;代码放在了&lt;a href="https://github.com/heLomaN/NetCrawler/blob/master/cmd_dict.py"&gt;heLomaN@Github&lt;/a&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# coding=utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;rq&lt;/span&gt;
&lt;span class="kn"&gt;from …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><content type="html">&lt;h1&gt;命令行字典&lt;/h1&gt;
&lt;p&gt;作为一个有追求的程序员，当然想把一切操作通过键盘来完成，让手指保持在键盘上。那么，如何做到用键盘来查询英文单词呢？突发奇想在命令行里用python脚本来爬取有道词典的查询结果，使用&lt;code&gt;requests + BeautifulSoup&lt;/code&gt;实现，效果还不错。  &lt;/p&gt;
&lt;h3&gt;代码&lt;/h3&gt;
&lt;p&gt;代码放在了&lt;a href="https://github.com/heLomaN/NetCrawler/blob/master/cmd_dict.py"&gt;heLomaN@Github&lt;/a&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# coding=utf-8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;rq&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;query_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;le&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eng&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://dict.youdao.com/search&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;trans_div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;trans-container&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;#print trans_div&lt;/span&gt;
    &lt;span class="n"&gt;interpretations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trans_div&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;interpretations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Query:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Query:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;执行脚本后，输入待查询单词即可，输入&lt;code&gt;q&lt;/code&gt;可退出执行&lt;/li&gt;
&lt;li&gt;机制非常简单，构造查询url，获得html后找到对应于释义的div，打印其中内容&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20150409C++中的容器</title><link href="http://heloman.github.io/pages/2015/04/20150409czhong-de-rong-qi.html" rel="alternate"></link><published>2015-04-08T02:36:11+08:00</published><updated>2015-04-08T02:36:11+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2015-04-08:/pages/2015/04/20150409czhong-de-rong-qi.html</id><summary type="html">&lt;h1&gt;C++中的容器&lt;/h1&gt;
&lt;h2&gt;容器与容器适配器&lt;/h2&gt;
&lt;p&gt;容器包括vector, deque, list, map, multimap, set, multiset。容器适配器包括基于deque的stack和queue，基于vector的priority_queue。string也实现了stl的接口。&lt;/p&gt;
&lt;p&gt;因为编写C++程序时经常需要查找容器的函数接口，故作此总结。C++新引入的容器与函数未引入。主要参考自：&lt;a href="http://cs.stmarys.ca/~porter/csc/ref/stl/index_containers.html"&gt;STL Containers and Container Adaptors&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;序列容器&lt;/h3&gt;
&lt;p&gt;包括vector，deque，list&lt;/p&gt;
&lt;h4&gt;共有函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;ContainerType&amp;lt;T&amp;gt; c; &lt;/span&gt;
&lt;span class="err"&gt;ContainerType&amp;lt;T&amp;gt; c(num);    &lt;/span&gt;
&lt;span class="err"&gt;ContainerType&amp;lt;T&amp;gt; c(num, val);   &lt;/span&gt;
&lt;span class="err"&gt;ContainerType&amp;lt;T&amp;gt; c(inIterBegin, inIterEnd);     &lt;/span&gt;
&lt;span class="err"&gt;//复制构造函数&lt;/span&gt;
&lt;span class="err"&gt;ContainerType&amp;lt;T …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;C++中的容器&lt;/h1&gt;
&lt;h2&gt;容器与容器适配器&lt;/h2&gt;
&lt;p&gt;容器包括vector, deque, list, map, multimap, set, multiset。容器适配器包括基于deque的stack和queue，基于vector的priority_queue。string也实现了stl的接口。&lt;/p&gt;
&lt;p&gt;因为编写C++程序时经常需要查找容器的函数接口，故作此总结。C++新引入的容器与函数未引入。主要参考自：&lt;a href="http://cs.stmarys.ca/~porter/csc/ref/stl/index_containers.html"&gt;STL Containers and Container Adaptors&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;序列容器&lt;/h3&gt;
&lt;p&gt;包括vector，deque，list&lt;/p&gt;
&lt;h4&gt;共有函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;ContainerType&amp;lt;T&amp;gt; c; &lt;/span&gt;
&lt;span class="err"&gt;ContainerType&amp;lt;T&amp;gt; c(num);    &lt;/span&gt;
&lt;span class="err"&gt;ContainerType&amp;lt;T&amp;gt; c(num, val);   &lt;/span&gt;
&lt;span class="err"&gt;ContainerType&amp;lt;T&amp;gt; c(inIterBegin, inIterEnd);     &lt;/span&gt;
&lt;span class="err"&gt;//复制构造函数&lt;/span&gt;
&lt;span class="err"&gt;ContainerType&amp;lt;T&amp;gt; c(otherLikeContainer);     &lt;/span&gt;
&lt;span class="err"&gt;ContainerType&amp;lt;T&amp;gt; c = otherLikeContainer; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;赋值构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;c1 = c2 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;比较运算&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;c1 == c2 &lt;/span&gt;
&lt;span class="err"&gt;c1 != c2 &lt;/span&gt;
&lt;span class="err"&gt;c1 &amp;lt; c2 //按元素逐个比较&lt;/span&gt;
&lt;span class="err"&gt;c1 &amp;lt;= c2 &lt;/span&gt;
&lt;span class="err"&gt;c1 &amp;gt; c2 &lt;/span&gt;
&lt;span class="err"&gt;c1 &amp;gt;= c2 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;容量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;empty() &lt;/span&gt;
&lt;span class="err"&gt;size() &lt;/span&gt;
&lt;span class="err"&gt;max_size() &lt;/span&gt;
&lt;span class="err"&gt;resize(num, val = default)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;迭代器和引用&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;begin()&lt;/span&gt;
&lt;span class="err"&gt;end()&lt;/span&gt;
&lt;span class="err"&gt;rbegin() &lt;/span&gt;
&lt;span class="err"&gt;rend()&lt;/span&gt;
&lt;span class="err"&gt;front() &lt;/span&gt;
&lt;span class="err"&gt;back()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;插入值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;push_back(val) &lt;/span&gt;
&lt;span class="err"&gt;insert(iter, val) &lt;/span&gt;
&lt;span class="err"&gt;insert(iter, num, val)&lt;/span&gt;
&lt;span class="err"&gt;insert(iter, inIterBegin, inIterEnd)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;赋值（换掉容器内所有元素）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;assign(inIterBegin, inIterEnd) &lt;/span&gt;
&lt;span class="err"&gt;assign(num, val) &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;删除元素&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pop_back() &lt;/span&gt;
&lt;span class="err"&gt;erase(iter) &lt;/span&gt;
&lt;span class="err"&gt;erase(iterBegin, iterEnd) &lt;/span&gt;
&lt;span class="err"&gt;clear()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;swap(otherLikeContainer)&lt;/span&gt;
&lt;span class="err"&gt;get_allocator() &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;特有函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;vector特有&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;reserve(num)&lt;/span&gt;
&lt;span class="err"&gt;capacity() &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;list特有&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;merge(otherList) //按照大小顺序合并，二者必须是有序的&lt;/span&gt;
&lt;span class="err"&gt;merge(otherList, binPred) &lt;/span&gt;
&lt;span class="err"&gt;remove(val)&lt;/span&gt;
&lt;span class="err"&gt;remove_if(unPred) &lt;/span&gt;
&lt;span class="err"&gt;reverse() &lt;/span&gt;
&lt;span class="err"&gt;sort() &lt;/span&gt;
&lt;span class="err"&gt;sort(binPred) &lt;/span&gt;
&lt;span class="err"&gt;splice(iter, otherList) //将otherList中所有元素移动到iter处&lt;/span&gt;
&lt;span class="err"&gt;splice(iter, otherList, otherIterBegin, otherIterEnd) &lt;/span&gt;
&lt;span class="err"&gt;unique() &lt;/span&gt;
&lt;span class="err"&gt;unique(binPred) &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;vector和deque特有&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;at(index) //会检查下标范围&lt;/span&gt;
&lt;span class="err"&gt;operator[](index) &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;deque和list特有&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;push_front(val)&lt;/span&gt;
&lt;span class="err"&gt;pop_front() &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;容器适配器&lt;/h3&gt;
&lt;p&gt;包括stack，queue，priority_queue&lt;/p&gt;
&lt;h4&gt;共有函数&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;c1 = c2 &lt;/span&gt;
&lt;span class="err"&gt;empty()&lt;/span&gt;
&lt;span class="err"&gt;size() &lt;/span&gt;
&lt;span class="err"&gt;push(val) &lt;/span&gt;
&lt;span class="err"&gt;pop() &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;特有函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;queue特有函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;front() &lt;/span&gt;
&lt;span class="err"&gt;back() &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;stack和priority_queue 特有函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;top() &lt;/span&gt;
&lt;span class="err"&gt;== &lt;/span&gt;
&lt;span class="err"&gt;!= &lt;/span&gt;
&lt;span class="err"&gt;&amp;lt; &lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;= &lt;/span&gt;
&lt;span class="err"&gt;&amp;gt; &lt;/span&gt;
&lt;span class="err"&gt;&amp;gt;= &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;序列容器与容器适配器函数表格&lt;/h3&gt;
&lt;p&gt;参见&lt;a href="http://cs.stmarys.ca/~porter/csc/ref/stl/tables/seq_adapt_mem_fun.html"&gt;The STL Sequential Containers and Container Adaptors, 
and their Member Functions&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;关联容器&lt;/h3&gt;
&lt;p&gt;包括map, multimap, set, multiset&lt;/p&gt;
&lt;h4&gt;共有函数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;c1 = c2 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;比较&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;== &lt;/span&gt;
&lt;span class="err"&gt;!= &lt;/span&gt;
&lt;span class="err"&gt;&amp;lt; &lt;/span&gt;
&lt;span class="err"&gt;&amp;lt;= &lt;/span&gt;
&lt;span class="err"&gt;&amp;gt; &lt;/span&gt;
&lt;span class="err"&gt;&amp;gt;= &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;容量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;empty() const &lt;/span&gt;
&lt;span class="err"&gt;size() const &lt;/span&gt;
&lt;span class="err"&gt;max_size() &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;迭代器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;begin() &lt;/span&gt;
&lt;span class="err"&gt;end() &lt;/span&gt;
&lt;span class="err"&gt;rbegin() &lt;/span&gt;
&lt;span class="err"&gt;rend() &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;插入值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;insert(p, val) &lt;/span&gt;
&lt;span class="err"&gt;insert(start, end) &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;删除&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;erase(someKey) &lt;/span&gt;
&lt;span class="err"&gt;erase(iter) &lt;/span&gt;
&lt;span class="err"&gt;erase(start, end) &lt;/span&gt;
&lt;span class="err"&gt;clear() &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;查找&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;count(someKey) &lt;/span&gt;
&lt;span class="err"&gt;find(someKey)  //返回迭代器&lt;/span&gt;
&lt;span class="err"&gt;lower_bound(someKey) //大于等于someKey的迭代器&lt;/span&gt;
&lt;span class="err"&gt;upper_bound(someKey) //大于someKey的迭代器&lt;/span&gt;
&lt;span class="err"&gt;equal_range(someKey) &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;swap(otherLikeContainer) &lt;/span&gt;
&lt;span class="err"&gt;get_allocator() &lt;/span&gt;
&lt;span class="err"&gt;//key和val比较的函数对象&lt;/span&gt;
&lt;span class="err"&gt;key_comp() &lt;/span&gt;
&lt;span class="err"&gt;value_comp() &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;特有函数&lt;/h4&gt;
&lt;p&gt;其实不存在特有函数，只是这些函数的接口略有不同
- map/multimap特有构造函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;ContainerType&amp;lt;keyType, ValueType&amp;gt; c; &lt;/span&gt;
&lt;span class="err"&gt;ContainerType&amp;lt;KeyType, ValueType&amp;gt; c(inIterBegin, inIterEnd); &lt;/span&gt;
&lt;span class="err"&gt;ContainerType&amp;lt;KeyType, ValueType&amp;gt; c(otherLikeContainer); &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;set/multiset特有构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;ContainerType&amp;lt;T&amp;gt; c; &lt;/span&gt;
&lt;span class="err"&gt;ContainerType&amp;lt;T&amp;gt; c(inIterBegin, inIterEnd); &lt;/span&gt;
&lt;span class="err"&gt;ContainerType&amp;lt;T&amp;gt; c(otherLikeContainer); &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;map特有成员函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;someKey&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;map/set特有成员函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;//返回值为pair&amp;lt;iterator, true/false（是否已经含有此值）&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;insert(val) &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;multimap/multiset特有成员函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;//返回iterator&lt;/span&gt;
&lt;span class="err"&gt;insert(val) &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;关联容器函数表格&lt;/h3&gt;
&lt;p&gt;参见&lt;a href="http://cs.stmarys.ca/~porter/csc/ref/stl/tables/associative_mem_fun.html"&gt;The STL Associative Containers and their Member Functions&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;p&gt;包括string，bitset等类容器&lt;/p&gt;
&lt;h4&gt;string&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;string s;&lt;/span&gt;
&lt;span class="err"&gt;string s(c_string_value);&lt;/span&gt;
&lt;span class="err"&gt;string s(char_array, size_type_count);&lt;/span&gt;
&lt;span class="err"&gt;string s(string_value);&lt;/span&gt;
&lt;span class="err"&gt;string s(string_value, size_type_index);&lt;/span&gt;
&lt;span class="err"&gt;string s(string_value, size_type_index, size_type_count);&lt;/span&gt;
&lt;span class="err"&gt;string s(size_type_count, char_value);&lt;/span&gt;
&lt;span class="err"&gt;string s(input_iterator_start, input_iterator_end);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;取char&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;边界检查&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;迭代器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;s.begin()&lt;/span&gt;
&lt;span class="err"&gt;s.end()&lt;/span&gt;
&lt;span class="err"&gt;s.rbegin()&lt;/span&gt;
&lt;span class="err"&gt;s.rend()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;append与赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;operator+=&lt;/span&gt;
&lt;span class="err"&gt;s.append(string_value)&lt;/span&gt;
&lt;span class="err"&gt;s.append(c_string_value)&lt;/span&gt;
&lt;span class="err"&gt;s.append(size_type_count, char_value)&lt;/span&gt;
&lt;span class="err"&gt;s.append(c_string_value, size_type_count)&lt;/span&gt;
&lt;span class="err"&gt;s.append(c_string_value, size_type_index, size_type_count)&lt;/span&gt;
&lt;span class="err"&gt;s.append(first_input_iterator, last_input_iterator)&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;operator=&lt;/span&gt;
&lt;span class="err"&gt;s.assign(string_value)&lt;/span&gt;
&lt;span class="err"&gt;s.assign(c_string_value)&lt;/span&gt;
&lt;span class="err"&gt;s.assign(size_type_count, char_value)&lt;/span&gt;
&lt;span class="err"&gt;s.assign(c_string_value, size_type_count)&lt;/span&gt;
&lt;span class="err"&gt;s.assign(c_string_value, size_type_index, size_type_count)&lt;/span&gt;
&lt;span class="err"&gt;s.assign(start_input_iterator, end_input_iterator)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;转换为c-string&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;s.copy(char_array, size_type_count, size_type_index)&lt;/span&gt;
&lt;span class="err"&gt;s.c_str() //返回以\0结束的char数组地址，数组归s所有，不要更改&lt;/span&gt;
&lt;span class="err"&gt;s.data() //返回不以\0结束的char数组地址，数组归s所有，不要更改&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;子串&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;s.substr(size_type_index)&lt;/span&gt;
&lt;span class="err"&gt;s.substr(size_type_index, size_type_count)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;容量及调整容量&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;s.empty()&lt;/span&gt;
&lt;span class="err"&gt;s.capacity()&lt;/span&gt;
&lt;span class="err"&gt;s.length()&lt;/span&gt;
&lt;span class="err"&gt;s.size()&lt;/span&gt;
&lt;span class="err"&gt;s.max_size()&lt;/span&gt;
&lt;span class="err"&gt;s.reserve(size_type_value)&lt;/span&gt;
&lt;span class="err"&gt;s.resize(size_type_value, char_value)&lt;/span&gt;
&lt;span class="err"&gt;s.resize(size_type_value)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;删除&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;s.clear()&lt;/span&gt;
&lt;span class="err"&gt;s.erase() //删除所有字符&lt;/span&gt;
&lt;span class="err"&gt;s.erase(size_type_index)&lt;/span&gt;
&lt;span class="err"&gt;s.erase(size_type_index, size_type_count)&lt;/span&gt;
&lt;span class="err"&gt;s.erase(iterator_position)&lt;/span&gt;
&lt;span class="err"&gt;s.erase(first_iterator, last_iterator)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;查找&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;//所有的find均返回下标值，若找不到，返回string::npos&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;//查找char&lt;/span&gt;
&lt;span class="err"&gt;s.find(char_value) &lt;/span&gt;
&lt;span class="err"&gt;s.find(char_value, size_type_index) &lt;/span&gt;
&lt;span class="err"&gt;s.rfind(char_value) &lt;/span&gt;
&lt;span class="err"&gt;s.rfind(char_value, size_type_index)&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;//查找string&lt;/span&gt;
&lt;span class="err"&gt;s.find(string_value) &lt;/span&gt;
&lt;span class="err"&gt;s.find(string_value, size_type_index) //从index处开始查找&lt;/span&gt;
&lt;span class="err"&gt;//从后向前查找&lt;/span&gt;
&lt;span class="err"&gt;s.rfind(string_value) &lt;/span&gt;
&lt;span class="err"&gt;s.rfind(string_value, size_type_index)&lt;/span&gt;
&lt;span class="err"&gt;//查找cstring&lt;/span&gt;
&lt;span class="err"&gt;s.find(c_string_value, size_type_index, size_type_count) &lt;/span&gt;
&lt;span class="err"&gt;s.rfind(c_string_value, size_type_index, size_type_count)&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;s.find_first_of(char_value) &lt;/span&gt;
&lt;span class="err"&gt;s.find_first_of(char_value, size_type_index) &lt;/span&gt;
&lt;span class="err"&gt;s.find_first_not_of(char_value) &lt;/span&gt;
&lt;span class="err"&gt;s.find_first_not_of(char_value, size_type_index)&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;//查找在/不在string中的char，返回下标&lt;/span&gt;
&lt;span class="err"&gt;s.find_first_of(string_value) &lt;/span&gt;
&lt;span class="err"&gt;s.find_first_of(string_value, size_type_index) &lt;/span&gt;
&lt;span class="err"&gt;s.find_first_not_of(string_value) &lt;/span&gt;
&lt;span class="err"&gt;s.find_first_not_of(string_value, size_type_index)&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;s.find_first_of(c_string_value, size_type_index, size_type_count) &lt;/span&gt;
&lt;span class="err"&gt;s.find_first_not_of(string_value, size_type_index, size_type_count)&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;s.find_last_of(char_value) &lt;/span&gt;
&lt;span class="err"&gt;s.find_last_of(char_value, size_type_index) &lt;/span&gt;
&lt;span class="err"&gt;s.find_last_not_of(char_value) &lt;/span&gt;
&lt;span class="err"&gt;s.find_last_not_of(char_value, size_type_index)&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;s.find_last_of(string_value) &lt;/span&gt;
&lt;span class="err"&gt;s.find_last_of(string_value, size_type_index) &lt;/span&gt;
&lt;span class="err"&gt;s.find_last_not_of(string_value) &lt;/span&gt;
&lt;span class="err"&gt;s.find_last_not_of(string_value, size_type_index)&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;s.find_last_of(c_string_value, size_type_index, size_type_count) &lt;/span&gt;
&lt;span class="err"&gt;s.find_last_not_of(string_value, size_type_index, size_type_count)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;插入值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;s.insert(size_type_index, string_variable) &lt;/span&gt;
&lt;span class="err"&gt;s.insert(size_type_index, c_string_value)&lt;/span&gt;
&lt;span class="err"&gt;s.insert(size_type_index1, string_variable,  size_type_index2, size_type_count)&lt;/span&gt;
&lt;span class="err"&gt;s.insert(size_type_index, c_string_value, size_type_count)&lt;/span&gt;
&lt;span class="err"&gt;s.insert(size_type_index, size_type_count, char_value)//c++中函数形参总是count在val之前&lt;/span&gt;
&lt;span class="err"&gt;s.insert(iterator_position, size_type_count, char_value)&lt;/span&gt;
&lt;span class="err"&gt;s.insert(iterator_position, char_value)&lt;/span&gt;
&lt;span class="err"&gt;s.insert(iterator_position, input_iterator_first, input_iterator_last)&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;s.push_back(char_value)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;字符/字符串替换&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;s.replace(size_type_index, size_type_count, string_value)&lt;/span&gt;
&lt;span class="err"&gt;s.replace(iterator_first, iterator_last, string_value&lt;/span&gt;
&lt;span class="err"&gt;s.replace(size_type_index1, size_type_count1, string_value, &lt;/span&gt;
&lt;span class="err"&gt;          size_type_index2, size_type_count2)&lt;/span&gt;
&lt;span class="err"&gt;s.replace(size_type_index, size_type_count, c_string_value)&lt;/span&gt;
&lt;span class="err"&gt;s.replace(iterator_first, iterator_last, c_string_value)&lt;/span&gt;
&lt;span class="err"&gt;s.replace(size_type_index, size_type_count1, &lt;/span&gt;
&lt;span class="err"&gt;          c_string_value, size_type_count2)&lt;/span&gt;
&lt;span class="err"&gt;s.replace(iterator_first, iterator_last, &lt;/span&gt;
&lt;span class="err"&gt;          c_string_value, size_type_count)&lt;/span&gt;
&lt;span class="err"&gt;s.replace(size_type_index, size_type_count1, &lt;/span&gt;
&lt;span class="err"&gt;          size_type_count2, char_value)&lt;/span&gt;
&lt;span class="err"&gt;s.replace(iterator_first, iterator_last, &lt;/span&gt;
&lt;span class="err"&gt;          size_type_count, char_value)&lt;/span&gt;
&lt;span class="err"&gt;s.replace(iterator_first, iterator_last, &lt;/span&gt;
&lt;span class="err"&gt;          input_iterator_start, input_iterator_end)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;比较&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;//==, !=, &amp;lt;, &amp;gt; &amp;lt;=, &amp;gt;=已经重载&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;//compare返回值为int：s-other&lt;/span&gt;
&lt;span class="err"&gt;s.compare(string_value)&lt;/span&gt;
&lt;span class="err"&gt;s.compare(size_type_index, size_type_count, string_value)&lt;/span&gt;
&lt;span class="err"&gt;s.compare(size_type_index1, size_type_count1, string_value, &lt;/span&gt;
&lt;span class="err"&gt;          size_type_index2, size_type_count2)&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;s.compare(c_string_value)&lt;/span&gt;
&lt;span class="err"&gt;s.compare(size_type_index, size_type_count, c_string_value)&lt;/span&gt;
&lt;span class="err"&gt;s.compare(size_type_index, size_type_count1, &lt;/span&gt;
&lt;span class="err"&gt;          c_string_value, size_type_count2)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;其他函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;s.swap(string_variable)&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;//以下三个非成员函数&lt;/span&gt;
&lt;span class="err"&gt;swap(string_variable1, string_variable2)&lt;/span&gt;
&lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="err"&gt;getline(inStream, string_variable)&lt;/span&gt;
&lt;span class="err"&gt;// string结果不包含delimiter&lt;/span&gt;
&lt;span class="err"&gt;getline(inStream, string_variable, char_delimiter_value)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点我&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20141229 python的类</title><link href="http://heloman.github.io/pages/2014/12/20141229-pythonde-lei.html" rel="alternate"></link><published>2014-12-31T10:52:47+08:00</published><updated>2014-12-31T10:52:47+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-12-31:/pages/2014/12/20141229-pythonde-lei.html</id><content type="html">&lt;h1&gt;python的类&lt;/h1&gt;
&lt;h2&gt;module的属性与作用域&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;属性分为只读的和可写的。可写的属性也可以删除：&lt;code&gt;del a.attr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内置namespace在&lt;code&gt;__builtin__&lt;/code&gt;模块下，程序中的语句在&lt;code&gt;__main__&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;如果一个name生命为global，则所有的引用赋值可以直接找到此name。否则，此name是只读的，任意写操作都会新建一个同名局部变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__init__&lt;/code&gt;在类实例化时被调用&lt;/li&gt;
&lt;li&gt;python的对象分为类对象、实例对象、方法对象&lt;/li&gt;
&lt;li&gt;将可变类型作为类对象会带来多个其实例对象修改同一个可变类型，最好放入&lt;code&gt;__init__&lt;/code&gt;中作为实例对象&lt;/li&gt;
&lt;li&gt;数据属性可能覆盖同名方法属性&lt;/li&gt;
&lt;li&gt;可以将函数对象赋值给类对象作为成员&lt;/li&gt;
&lt;li&gt;每个对象都有一个类型：&lt;code&gt;object.__class__&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;派生和继承&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;继承：&lt;code&gt;class derived(base):&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;派生类中所有方法都是虚的&lt;/li&gt;
&lt;li&gt;多继承：搜索时从左到右，深度搜索&lt;/li&gt;
&lt;li&gt;name mangling：以两个下划线开始的属性将被替换为&lt;code&gt;_classname__spam&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20141208 python数据类型</title><link href="http://heloman.github.io/pages/2014/12/20141208-pythonshu-ju-lei-xing.html" rel="alternate"></link><published>2014-12-08T23:11:00+08:00</published><updated>2014-12-08T23:11:00+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-12-08:/pages/2014/12/20141208-pythonshu-ju-lei-xing.html</id><summary type="html">&lt;h1&gt;Python中的数据类型&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;字符串和数组是immutable的&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;type(var)&lt;/code&gt;可以很方便的确认变量类型&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;id(var)&lt;/code&gt;可以查看每个变量对象的id，id相同表示两个对象在内存中位置相同，节省了开销&lt;/li&gt;
&lt;li&gt;tuple、list、dict分别用&lt;code&gt;() [] {}&lt;/code&gt;表示&lt;/li&gt;
&lt;li&gt;数据类型间转换：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;int() float() complex() str() list() tuple()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;布尔类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;和&lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;布尔运算：and or not&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;整数Int&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超出一个范围后，会自动转换为Long数据类型，也可以使用&lt;code&gt;345L&lt;/code&gt;的方式强制使用long类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;浮点数Float&lt;/h2&gt;
&lt;h2&gt;字符串&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;字符串用单引号&lt;code&gt;' '&lt;/code&gt;、双引号&lt;code&gt;" "&lt;/code&gt;、三引号&lt;code&gt;''' '''&lt;/code&gt;，其中三引号内的字符串可以分成多行书写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\&lt;/code&gt;表示转义，而字符串前加入r可以防止转义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split join&lt;/code&gt;是最常用的方法，用于分词，在list和string之间转换 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Python中的数据类型&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;字符串和数组是immutable的&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;type(var)&lt;/code&gt;可以很方便的确认变量类型&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;id(var)&lt;/code&gt;可以查看每个变量对象的id，id相同表示两个对象在内存中位置相同，节省了开销&lt;/li&gt;
&lt;li&gt;tuple、list、dict分别用&lt;code&gt;() [] {}&lt;/code&gt;表示&lt;/li&gt;
&lt;li&gt;数据类型间转换：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;int() float() complex() str() list() tuple()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;布尔类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;和&lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;布尔运算：and or not&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;整数Int&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;超出一个范围后，会自动转换为Long数据类型，也可以使用&lt;code&gt;345L&lt;/code&gt;的方式强制使用long类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;浮点数Float&lt;/h2&gt;
&lt;h2&gt;字符串&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;字符串用单引号&lt;code&gt;' '&lt;/code&gt;、双引号&lt;code&gt;" "&lt;/code&gt;、三引号&lt;code&gt;''' '''&lt;/code&gt;，其中三引号内的字符串可以分成多行书写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\&lt;/code&gt;表示转义，而字符串前加入r可以防止转义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;split join&lt;/code&gt;是最常用的方法，用于分词，在list和string之间转换&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;列表List&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;[]&lt;/code&gt;表示，包含的元素可以是不同类型的任何类型&lt;/li&gt;
&lt;li&gt;方法包括：append extend insert remove reverse pop index count sort len del&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+ *&lt;/code&gt;可以对两个、多个list进行连接&lt;/li&gt;
&lt;li&gt;sort：对list排序&lt;/li&gt;
&lt;li&gt;list slice:类似于matlab，使用形式为&lt;code&gt;a[start:end:step]&lt;/code&gt;，可以使用负数表示从后向前数，下标区间前开后闭&lt;/li&gt;
&lt;li&gt;in:可以使用in判断是否在list中&lt;code&gt;'a' in ['a','b']&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;元组Tuple&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;与List的不同之处在于初始化后不能更改&lt;/li&gt;
&lt;li&gt;若要创建单元素的tuple则需要在变量后添加一个逗号，如&lt;code&gt;type(('a',))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;与list相同，支持slice&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;集合Set&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;元素不可重复，包含集合运算&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;字典Dict&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;key必须为不可变类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keys() values()&lt;/code&gt;方法获取key和valuelist&lt;/li&gt;
&lt;li&gt;判断key是否存在：&lt;code&gt;dct.has_key('key')&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;clear:清空字典内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;python控制语句&lt;/h1&gt;
&lt;h2&gt;if&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if...elif...else&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;for&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;按照顺序迭代序列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for i in range(10)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;break continue&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;循环语句的else子句：在for或者while执行结束后，如果不是由break中断，则执行else字句中的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;pass&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;表示什么也不做，用于占位&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;list comprehension&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[expr for var in iterable if cond_expr]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;方便的使用已有列表生成新列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[2**i for i in list(range(10)) if i%2 == 0]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;map reduce filter都可以使用这种方式实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;generator expression&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(expr for var in iterable if cond_expr)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更节省内存，返回一个generator&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;操作符优先级&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;从最优先开始：slice/属性/调用 幂 正负/按位取反 乘除取余 加减 移位 按位与/异或/或 比较 布尔运算 if_else lambda表达式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt;不能放在表达式中，与C不同&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;函数&lt;/h1&gt;
&lt;h2&gt;docstring&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;第一行是用途的简短描述，第二行空白&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;函数参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每个函数调用都会创建一个被调函数的局部符号表，参数传递使用call by value（对象的引用）&lt;/li&gt;
&lt;li&gt;没有return语句的函数返回值为None，没有参数的return语句也返回None&lt;/li&gt;
&lt;li&gt;可以使用&lt;code&gt;=&lt;/code&gt;指定默认参数值，调用时可以不给出默认参数值，或者给出部分默认参数值。而默认值在函数定义时已经指定，即代码执行到def methodname时&lt;/li&gt;
&lt;li&gt;函数调用时positional argument可以与keyword arguments混用，但positional argument一定要在前面。keyword arguments出现顺序随意&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*name&lt;/code&gt;作为函数参数可以接收到所有不在形参列表中的positional argument，&lt;code&gt;**name&lt;/code&gt;可以接收到所有不在形参列表中的keyword arguments&lt;/li&gt;
&lt;li&gt;相反的，可以在调用函数时，使用&lt;code&gt;*name``**name&lt;/code&gt;展开已有的tuple/list或者dict作为函数参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;函数嵌套&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;与C语言不同，函数定义内可以包含另一个函数的定义，即函数嵌套&lt;/li&gt;
&lt;li&gt;嵌套外部函数称为外部作用域。变量查找顺序为LEGB（L：Local，E：Enclosing，G：Global，B：Built-in）&lt;/li&gt;
&lt;li&gt;查找变量时，若有对变量的赋值操作但没有用global，则为局部变量，按照：局部作用域-外部作用域-全局作用域-python内建作用域的顺序查找。若变量已经被声明为global，则直接从全局作用域开始查找&lt;/li&gt;
&lt;li&gt;最内嵌套作用域规则：由一个赋值语句引进的名字在这个赋值语句所在的作用域里是可见（起作用）的，而且在其内部嵌套的每个作用域里也可见，除非它被嵌套于内部的，引进同样名字的另一条赋值语句所遮蔽/覆盖&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发生函数嵌套后，如果内部函数引用了外部函数的局部变量，那么外部函数的局部变量将被静态存储，即当函数退出后，其局部变量所占内存也不会被释放&lt;/strong&gt;。为什么？参考&lt;a href="http://developer.51cto.com/art/200809/90863_4.htm"&gt;http://developer.51cto.com/art/200809/90863_4.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;global&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;若函数内部变量和外部变量同名，通常，如果函数内部对变量进行赋值，那么此变量认为是局部变量；若函数内从未有赋值，则此变量为全局变量&lt;/li&gt;
&lt;li&gt;若使用global声明，则可以在函数内部对全局变量赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;书写规范&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;参照PEP8风格&lt;/li&gt;
&lt;li&gt;每行不超过79个字符&lt;/li&gt;
&lt;li&gt;运算符前后和逗号后面使用空格，但是括号里侧不加空格&lt;/li&gt;
&lt;li&gt;类使用CamelCase，函数使用lower_case_with_underscores&lt;/li&gt;
&lt;li&gt;只使用ASCII编码&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;遍历技巧&lt;/h1&gt;
&lt;h2&gt;enumerate&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以同时得到索引下标和对应的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for ind,val in enumerate(list_a)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;zip&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;同时成对读取元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for p,q in zip(list_a, list_b)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;reversed&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;反向遍历&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for i in reversed(list_a)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;sorted&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;遍历排序后序列，源列表不变&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for i in sorted(list_a)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;iteritems&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;遍历字典时同时得到key和value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for k, v in dct.iteritems()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;generator和yield&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;含有yield语句的函数返回值为类型generator，其next方法可以一次函数调用到下一个yield语句&lt;/li&gt;
&lt;li&gt;每次发生next调用时，函数执行完yield后挂起，返回yield值，保存函数状态。下次调用时从yield语句后执行到再次遇到yield&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;内置函数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;python内置，包括之前提到的id type等等，包括数学运算、集合运算、逻辑运算、反射、IO等等。可以参考&lt;a href="http://jianfeihit.iteye.com/blog/1835272"&gt;http://jianfeihit.iteye.com/blog/1835272&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;enumerate:返回一个generator，next调用返回一个tuple(index, value)&lt;/li&gt;
&lt;li&gt;xrange:与range类似，但返回一个generator，节省内存&lt;/li&gt;
&lt;li&gt;eval:计算表达式的值&lt;/li&gt;
&lt;li&gt;execfile:执行文件&lt;/li&gt;
&lt;li&gt;hasattr：检测对象是否具有某个属性&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>面试题集锦</title><link href="http://heloman.github.io/pages/2014/09/mian-shi-ti-ji-jin.html" rel="alternate"></link><published>2014-09-14T08:36:56+08:00</published><updated>2014-09-14T08:36:56+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-09-14:/pages/2014/09/mian-shi-ti-ji-jin.html</id><content type="html">&lt;h1&gt;面试题集锦&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;谨对一些看过的面试题做一些总结&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;以下部分来自于纸上谈兵&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;为什么正二十面体的体积面积比比四边形的大？&lt;/li&gt;
&lt;li&gt;正态分布和均匀分布之间是否可以相互转换？&lt;/li&gt;
&lt;li&gt;三门、女孩、三囚犯问题：&lt;a href="http://zhiqiang.org/blog/science/three-doors-related-problems.html"&gt;http://zhiqiang.org/blog/science/three-doors-related-problems.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;找到和为k的子数组&lt;/li&gt;
&lt;li&gt;一个与世隔绝的岛屿上有13个黑人、15个白人和17个黄种人。任何两种不同皮肤的人遇到一起，就会都变成另外一种颜色。问是否可能所有人都变成同一种颜色？&lt;/li&gt;
&lt;li&gt;你有100个硬币。首先你将它分成两堆，分别有x枚和y枚硬币，得到它们的乘积。再任意将其中的一堆分成两堆，得到两个小堆的硬币数量的乘积。这样一直分下去直到每个堆只有一枚硬币无法再分为止。将所有得到的乘积加起来，问最后这样的乘积和最大是多少？&lt;/li&gt;
&lt;/ol&gt;</content><category term="misc"></category></entry><entry><title>碰撞检测</title><link href="http://heloman.github.io/pages/2014/09/peng-zhuang-jian-ce.html" rel="alternate"></link><published>2014-09-10T20:47:26+08:00</published><updated>2014-09-10T20:47:26+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-09-10:/pages/2014/09/peng-zhuang-jian-ce.html</id><content type="html">&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;向量点乘&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140908《全景探秘游戏设计艺术》精华 用户体验 游戏平衡性</title><link href="http://heloman.github.io/pages/2014/09/20140908quan-jing-tan-mi-you-xi-she-ji-yi-zhu-jing-hua-yong-hu-ti-yan-you-xi-ping-heng-xing.html" rel="alternate"></link><published>2014-09-09T01:05:16+08:00</published><updated>2014-09-09T01:05:16+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-09-09:/pages/2014/09/20140908quan-jing-tan-mi-you-xi-she-ji-yi-zhu-jing-hua-yong-hu-ti-yan-you-xi-ping-heng-xing.html</id><summary type="html">&lt;h1&gt;《全景探秘游戏设计艺术》精华 用户体验 游戏平衡性&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;一本很好的游戏设计书籍，暂时关注的是用户体验部分，比如，用户喜欢什么，什么可以带来乐趣，以及游戏的平衡性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;男性与女性的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;男性喜欢的游戏要素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;征服：控制一切&lt;/li&gt;
&lt;li&gt;竞争：与他人竞争来表明自己是最棒的&lt;/li&gt;
&lt;li&gt;破坏：破坏带来快感&lt;/li&gt;
&lt;li&gt;空间谜题：男性有更好的空间推理能力&lt;/li&gt;
&lt;li&gt;尝试和失败：男性不喜欢阅读说明，更喜欢通过尝试和失败来学习&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;女性喜欢的游戏要素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;情感：比如爱情与浪漫&lt;/li&gt;
&lt;li&gt;与真实世界关联：如换装、虚拟人生、偷菜&lt;/li&gt;
&lt;li&gt;照料别人：如宠物养成和游戏中的治疗师&lt;/li&gt;
&lt;li&gt;对话和字谜：如填字游戏，仙剑&lt;/li&gt;
&lt;li&gt;照实例学习：按照教程来学习&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;游戏的乐趣&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;美学：精美的画面和优美的背景音乐，是感官的乐趣，如三位一体，梦幻的画面&lt;/li&gt;
&lt;li&gt;幻想：把自己幻想成现实中无法成为的事物，如凡人修仙传&lt;/li&gt;
&lt;li&gt;叙述：一个连续事件的戏剧性揭示过程，仙剑系列&lt;/li&gt;
&lt;li&gt;挑战 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;《全景探秘游戏设计艺术》精华 用户体验 游戏平衡性&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;一本很好的游戏设计书籍，暂时关注的是用户体验部分，比如，用户喜欢什么，什么可以带来乐趣，以及游戏的平衡性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;男性与女性的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;男性喜欢的游戏要素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;征服：控制一切&lt;/li&gt;
&lt;li&gt;竞争：与他人竞争来表明自己是最棒的&lt;/li&gt;
&lt;li&gt;破坏：破坏带来快感&lt;/li&gt;
&lt;li&gt;空间谜题：男性有更好的空间推理能力&lt;/li&gt;
&lt;li&gt;尝试和失败：男性不喜欢阅读说明，更喜欢通过尝试和失败来学习&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;女性喜欢的游戏要素&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;情感：比如爱情与浪漫&lt;/li&gt;
&lt;li&gt;与真实世界关联：如换装、虚拟人生、偷菜&lt;/li&gt;
&lt;li&gt;照料别人：如宠物养成和游戏中的治疗师&lt;/li&gt;
&lt;li&gt;对话和字谜：如填字游戏，仙剑&lt;/li&gt;
&lt;li&gt;照实例学习：按照教程来学习&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;游戏的乐趣&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;美学：精美的画面和优美的背景音乐，是感官的乐趣，如三位一体，梦幻的画面&lt;/li&gt;
&lt;li&gt;幻想：把自己幻想成现实中无法成为的事物，如凡人修仙传&lt;/li&gt;
&lt;li&gt;叙述：一个连续事件的戏剧性揭示过程，仙剑系列&lt;/li&gt;
&lt;li&gt;挑战：解决游戏中给出的问题，是游戏的核心乐趣&lt;/li&gt;
&lt;li&gt;伙伴关系：友谊与合作&lt;/li&gt;
&lt;li&gt;探索新事物：对世界的探险和对某个策略的探索&lt;/li&gt;
&lt;li&gt;表达：表达自我和创造事物的乐趣，比如minecraft&lt;/li&gt;
&lt;li&gt;服从：遵从并适应游戏世界的规则&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;游戏玩家的分类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;成功者：乐于完成游戏目标，主要乐趣在于挑战&lt;/li&gt;
&lt;li&gt;探险家：希望了解世界的广度，主要乐趣是探索&lt;/li&gt;
&lt;li&gt;社交者：乐趣是寻找伙伴关系&lt;/li&gt;
&lt;li&gt;杀手：喜欢对抗和击败别人&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;一些其他的游戏乐趣&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对乐趣即将到来的期待&lt;/li&gt;
&lt;li&gt;幸灾乐祸：坏人得到惩罚、对抗类游戏&lt;/li&gt;
&lt;li&gt;赠与礼物&lt;/li&gt;
&lt;li&gt;幽默&lt;/li&gt;
&lt;li&gt;选择的自主权&lt;/li&gt;
&lt;li&gt;因成就而自豪&lt;/li&gt;
&lt;li&gt;清除：如吃光所有豆子，杀掉所有敌人，拿到所有经验&lt;/li&gt;
&lt;li&gt;经历恐惧之后安全，如left 4 dead，求生之路&lt;/li&gt;
&lt;li&gt;逆境得胜&lt;/li&gt;
&lt;li&gt;难以置信&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;游戏的平衡&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;公平性&lt;/li&gt;
&lt;li&gt;挑战和成功：合理的难度，保持在沉浸区间&lt;/li&gt;
&lt;li&gt;提供有意义的平衡的选择，如策略、装备、角色、衣服的选择&lt;/li&gt;
&lt;li&gt;技能和几率：对应判断和承担风险&lt;/li&gt;
&lt;li&gt;动脑和动手哦&lt;/li&gt;
&lt;li&gt;对抗和协作&lt;/li&gt;
&lt;li&gt;游戏时间长短&lt;/li&gt;
&lt;li&gt;奖励的数量：逐渐增多、时间随机化&lt;/li&gt;
&lt;li&gt;惩罚的轻重、方式&lt;/li&gt;
&lt;li&gt;自由与控制：波斯王子游戏最后的场景，视角交由游戏控制以显得更激烈&lt;/li&gt;
&lt;li&gt;游戏复杂性&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20140908《金领简历》精华 创业公司 面试机会 简历</title><link href="http://heloman.github.io/pages/2014/09/20140908jin-ling-jian-li-jing-hua-chuang-ye-gong-si-mian-shi-ji-hui-jian-li.html" rel="alternate"></link><published>2014-09-09T00:16:49+08:00</published><updated>2014-09-09T00:16:49+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-09-09:/pages/2014/09/20140908jin-ling-jian-li-jing-hua-chuang-ye-gong-si-mian-shi-ji-hui-jian-li.html</id><summary type="html">&lt;h1&gt;《金领简历》精华 创业公司 面试机会 简历&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;《金领简历》在我看来是一本非常好的书，把面试之前的提前准备工作讲的非常到位，可惜在图书馆里没人借这本书。&lt;/li&gt;
&lt;li&gt;本文主要讲关于是否选择去创业公司、如何得到面试机会、如何写出优秀的简历。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;创业公司的特点&lt;/h2&gt;
&lt;h3&gt;创业公司的有利之处&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;全面锻炼能力： 有机会培养各种技能，但如果是只专注某个领域的人才，应该避免加入创业公司&lt;/li&gt;
&lt;li&gt;晋升机会更大：如果公司扩大规模，很容易成为团队领导&lt;/li&gt;
&lt;li&gt;控制力与影响力：可以凭借自己的工作表现影响公司的发展，可以对具体事项提意见&lt;/li&gt;
&lt;li&gt;能够迅速知道结果：通常几个月就能知道自己的决策是好是坏&lt;/li&gt;
&lt;li&gt;高回报：有可能变得富有，但同时承担风险&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;创业公司的不利因素&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需要长时间工作：需要大量的加班&lt;/li&gt;
&lt;li&gt;工作职责不清晰：各种杂事都要做&lt;/li&gt;
&lt;li&gt;低收入：薪酬低于业界标准，只能靠给股票期权来弥补，公司倒闭则成了废纸&lt;/li&gt;
&lt;li&gt;信誉度低：如果公司倒闭，重新找工作时简历上工作经历是污点&lt;/li&gt;
&lt;li&gt;得到的指导少：只能摸索着学习，而大公司或专业人士能够教给你一套解决问题的有效方法&lt;/li&gt;
&lt;li&gt;像免费午餐等大公司提供的福利并不是关键，无关紧要&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;在大公司和创业公司之间做选择&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;去创业公司的机会随时都有&lt;/li&gt;
&lt;li&gt;大公司能够学会真正的软件开发：代码审查 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;《金领简历》精华 创业公司 面试机会 简历&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;《金领简历》在我看来是一本非常好的书，把面试之前的提前准备工作讲的非常到位，可惜在图书馆里没人借这本书。&lt;/li&gt;
&lt;li&gt;本文主要讲关于是否选择去创业公司、如何得到面试机会、如何写出优秀的简历。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;创业公司的特点&lt;/h2&gt;
&lt;h3&gt;创业公司的有利之处&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;全面锻炼能力： 有机会培养各种技能，但如果是只专注某个领域的人才，应该避免加入创业公司&lt;/li&gt;
&lt;li&gt;晋升机会更大：如果公司扩大规模，很容易成为团队领导&lt;/li&gt;
&lt;li&gt;控制力与影响力：可以凭借自己的工作表现影响公司的发展，可以对具体事项提意见&lt;/li&gt;
&lt;li&gt;能够迅速知道结果：通常几个月就能知道自己的决策是好是坏&lt;/li&gt;
&lt;li&gt;高回报：有可能变得富有，但同时承担风险&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;创业公司的不利因素&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需要长时间工作：需要大量的加班&lt;/li&gt;
&lt;li&gt;工作职责不清晰：各种杂事都要做&lt;/li&gt;
&lt;li&gt;低收入：薪酬低于业界标准，只能靠给股票期权来弥补，公司倒闭则成了废纸&lt;/li&gt;
&lt;li&gt;信誉度低：如果公司倒闭，重新找工作时简历上工作经历是污点&lt;/li&gt;
&lt;li&gt;得到的指导少：只能摸索着学习，而大公司或专业人士能够教给你一套解决问题的有效方法&lt;/li&gt;
&lt;li&gt;像免费午餐等大公司提供的福利并不是关键，无关紧要&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;在大公司和创业公司之间做选择&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;去创业公司的机会随时都有&lt;/li&gt;
&lt;li&gt;大公司能够学会真正的软件开发：代码审查、编程风格等&lt;/li&gt;
&lt;li&gt;选择大公司就得到了短期辞掉工作加入创业公司的免费通行证&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;找工作的准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GPA通常只是在简历筛选过程中有影响，是可以通过其他方面的成就补救的&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实习与兼职&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;尝试为教授的研究工作提供帮助&lt;/li&gt;
&lt;li&gt;联系创业公司提供免费帮助&lt;/li&gt;
&lt;li&gt;成为非赢利性组织的志愿者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自己做出点名堂&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开创一家公司，实现脑子里的一种想法/项目，可以到网站上雇佣人来做这个&lt;/li&gt;
&lt;li&gt;撰写一个博客，并保持更新&lt;/li&gt;
&lt;li&gt;创办一个俱乐部或组织&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;如何得到面试&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;网申：尽快申请，并使用JD里面的关键词，最好向JD里的邮箱同时发送求职邮件。不靠谱&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内推&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在社交网站上问问这些公司的朋友&lt;/li&gt;
&lt;li&gt;让公司员工了解你：评论其博客，或写博客跟帖他的博客&lt;/li&gt;
&lt;li&gt;联系HR&lt;/li&gt;
&lt;li&gt;校友网络&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;招聘大会&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;准备好电梯演讲：我是谁，做过什么工作，擅长的事情，感兴趣的事情&lt;/li&gt;
&lt;li&gt;调查研究心仪的公司：注重哪些素质？自己如何体现这些素质？&lt;/li&gt;
&lt;li&gt;准备开放性问题&lt;/li&gt;
&lt;li&gt;准备一些自己背景相关的问题，巧妙作答以说明自己取得的重大成就和解决的重大挑战&lt;/li&gt;
&lt;li&gt;定制简历：为不同职位定制不同的简历&lt;/li&gt;
&lt;li&gt;衣着得体：衣着应与面试的衣服类似&lt;/li&gt;
&lt;li&gt;跟踪后续进展：取得名片或邮箱地址，回去后发邮件跟踪，内容写自己对公司的兴趣、自己能为公司做什么、附上简历&lt;/li&gt;
&lt;li&gt;可以有项目作品展示、看过的书籍展示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;猎头&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制自己简历流向，要知道猎头公司的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在网络上做出贡献&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个网站：包括基本信息、简历、照片、做过的项目列表&lt;/li&gt;
&lt;li&gt;开通一个博客，无论是不是技术的都可以&lt;/li&gt;
&lt;li&gt;去别人的博客撰写客座博客文章&lt;/li&gt;
&lt;li&gt;在论坛上解答问题&lt;/li&gt;
&lt;li&gt;加入github，提交patch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;简历&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优秀简历的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成就导向，而不是职责导向&lt;/li&gt;
&lt;li&gt;可量化的结果，如模块算法的大O表示法&lt;/li&gt;
&lt;li&gt;目标明确：针对职位定制简历&lt;/li&gt;
&lt;li&gt;有通用意义，使非专业人士也能了解你的贡献&lt;/li&gt;
&lt;li&gt;简洁、清晰&lt;/li&gt;
&lt;li&gt;组织良好：最能体现自己的能力的信息要非常突出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;美国/加拿大职位简历中不能有种族、信仰、婚姻状况、照片  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;工作经验5年以下的简历最好保持在一页，不要让不痛不痒的经历埋没的真正的亮点&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>reactive programming scala</title><link href="http://heloman.github.io/pages/2014/09/reactive-programming-scala.html" rel="alternate"></link><published>2014-09-04T07:11:22+08:00</published><updated>2014-09-04T07:11:22+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-09-04:/pages/2014/09/reactive-programming-scala.html</id><summary type="html">&lt;h2&gt;第一周 Quickcheck&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;实现一个heap&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第二周 Simulations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;电路仿真&lt;ul&gt;
&lt;li&gt;每个器件固定时延，线路没有时延&lt;/li&gt;
&lt;li&gt;或门仿真&lt;/li&gt;
&lt;li&gt;多路分离器仿真&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流行病仿真&lt;ul&gt;
&lt;li&gt;使用矩阵模拟城市&lt;/li&gt;
&lt;li&gt;飞机使用概率对结果又影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图形显示接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第三周 NodeScala&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用future实现一个异步服务器&lt;/li&gt;
&lt;li&gt;可以对系统库中已有的类添加方法&lt;/li&gt;
&lt;li&gt;扩展future对象，并添加取消方法&lt;/li&gt;
&lt;li&gt;实现异步HTTP服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第四周 Wikipedia Suggestions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;开发一个维基百科建议应用的图形界面，允许用户输入字符时实时显示可能的选择&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第五周 Actor Binary Tree&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;实现一个基于actor的二叉树，可以全异步的并行执行&lt;/li&gt;
&lt;li&gt;插入和contains查询都是自顶向下一条路径，remove采用标记的方法&lt;/li&gt;
&lt;li&gt;实现GC方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第六周 Replicated KV Store&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;KV是一个最简单的数据库形式&lt;/li&gt;
&lt;li&gt;本次实现一个分布式有备份的KV存储，分布式系统中的每个节点为一个actor，同时需要一些辅助的actor&lt;/li&gt;
&lt;li&gt;系统包含一个主节点，负责复制所有改变到所有副节点。所有节点组成一个分布式数据库，备份节点随时可能加入或掉线&lt;/li&gt;
&lt;li&gt;仅有主节点接受修改事件（插入与删除），所有的节点接受查找事件 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;第一周 Quickcheck&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;实现一个heap&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第二周 Simulations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;电路仿真&lt;ul&gt;
&lt;li&gt;每个器件固定时延，线路没有时延&lt;/li&gt;
&lt;li&gt;或门仿真&lt;/li&gt;
&lt;li&gt;多路分离器仿真&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;流行病仿真&lt;ul&gt;
&lt;li&gt;使用矩阵模拟城市&lt;/li&gt;
&lt;li&gt;飞机使用概率对结果又影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图形显示接口&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第三周 NodeScala&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用future实现一个异步服务器&lt;/li&gt;
&lt;li&gt;可以对系统库中已有的类添加方法&lt;/li&gt;
&lt;li&gt;扩展future对象，并添加取消方法&lt;/li&gt;
&lt;li&gt;实现异步HTTP服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第四周 Wikipedia Suggestions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;开发一个维基百科建议应用的图形界面，允许用户输入字符时实时显示可能的选择&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第五周 Actor Binary Tree&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;实现一个基于actor的二叉树，可以全异步的并行执行&lt;/li&gt;
&lt;li&gt;插入和contains查询都是自顶向下一条路径，remove采用标记的方法&lt;/li&gt;
&lt;li&gt;实现GC方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第六周 Replicated KV Store&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;KV是一个最简单的数据库形式&lt;/li&gt;
&lt;li&gt;本次实现一个分布式有备份的KV存储，分布式系统中的每个节点为一个actor，同时需要一些辅助的actor&lt;/li&gt;
&lt;li&gt;系统包含一个主节点，负责复制所有改变到所有副节点。所有节点组成一个分布式数据库，备份节点随时可能加入或掉线&lt;/li&gt;
&lt;li&gt;仅有主节点接受修改事件（插入与删除），所有的节点接受查找事件，允许副节点给出可能修改过的过期的数据&lt;/li&gt;
&lt;li&gt;比现实系统做的简化如下&lt;ul&gt;
&lt;li&gt;仅主节点会更新数据&lt;/li&gt;
&lt;li&gt;主节点不会宕机&lt;/li&gt;
&lt;li&gt;成员关系由一个可靠的子系统维护&lt;/li&gt;
&lt;li&gt;数据更新速度较慢，不需要因为系统负载过大拒绝请求&lt;/li&gt;
&lt;li&gt;如果拒绝更新后数据会处于可能不一致的状态，后续需要对此key重写以修复&lt;/li&gt;
&lt;li&gt;希望客户端不会在请求处理完之前重用请求的id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统组件&lt;ul&gt;
&lt;li&gt;kv存储包括：主节点，副节点，节点调度器，一致性保持器&lt;/li&gt;
&lt;li&gt;客户端：读取或更新数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读取更新协议：一致性保证&lt;ul&gt;
&lt;li&gt;主副节点保证同一个key的更新保持顺序，不同的key之间不需要&lt;/li&gt;
&lt;li&gt;客户端在不同副节点最后读取结果一致，中间可以不一致&lt;/li&gt;
&lt;li&gt;主节点更新数据后返回ack或者failed，应在至多1s内返回&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20140727如何写出一个较好的快速排序程序</title><link href="http://heloman.github.io/pages/2014/08/20140727ru-he-xie-chu-yi-ge-jiao-hao-de-kuai-su-pai-xu-cheng-xu.html" rel="alternate"></link><published>2014-08-20T22:31:13+08:00</published><updated>2014-08-20T22:31:13+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-20:/pages/2014/08/20140727ru-he-xie-chu-yi-ge-jiao-hao-de-kuai-su-pai-xu-cheng-xu.html</id><summary type="html">&lt;h2&gt;写出一个较好的快速排序程序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;快速排序是常用的排序算法之一，但要想写出一个又快又准的使用程序，就不是那么简单了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;需要注意的事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先要写正确。通常使用递归实现。其递归相当于二叉树展开，因此如果要用迭代实现的话需要使用一个队列来保存后续遍历信息。&lt;/li&gt;
&lt;li&gt;快速排序需要找到一个pivot值，如果顺序选择pivot则易造成N^2的复杂度，如果使用随机数则效果最好，但开销又太大，采取三数中值法比较合适。三数中值法指的是选取第一个值，最后一个值，数组中间的值的中值。有文献表明可以提升5%的运行时间。&lt;/li&gt;
&lt;li&gt;当数组长度较小时，如10个元素以下，最好使用插入排序或者选择排序完成，以防止复杂度常数因子过大或多次函数调用带来的开销。而递归到底层数组长度总是会变小的，因此这么做非常有必要。&lt;/li&gt;
&lt;li&gt;在合并前后两部分数组时，采用两边夹方法，在前后两部分各找到一个大于和小于的值再交换。相比通常情况下找到比pivot小的值就进行交换，能提高运行效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;实现代码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;代码如下。包括插入排序insert_sort，递归函数，三分中值函数三个辅助函数。&lt;/li&gt;
&lt;li&gt;三分中值函数其实采用的是插入排序。通过三次比较，确定中值。&lt;/li&gt;
&lt;li&gt;插值算法使用临时变量tmp避免了大量swap函数调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;iomanip&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cstdlib&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ctime …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;写出一个较好的快速排序程序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;快速排序是常用的排序算法之一，但要想写出一个又快又准的使用程序，就不是那么简单了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;需要注意的事项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;首先要写正确。通常使用递归实现。其递归相当于二叉树展开，因此如果要用迭代实现的话需要使用一个队列来保存后续遍历信息。&lt;/li&gt;
&lt;li&gt;快速排序需要找到一个pivot值，如果顺序选择pivot则易造成N^2的复杂度，如果使用随机数则效果最好，但开销又太大，采取三数中值法比较合适。三数中值法指的是选取第一个值，最后一个值，数组中间的值的中值。有文献表明可以提升5%的运行时间。&lt;/li&gt;
&lt;li&gt;当数组长度较小时，如10个元素以下，最好使用插入排序或者选择排序完成，以防止复杂度常数因子过大或多次函数调用带来的开销。而递归到底层数组长度总是会变小的，因此这么做非常有必要。&lt;/li&gt;
&lt;li&gt;在合并前后两部分数组时，采用两边夹方法，在前后两部分各找到一个大于和小于的值再交换。相比通常情况下找到比pivot小的值就进行交换，能提高运行效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;实现代码&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;代码如下。包括插入排序insert_sort，递归函数，三分中值函数三个辅助函数。&lt;/li&gt;
&lt;li&gt;三分中值函数其实采用的是插入排序。通过三次比较，确定中值。&lt;/li&gt;
&lt;li&gt;插值算法使用临时变量tmp避免了大量swap函数调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;iomanip&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cstdlib&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;inline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;insert_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="c1"&gt;--)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j + 1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j + 1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quick_sort_sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;less&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tnum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;insert_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tnum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tnum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p + i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tnum&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quick_three_partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pivot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;--right;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;quick_sort_sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;quick_sort_sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;quick_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;quick_sort_sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cm"&gt;/*int num_array[n]= {2,1};&lt;/span&gt;
&lt;span class="cm"&gt;    vector&amp;lt;int&amp;gt; num(num_array, num_array + n);*/&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;srand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;quick_sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;


&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;vector is sorted? : &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is_sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140820火车运煤问题</title><link href="http://heloman.github.io/pages/2014/08/20140820huo-che-yun-mei-wen-ti.html" rel="alternate"></link><published>2014-08-20T08:40:58+08:00</published><updated>2014-08-20T08:40:58+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-20:/pages/2014/08/20140820huo-che-yun-mei-wen-ti.html</id><summary type="html">&lt;h1&gt;火车运煤问题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;刚面试问到这个题，可惜一直没有为此类问题准备，差点就回答出来了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;题目内容&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;你是山西的一个煤老板，你在矿区开采了有3000吨煤需要运送到市场上去卖，从你的矿区到市场有1000公里，你手里有一列烧煤的火车，这个火车最多只能装1000吨煤，且其能耗比较大——每一公里需要耗一吨煤。请问，作为一个懂编程的煤老板的你，你会怎么运送才能运最多的煤到集市？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;很显然每次走全程的话是无法到达终点的，更别说剩余部分煤。必然把煤全部运到中间某点，然后再继续运&lt;/li&gt;
&lt;li&gt;假设第一次把煤全部运输到中间某点A，距离为x，那么消耗的煤的数量为5x，因为要往返两次，再单程一次把剩下的1000吨运往A点。&lt;/li&gt;
&lt;li&gt;如果A点剩余煤量3000-5x大于2000，那么下一次假设从A运输到B，距离为y，消耗的煤的数量同样是5y。&lt;/li&gt;
&lt;li&gt;如果A点剩余煤量小于2000，那么从A到B只需往返一次，再单程一次，消耗煤的数量为3y。&lt;/li&gt;
&lt;li&gt;由此可见，从一点到另外一点距离为s，中途不折返，如果初始煤量在3000~2000之间，需要消耗5s吨煤&lt;/li&gt;
&lt;li&gt;同理得到，s距离不折返初始煤量在2000~1000之间，需要消耗3s吨煤&lt;/li&gt;
&lt;li&gt;s距离不折返初始煤量在1000~0之间，需要消耗s吨煤&lt;/li&gt;
&lt;li&gt;那么最终的策略为每次选择单位消耗最小的方式运输，第一次消耗5x，第二次消耗3y，第三次消耗z …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;火车运煤问题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;刚面试问到这个题，可惜一直没有为此类问题准备，差点就回答出来了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;题目内容&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;你是山西的一个煤老板，你在矿区开采了有3000吨煤需要运送到市场上去卖，从你的矿区到市场有1000公里，你手里有一列烧煤的火车，这个火车最多只能装1000吨煤，且其能耗比较大——每一公里需要耗一吨煤。请问，作为一个懂编程的煤老板的你，你会怎么运送才能运最多的煤到集市？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;很显然每次走全程的话是无法到达终点的，更别说剩余部分煤。必然把煤全部运到中间某点，然后再继续运&lt;/li&gt;
&lt;li&gt;假设第一次把煤全部运输到中间某点A，距离为x，那么消耗的煤的数量为5x，因为要往返两次，再单程一次把剩下的1000吨运往A点。&lt;/li&gt;
&lt;li&gt;如果A点剩余煤量3000-5x大于2000，那么下一次假设从A运输到B，距离为y，消耗的煤的数量同样是5y。&lt;/li&gt;
&lt;li&gt;如果A点剩余煤量小于2000，那么从A到B只需往返一次，再单程一次，消耗煤的数量为3y。&lt;/li&gt;
&lt;li&gt;由此可见，从一点到另外一点距离为s，中途不折返，如果初始煤量在3000~2000之间，需要消耗5s吨煤&lt;/li&gt;
&lt;li&gt;同理得到，s距离不折返初始煤量在2000~1000之间，需要消耗3s吨煤&lt;/li&gt;
&lt;li&gt;s距离不折返初始煤量在1000~0之间，需要消耗s吨煤&lt;/li&gt;
&lt;li&gt;那么最终的策略为每次选择单位消耗最小的方式运输，第一次消耗5x，第二次消耗3y，第三次消耗z。满足第一次消耗之后剩余2000吨，第二次消耗之后剩余1000吨&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;结果&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;x=200。转为单位消耗3的方式运输，y=333。转为单位消耗1的方式运输，z=（1000-x-y）= 467。剩余533吨煤&lt;/li&gt;
&lt;li&gt;如果换一种思路，要求n&lt;em&gt;1000吨煤最多可以运输多远，那么有n=1时为1000&lt;/em&gt;1，n=2时为1000&lt;em&gt;（1+1/3）。继续下去得到传输距离为1000&lt;/em&gt;(1+1/3+1/5+...+1/(2*n-1))。级数不收敛，表明只要煤足够多，能用运输到足够远&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;
　　
　　&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140811thttpd源码解析 定时器模块</title><link href="http://heloman.github.io/pages/2014/08/20140811thttpdyuan-ma-jie-xi-ding-shi-qi-mo-kuai.html" rel="alternate"></link><published>2014-08-11T12:51:21+08:00</published><updated>2014-08-11T12:51:21+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-11:/pages/2014/08/20140811thttpdyuan-ma-jie-xi-ding-shi-qi-mo-kuai.html</id><summary type="html">&lt;h1&gt;thttpd源码解析 定时器模块&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;thttpd是非常轻量级的http服务器，可执行文件仅50kB。名称中的第一个&lt;code&gt;t&lt;/code&gt;表示tiny, turbo, 或throttling&lt;/li&gt;
&lt;li&gt;与lighttpd、memcached、redis相比非常小巧，仅有不到8k行，而后三者大小分别为：60k,13k,86k&lt;/li&gt;
&lt;li&gt;支持HTTP/1.1和CGI；采用IO复用实现，单线程，可移植；实现了基于URL的文件流量限制功能&lt;/li&gt;
&lt;li&gt;特别适用于大量静态数据访问的场景，如图片存储&lt;/li&gt;
&lt;li&gt;2004年已经停止维护，有一个关于X-Forwarded-For HTTP header的bug。后来出现stthhpd基于此项目&lt;/li&gt;
&lt;li&gt;性能比较参考&lt;a href="http://www.acme.com/software/thttpd/benchmarks.html"&gt;对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本文针对timer模块进行分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;timer模块&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;包括timer.h,timer.c两个文件&lt;/li&gt;
&lt;li&gt;使用全局开放式散列表，默认大小67，每个hash节点上的值按照时间顺序排列&lt;/li&gt;
&lt;li&gt;ClientData定义如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;typedef union {&lt;/span&gt;
&lt;span class="err"&gt;    void* p;&lt;/span&gt;
&lt;span class="err"&gt;    int i;&lt;/span&gt;
&lt;span class="err"&gt;    long …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;thttpd源码解析 定时器模块&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;thttpd是非常轻量级的http服务器，可执行文件仅50kB。名称中的第一个&lt;code&gt;t&lt;/code&gt;表示tiny, turbo, 或throttling&lt;/li&gt;
&lt;li&gt;与lighttpd、memcached、redis相比非常小巧，仅有不到8k行，而后三者大小分别为：60k,13k,86k&lt;/li&gt;
&lt;li&gt;支持HTTP/1.1和CGI；采用IO复用实现，单线程，可移植；实现了基于URL的文件流量限制功能&lt;/li&gt;
&lt;li&gt;特别适用于大量静态数据访问的场景，如图片存储&lt;/li&gt;
&lt;li&gt;2004年已经停止维护，有一个关于X-Forwarded-For HTTP header的bug。后来出现stthhpd基于此项目&lt;/li&gt;
&lt;li&gt;性能比较参考&lt;a href="http://www.acme.com/software/thttpd/benchmarks.html"&gt;对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本文针对timer模块进行分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;timer模块&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;包括timer.h,timer.c两个文件&lt;/li&gt;
&lt;li&gt;使用全局开放式散列表，默认大小67，每个hash节点上的值按照时间顺序排列&lt;/li&gt;
&lt;li&gt;ClientData定义如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;typedef union {&lt;/span&gt;
&lt;span class="err"&gt;    void* p;&lt;/span&gt;
&lt;span class="err"&gt;    int i;&lt;/span&gt;
&lt;span class="err"&gt;    long l;&lt;/span&gt;
&lt;span class="err"&gt;    } ClientData;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;TimerProc类型声明如下：&lt;code&gt;void TimerProc( ClientData client_data, struct timeval* nowP )&lt;/code&gt;。函数将在定时器超时时调用&lt;/li&gt;
&lt;li&gt;Timer结构定义如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;typedef struct TimerStruct {&lt;/span&gt;
&lt;span class="err"&gt;    TimerProc* timer_proc;&lt;/span&gt;
&lt;span class="err"&gt;    ClientData client_data;&lt;/span&gt;
&lt;span class="err"&gt;    long msecs;&lt;/span&gt;
&lt;span class="err"&gt;    int periodic;&lt;/span&gt;
&lt;span class="err"&gt;    struct timeval time;&lt;/span&gt;
&lt;span class="err"&gt;    struct TimerStruct* prev;&lt;/span&gt;
&lt;span class="err"&gt;    struct TimerStruct* next;&lt;/span&gt;
&lt;span class="err"&gt;    int hash;&lt;/span&gt;
&lt;span class="err"&gt;    } Timer;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;void tmr_init( void )&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;初始化定时器包，即定时器hash表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Timer* tmr_create( struct timeval* nowP, TimerProc* timer_proc, ClientData client_data, long msecs, int periodic )&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;创建一个定时器，指定是一次性/周期性，加入散列表&lt;/li&gt;
&lt;li&gt;定时器的时间设置为nowP的时刻加上msecs毫秒之后，若nowP为0，设置为当前时刻加上msecs毫秒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeval* tmr_timeout( struct timeval* nowP )&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;返回到下次触发的时间间隔&lt;/li&gt;
&lt;li&gt;调用tmr_mstimeout得到&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmr_mstimeout( struct timeval* nowP )&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;返回到下次触发时间间隔的毫秒数，即从nowP开始，经过多少毫秒hash表中会有一个定时器触发&lt;/li&gt;
&lt;li&gt;因为hash表中的每个链表都是有序的，遍历一次hash表即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void tmr_run( struct timeval* nowP )&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;遍历hash表，如果定时器没有超时，调用timer_proc&lt;/li&gt;
&lt;li&gt;如果定时器是周期性的，则调用后时间后延msecs，如果是非周期性的，则调用tmr_cancel去除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void tmr_reset( struct timeval* nowP, Timer* timer )&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;重新开始运行定时器，时钟设置为当前时间nowP加上定时时长&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void tmr_cancel( Timer* timer )&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;释放定时器，由于tmr_run中对所有非周期性定时器都已经调用tmr_cancel，用户无需再自己对非周期定时器调用&lt;/li&gt;
&lt;li&gt;将timers加入free_timers链表，节省free和malloc的开销，相当于一个缓冲池&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void tmr_cleanup( void )&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;清空定时器包，释放所有无用的内存：free_timers链表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void tmr_destroy( void )&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;调用tmr_cancel释放所有定时器，为退出做准备，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void tmr_logstats( long secs )&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;生成调试log信息，记录当前已分配、使用中、free的定时器个数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作hash表的静态函数&lt;ul&gt;
&lt;li&gt;hash：由&lt;code&gt;(time.tv_sec ^ time.tv_usec) % 67&lt;/code&gt;得到hash值&lt;/li&gt;
&lt;li&gt;l_add:插入一个定时器&lt;/li&gt;
&lt;li&gt;l_remove:移除一个定时器&lt;/li&gt;
&lt;li&gt;re_sort:定时器结构体含有之前的hash值，如果定时器的值改变，移除后重新计算hash，插入到正确的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;timer模块的使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在main函数中使用类timer模块&lt;/li&gt;
&lt;li&gt;调用tmr_init初始化&lt;/li&gt;
&lt;li&gt;创建周期为OCCASIONAL_TIME的周期定时器，回调函数为occasional&lt;/li&gt;
&lt;li&gt;创建周期为5s的周期定时器，回调函数为idle&lt;/li&gt;
&lt;li&gt;创建周期为THROTTLE_TIME的周期定时器，回调update_throttles&lt;/li&gt;
&lt;li&gt;创建周期为STATS_TIME的周期定时器，回调show_stats&lt;/li&gt;
&lt;li&gt;在主要事件处理循环中：&lt;ul&gt;
&lt;li&gt;如果没有socket发生事件，调用一次tmr_run，continue&lt;/li&gt;
&lt;li&gt;如果有新连接，continue，以保证新连接优先得到处理&lt;/li&gt;
&lt;li&gt;如果有事件发生，则处理事件&lt;/li&gt;
&lt;li&gt;运行一次tmr_run&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;occasional&lt;ul&gt;
&lt;li&gt;调用mmc_cleanup&lt;/li&gt;
&lt;li&gt;调用tmr_cleanup，清除无用的定时器内存池&lt;/li&gt;
&lt;li&gt;设置watchdog_flag  = 1，使watchdog知道程序仍在运行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;idle&lt;/li&gt;
&lt;li&gt;update_throttles 更新流量控制&lt;/li&gt;
&lt;li&gt;show_stats&lt;ul&gt;
&lt;li&gt;调用函数logstats，记录信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;
　　
　　&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>《算法之道》精华</title><link href="http://heloman.github.io/pages/2014/08/suan-fa-zhi-dao-jing-hua.html" rel="alternate"></link><published>2014-08-09T13:00:17+08:00</published><updated>2014-08-09T13:00:17+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-09:/pages/2014/08/suan-fa-zhi-dao-jing-hua.html</id><summary type="html">&lt;h1&gt;《算法之道》精华&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;本书作者邹恒明，作者另有一本书《数据结构之弦》，以及《操作系统之哲学原理》都是很好的书&lt;/li&gt;
&lt;li&gt;这本书可以算得上是深入浅出，文笔很好，作者添加了很多自己的思考&lt;/li&gt;
&lt;li&gt;本文仅包括算法设计部分，算法分析略去，并没有严格按照章节顺序来记录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;附录 算法随想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有人喜欢遍历，希望踏遍千山万水，人生丰富多彩；有人一生贪婪，眼界不宽，及时行乐；有人注定穷搜，辛辛苦苦，收获有限；有人善用时空均衡，用最少的时间办最多的事情，十分精明；有人会分治，再难的问题也能解决；有人动态规划，积少成多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第三章 分治与递归&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;生活中的例子：天平秤球以辨明次品；乘法运算；世界杯晋级赛；秦国合纵连横&lt;/li&gt;
&lt;li&gt;分治策略步骤：1，将问题分为若干小问题；2，递归解决这些子问题；3，合并子问题的解答，得到大问题的解&lt;/li&gt;
&lt;li&gt;标准分治策略的定义里面包含递归：&lt;code&gt;T(n …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;《算法之道》精华&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;本书作者邹恒明，作者另有一本书《数据结构之弦》，以及《操作系统之哲学原理》都是很好的书&lt;/li&gt;
&lt;li&gt;这本书可以算得上是深入浅出，文笔很好，作者添加了很多自己的思考&lt;/li&gt;
&lt;li&gt;本文仅包括算法设计部分，算法分析略去，并没有严格按照章节顺序来记录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;附录 算法随想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有人喜欢遍历，希望踏遍千山万水，人生丰富多彩；有人一生贪婪，眼界不宽，及时行乐；有人注定穷搜，辛辛苦苦，收获有限；有人善用时空均衡，用最少的时间办最多的事情，十分精明；有人会分治，再难的问题也能解决；有人动态规划，积少成多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第三章 分治与递归&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;生活中的例子：天平秤球以辨明次品；乘法运算；世界杯晋级赛；秦国合纵连横&lt;/li&gt;
&lt;li&gt;分治策略步骤：1，将问题分为若干小问题；2，递归解决这些子问题；3，合并子问题的解答，得到大问题的解&lt;/li&gt;
&lt;li&gt;标准分治策略的定义里面包含递归：&lt;code&gt;T(n) = aT(n/b) + f(n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;递归式复杂度大师解法：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;T(n) &lt;/span&gt;
&lt;span class="err"&gt;= aT(n/b) + f(n) &lt;/span&gt;
&lt;span class="err"&gt;= a^2T(n/b^2) + af(n/b) + f(n)&lt;/span&gt;
&lt;span class="err"&gt;= a^(log_b(n)) T(1) + a^(log_b(n-1) f(n/b^(log_b(n-1))) +...+a^2f(n/b^2) + af(n/b) + f(n)&lt;/span&gt;
&lt;span class="err"&gt;= O(n^log_b(a)) + sum(a^j f(n/b^j))|(j = 0...log_b(n-1))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;前项为递归树最后一层节点数，后项为递归树各层分治过程分解与合并的代价&lt;/li&gt;
&lt;li&gt;f(n) &amp;lt; n^log_b(a)时，T(n) = O(n^log_b(a))&lt;/li&gt;
&lt;li&gt;f(n) &amp;gt; n^log_b(a) :  T(n) = O(f(n))&lt;/li&gt;
&lt;li&gt;算法题中常见分治例子：乘方运算、矩阵乘法、斐波那契数列的矩阵乘方解法、VLSI布线&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第四章 动态规划&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;动态规划是一种更有针对性的分治，分解得到的小问题很多重复，保存已经计算得到的结果可以免去重复计算&lt;/li&gt;
&lt;li&gt;动态规划每一步做出一个最优选择，该最优选择与子问题的最优解组合得到大问题的最优解&lt;/li&gt;
&lt;li&gt;具体步骤：&lt;ol&gt;
&lt;li&gt;证明问题的解决方案中包括一个选择，选择后剩下一个或多个子问题&lt;/li&gt;
&lt;li&gt;设计递归描述方式，得到递归方程&lt;/li&gt;
&lt;li&gt;证明对大问题的最优解包括对所有子问题的最优解&lt;/li&gt;
&lt;li&gt;证明子问题之间重叠&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;两个原则：最优子结构，重叠子问题&lt;/li&gt;
&lt;li&gt;动态规划的时间复杂度：全部子问题数量x选择成本&lt;/li&gt;
&lt;li&gt;算法题中常见动态规划例子：最长公共子序列（最长递增、最长递减子序列，编辑距离）、最优二叉搜索树&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第五章 贪婪选择思想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;动态规划在做出选择之前，将所有选择的结果做了比较，而如果选择的时候不经过比较，而是直接选择局部最优，就是贪婪&lt;/li&gt;
&lt;li&gt;贪婪的目的只是找出一种可行解，在一定情况下找出的是最优解&lt;/li&gt;
&lt;li&gt;贪婪与动态规划相同，都是一种分治策略。但与动态规划不同，贪婪将大问题分解为一个，而不是多个子问题&lt;/li&gt;
&lt;li&gt;具体步骤：&lt;ol&gt;
&lt;li&gt;将原问题表述为一个做出一个选择，然后剩下唯一一个子问题的形式&lt;/li&gt;
&lt;li&gt;证明所有的最优选择里面总有一个是贪婪选择&lt;/li&gt;
&lt;li&gt;证明贪婪选择加上对剩下子问题的最优解导致大问题的最优解&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;贪婪的两个原则：最优子结构（大问题的最优解包括小问题的最优解），贪婪选择属性&lt;/li&gt;
&lt;li&gt;贪婪选择属性：每个小问题可以贪婪选择获得&lt;/li&gt;
&lt;li&gt;算法题中常见贪婪例子：&lt;ul&gt;
&lt;li&gt;背包问题：财宝是否可以分割、每件财宝是否可以重复拿四个版本&lt;/li&gt;
&lt;li&gt;教室课程规划&lt;/li&gt;
&lt;li&gt;最小生成树&lt;ul&gt;
&lt;li&gt;Kruskal算法，每次加入一个不形成环的最小的边，复杂度为O(E log(V))&lt;/li&gt;
&lt;li&gt;Prime算法：每次加入距离最近的点，并降距，复杂度为O(V^2)，采用堆实现，可以达到O(E log(V))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;霍夫曼编码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第六章 随机化思想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;蒙特卡洛算法：大概率输出正确答案，复杂度固定&lt;/li&gt;
&lt;li&gt;常见随机化算法例子：&lt;ul&gt;
&lt;li&gt;素性测试：根据费马小定理，若p为素数，则&lt;code&gt;(a^p - a) % p == 0&lt;/code&gt;；如果测试一百次都成立，则为合数的概率只有2^(-100)&lt;/li&gt;
&lt;li&gt;矩阵乘积结果验证：取随机二进制01矢量z，有zAB = z(AB)&lt;/li&gt;
&lt;li&gt;线性时间最小生成树算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十章 排序与次序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;插入排序&lt;ul&gt;
&lt;li&gt;从无序部分抽取一张插入有序部分&lt;/li&gt;
&lt;li&gt;为原地排序，无需占用临时存储空间&lt;/li&gt;
&lt;li&gt;最优情况下为O(n)，平均O(n^2)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;折半插入排序&lt;ul&gt;
&lt;li&gt;插入时使用二分查找&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;归并排序&lt;ul&gt;
&lt;li&gt;分治，从中间分解，分别排序后进行仔细的合并&lt;/li&gt;
&lt;li&gt;异地排序，需要占用额外空间&lt;/li&gt;
&lt;li&gt;n&amp;gt;=30时性能比插入排序更好。复杂度固定为O(nlog(n))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快排&lt;ul&gt;
&lt;li&gt;分治，复杂的部分在于分解，而归并复杂在于合并&lt;/li&gt;
&lt;li&gt;原地排序&lt;/li&gt;
&lt;li&gt;最坏情况为O(n^2)，但只要不是每次都是最坏，复杂度就不是n^2，具有韧性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;任何基于比较的排序，决策树高度至少为nlog(n)&lt;/li&gt;
&lt;li&gt;计数排序&lt;ul&gt;
&lt;li&gt;元素值范围必须有限&lt;/li&gt;
&lt;li&gt;空间复杂度高&lt;/li&gt;
&lt;li&gt;O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基数排序&lt;ul&gt;
&lt;li&gt;从最低位到最高位排序，每一位排序都采用稳定排序，如计数排序&lt;/li&gt;
&lt;li&gt;一位排序应该选择log(n)个比特，使整体成本最低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;桶排序&lt;ul&gt;
&lt;li&gt;把n元素按值分到n个桶里，每个桶内部进行插入排序，将各桶首位相连&lt;/li&gt;
&lt;li&gt;元素应该是均匀分布&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快速次序选择：求第K大的数&lt;ul&gt;
&lt;li&gt;使用快排的partition&lt;/li&gt;
&lt;li&gt;最差O(n^2)，平均O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线性最差快速次序选择&lt;ul&gt;
&lt;li&gt;将元素每5个一组，分别取中值。在n/5个中值里面找到中值，作为partition的pivot&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为什么&lt;/strong&gt;*不每3个一组？&lt;/li&gt;
&lt;li&gt;保证pivot左边右边至少3n/10个元素&lt;/li&gt;
&lt;li&gt;最差O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十一章 搜索与散列&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;顺序搜索&lt;ul&gt;
&lt;li&gt;在序列里面如果搜索频率从头到尾指数递减，则为O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;折半搜索&lt;ul&gt;
&lt;li&gt;对于有序序列，为O(logn)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常数搜索：散列搜索&lt;ul&gt;
&lt;li&gt;直接散列：非常简单，不会发生碰撞，空间浪费大&lt;/li&gt;
&lt;li&gt;除法（模除法）散列&lt;ul&gt;
&lt;li&gt;元素对散列表大小m取模得到&lt;/li&gt;
&lt;li&gt;m必须为素数，否则造成不均匀散射。比如m包含因子d，而大部分元素对d余数相等&lt;/li&gt;
&lt;li&gt;m不能靠近2的幂。如m为2的幂，散列结果将不依赖元素的所有位。靠近也不行，&lt;strong&gt;为什么&lt;/strong&gt;？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;乘法散列&lt;ul&gt;
&lt;li&gt;h(k) = (A * k ) % 2^r &amp;gt;&amp;gt; (w - r)，w为计算机字宽，A为2^(w-1)与2^w之间的一个奇数&lt;/li&gt;
&lt;li&gt;乘方取中法：乘方n次（常取n=2），取中间r位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开放寻址散列：散列碰撞时纵深扩展，添加一个链表&lt;ul&gt;
&lt;li&gt;平均搜索时间为O(1+a)，a为加载因子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;封闭寻址散列：散列碰撞时为元素找到另一个位置&lt;ul&gt;
&lt;li&gt;找另一个位置的操作称为探寻&lt;/li&gt;
&lt;li&gt;线性探寻&lt;ul&gt;
&lt;li&gt;&lt;code&gt;h(k,i) = (h'(k) + i) % m&lt;/code&gt;，h'(k)为家位&lt;/li&gt;
&lt;li&gt;向单方向寻找未被占用的位置&lt;/li&gt;
&lt;li&gt;易出现顶级聚集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非线性探寻&lt;ul&gt;
&lt;li&gt;平方探寻 &lt;code&gt;h(k,i) = (h'(k) + c1 * i + c2 * i^2) % m&lt;/code&gt; 易出现次级聚集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;双重散列探寻&lt;ul&gt;
&lt;li&gt;使用两个散列函数h1、h2来构造新散列函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h(k,i) = (h1(k) + i * h2(k) ) mod m&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;伪随机探寻&lt;ul&gt;
&lt;li&gt;使用伪随机序列&lt;/li&gt;
&lt;li&gt;存在次级聚集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不成功搜索的探寻次数期望为&lt;code&gt;1/(1-a)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;成功搜索探寻次数最多为&lt;code&gt;1 / a * ln( 1/(1-a))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;封闭散列不能删除元素，可以放标记解决。如果插入相比搜索非常稀疏，则可以通过重新散列解决空位问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;随机化散列&lt;ul&gt;
&lt;li&gt;找到一组散列函数，每次随机选择一个不同的散列函数&lt;/li&gt;
&lt;li&gt;用于避免单个散列函数极端情况下聚集效应严重&lt;/li&gt;
&lt;li&gt;全域散列&lt;ul&gt;
&lt;li&gt;一组H个散列函数，将任意两个不同的元素映射到同一位置的函数个数为H/m&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完美散列&lt;ul&gt;
&lt;li&gt;n个元素，构造m=O(n)大小的散列表，使搜索最坏达到O(1)&lt;/li&gt;
&lt;li&gt;采用双层散列，第一层大小n，第二层每个表的大小为落到第一层位置i上的元素个数的平方&lt;/li&gt;
&lt;li&gt;空间消耗为O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十二章 最短路径&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果图中有负环，则不存在最短路径&lt;/li&gt;
&lt;li&gt;单源多点最短路径 &lt;ul&gt;
&lt;li&gt;Dijkstra算法&lt;ul&gt;
&lt;li&gt;贪婪算法，要求不存在负路径&lt;/li&gt;
&lt;li&gt;最优子结构：最短路径里的每一段都是两点之间的最短路径&lt;/li&gt;
&lt;li&gt;贪婪选择属性：路径向外延伸的下一个节点就是离源点最近的节点&lt;/li&gt;
&lt;li&gt;每次选取离源点最近的节点，更新所有与此节点相邻节点的距离&lt;/li&gt;
&lt;li&gt;时间复杂度为O(V^2)，采用堆实现，可以达到O(E log(V))。与Prim算法相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bellman-Ford算法&lt;ul&gt;
&lt;li&gt;可以应对负权重&lt;/li&gt;
&lt;li&gt;进行V-1轮降距，每次更新图中所有边&lt;/li&gt;
&lt;li&gt;复杂度为O(VE)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BFS&lt;ul&gt;
&lt;li&gt;各边权重相等的情况&lt;/li&gt;
&lt;li&gt;O(V+E)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多源多点最短路径&lt;ul&gt;
&lt;li&gt;Floyd-Warshall算法&lt;ul&gt;
&lt;li&gt;动态规划算法&lt;/li&gt;
&lt;li&gt;子问题为从i到j，中间结点只属于集合1...k的最短路径长度&lt;/li&gt;
&lt;li&gt;c_ijk = min{c_ij(k-1), c_ik(k-1) + ckj(k-1)}|k&lt;/li&gt;
&lt;li&gt;复杂度O(n^3)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jonhson算法&lt;ul&gt;
&lt;li&gt;等效变换为无负权重的图，使用Dijkstra算法&lt;/li&gt;
&lt;li&gt;添加一个节点s，到所有点路径长度为0，运行Bellman-Ford算法，对节点赋值&lt;/li&gt;
&lt;li&gt;对每个节点运行Dijkstra算法&lt;/li&gt;
&lt;li&gt;复杂度主要是Dijkstra算法运算，为O(VE + V^2 log(V))&lt;/li&gt;
&lt;li&gt;若Bellman-Ford算法报告有负环存在，不能使用此方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十三章 易解与难解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;易解指的是多项式问题，难解指的是指数级问题&lt;/li&gt;
&lt;li&gt;决策问题&lt;ul&gt;
&lt;li&gt;需要输出答案是/否&lt;/li&gt;
&lt;li&gt;若回答为是，通常需要一个证人来证明。对一个潜在证人，证明之后即为真证人&lt;/li&gt;
&lt;li&gt;优化问题和决策问题之间可以相互转化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;P类问题&lt;ul&gt;
&lt;li&gt;确定性多项式时间可解&lt;/li&gt;
&lt;li&gt;对于一个决策问题，输入的大小为n，能在n的多项式时间内解决，正确输出是/否&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NP类问题&lt;ul&gt;
&lt;li&gt;非确定性多项式时间可解&lt;/li&gt;
&lt;li&gt;对于一个决策问题，大小为n的潜在证人，能在n的多项式时间内解决，正确输出此证人是否为真&lt;/li&gt;
&lt;li&gt;P类问题指的是能否多项式时间给出答案，NP类问题指的是能否在多项式时间内判断一个潜在答案是否正确&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;（确定性）图灵机&lt;ul&gt;
&lt;li&gt;图灵机为一个状态机，根据当前状态、下一个输入字符确定输出、磁头移动方向、下一个状态&lt;/li&gt;
&lt;li&gt;任一个问题、算法都能表述为一个字符串，因此图灵机可以解决很多问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非确定性图灵机&lt;ul&gt;
&lt;li&gt;与确定性图灵机相比，给定状态与输入可以有多种选择&lt;/li&gt;
&lt;li&gt;能够同时进入所有状态路径，且能做出最好的选择以达到接受状态&lt;/li&gt;
&lt;li&gt;非确定性算法：在非确定性图灵机上运行的算法&lt;/li&gt;
&lt;li&gt;NP问题的另一个定义：使用非确定性算法，在多项式时间内解决&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;P与NP的关系&lt;ul&gt;
&lt;li&gt;所有P类问题都是NP的&lt;/li&gt;
&lt;li&gt;所有NP不一定是P，直觉如此，但无法证明&lt;/li&gt;
&lt;li&gt;部分NP为P，目前已经找到多项式解法，目前没有找到多项式解法的NP问题称为&lt;strong&gt;NP-hard&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十四章 NP完全问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果NP里每一个问题都可以多项式时间规约到S，则S称为NP难（严谨的定义）。S不比NP里面任一问题容易&lt;/li&gt;
&lt;li&gt;如果问题S既是NP难，又是NP里的问题，则称为NP完全问题&lt;/li&gt;
&lt;li&gt;NP完全的属性&lt;ul&gt;
&lt;li&gt;非确定性算法多项式时间可解&lt;/li&gt;
&lt;li&gt;完全：解决一个就解决了所有NP完全问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若找到一个NP完全问题的确定性解法，就证明了NP=P&lt;/li&gt;
&lt;li&gt;若找到一个NP难优化问题的多项式时间解，就证明了NP=P&lt;/li&gt;
&lt;li&gt;NP完全的意义：若能证明一个问题为NP完全问题，则无需再寻找精确解，找到启发性的近似解即可&lt;/li&gt;
&lt;li&gt;常见NP完全问题&lt;ul&gt;
&lt;li&gt;3-SAT&lt;/li&gt;
&lt;li&gt;整数分割&lt;/li&gt;
&lt;li&gt;顶点覆盖&lt;/li&gt;
&lt;li&gt;汉密尔顿回路 可规约至旅行商问题&lt;/li&gt;
&lt;li&gt;完全子图&lt;/li&gt;
&lt;li&gt;图的着色&lt;/li&gt;
&lt;li&gt;旅行商&lt;/li&gt;
&lt;li&gt;整数规划属于NP难问题，但不是NP问题，因此不是NP完全问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十五章 无解与近似&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NP完全只是NP里最难的问题，目前没有找到多项式解法&lt;/li&gt;
&lt;li&gt;难解问题不存在多项式解法&lt;/li&gt;
&lt;li&gt;不可决定问题：是无解的，即使是指数级也无济于事。但又潜在证人&lt;/li&gt;
&lt;li&gt;对于NP完全和难解问题，可以尝试找出次优解&lt;ul&gt;
&lt;li&gt;智能穷举&lt;ul&gt;
&lt;li&gt;能找的最优解&lt;/li&gt;
&lt;li&gt;两种剪枝策略：回溯法、分支限界&lt;/li&gt;
&lt;li&gt;如八皇后问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;近似算法&lt;ul&gt;
&lt;li&gt;能找到近似的解&lt;/li&gt;
&lt;li&gt;如聚类问题、启发式搜索、模拟退火、遗传算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;本地搜索&lt;ul&gt;
&lt;li&gt;一种贪婪策略&lt;/li&gt;
&lt;li&gt;不断向更优的可行解移动，可能仅能找到局部最优解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20140809《算法之道》精华 难解问题部分</title><link href="http://heloman.github.io/pages/2014/08/20140809suan-fa-zhi-dao-jing-hua-nan-jie-wen-ti-bu-fen.html" rel="alternate"></link><published>2014-08-09T13:00:16+08:00</published><updated>2014-08-09T13:00:16+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-09:/pages/2014/08/20140809suan-fa-zhi-dao-jing-hua-nan-jie-wen-ti-bu-fen.html</id><summary type="html">&lt;h1&gt;《算法之道》精华 难解问题部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;本书作者邹恒明，作者另有一本书《数据结构之弦》，以及《操作系统之哲学原理》都是很好的书&lt;/li&gt;
&lt;li&gt;这本书可以算得上是深入浅出，文笔很好，作者添加了很多自己的思考&lt;/li&gt;
&lt;li&gt;本文包括难解问题部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十三章 易解与难解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;易解指的是多项式问题，难解指的是指数级问题&lt;/li&gt;
&lt;li&gt;决策问题&lt;ul&gt;
&lt;li&gt;需要输出答案是/否&lt;/li&gt;
&lt;li&gt;若回答为是，通常需要一个证人来证明。对一个潜在证人，证明之后即为真证人&lt;/li&gt;
&lt;li&gt;优化问题和决策问题之间可以相互转化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;P类问题&lt;ul&gt;
&lt;li&gt;确定性多项式时间可解&lt;/li&gt;
&lt;li&gt;对于一个决策问题，输入的大小为n，能在n的多项式时间内解决，正确输出是/否&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NP类问题&lt;ul&gt;
&lt;li&gt;非确定性多项式时间可解&lt;/li&gt;
&lt;li&gt;对于一个决策问题，大小为n的潜在证人，能在n的多项式时间内解决，正确输出此证人是否为真&lt;/li&gt;
&lt;li&gt;P类问题指的是能否多项式时间给出答案，NP类问题指的是能否在多项式时间内判断一个潜在答案是否正确&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;（确定性）图灵机&lt;ul&gt;
&lt;li&gt;图灵机为一个状态机，根据当前状态、下一个输入字符确定输出、磁头移动方向、下一个状态&lt;/li&gt;
&lt;li&gt;任一个问题、算法都能表述为一个字符串，因此图灵机可以解决很多问题 …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;《算法之道》精华 难解问题部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;本书作者邹恒明，作者另有一本书《数据结构之弦》，以及《操作系统之哲学原理》都是很好的书&lt;/li&gt;
&lt;li&gt;这本书可以算得上是深入浅出，文笔很好，作者添加了很多自己的思考&lt;/li&gt;
&lt;li&gt;本文包括难解问题部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十三章 易解与难解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;易解指的是多项式问题，难解指的是指数级问题&lt;/li&gt;
&lt;li&gt;决策问题&lt;ul&gt;
&lt;li&gt;需要输出答案是/否&lt;/li&gt;
&lt;li&gt;若回答为是，通常需要一个证人来证明。对一个潜在证人，证明之后即为真证人&lt;/li&gt;
&lt;li&gt;优化问题和决策问题之间可以相互转化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;P类问题&lt;ul&gt;
&lt;li&gt;确定性多项式时间可解&lt;/li&gt;
&lt;li&gt;对于一个决策问题，输入的大小为n，能在n的多项式时间内解决，正确输出是/否&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NP类问题&lt;ul&gt;
&lt;li&gt;非确定性多项式时间可解&lt;/li&gt;
&lt;li&gt;对于一个决策问题，大小为n的潜在证人，能在n的多项式时间内解决，正确输出此证人是否为真&lt;/li&gt;
&lt;li&gt;P类问题指的是能否多项式时间给出答案，NP类问题指的是能否在多项式时间内判断一个潜在答案是否正确&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;（确定性）图灵机&lt;ul&gt;
&lt;li&gt;图灵机为一个状态机，根据当前状态、下一个输入字符确定输出、磁头移动方向、下一个状态&lt;/li&gt;
&lt;li&gt;任一个问题、算法都能表述为一个字符串，因此图灵机可以解决很多问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非确定性图灵机&lt;ul&gt;
&lt;li&gt;与确定性图灵机相比，给定状态与输入可以有多种选择&lt;/li&gt;
&lt;li&gt;能够同时进入所有状态路径，且能做出最好的选择以达到接受状态&lt;/li&gt;
&lt;li&gt;非确定性算法：在非确定性图灵机上运行的算法&lt;/li&gt;
&lt;li&gt;NP问题的另一个定义：使用非确定性算法，在多项式时间内解决&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;P与NP的关系&lt;ul&gt;
&lt;li&gt;所有P类问题都是NP的&lt;/li&gt;
&lt;li&gt;所有NP不一定是P，直觉如此，但无法证明&lt;/li&gt;
&lt;li&gt;部分NP为P，目前已经找到多项式解法，目前没有找到多项式解法的NP问题称为&lt;strong&gt;NP-hard&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十四章 NP完全问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果NP里每一个问题都可以多项式时间规约到S，则S称为NP难（严谨的定义）。S不比NP里面任一问题容易&lt;/li&gt;
&lt;li&gt;如果问题S既是NP难，又是NP里的问题，则称为NP完全问题&lt;/li&gt;
&lt;li&gt;NP完全的属性&lt;ul&gt;
&lt;li&gt;非确定性算法多项式时间可解&lt;/li&gt;
&lt;li&gt;完全：解决一个就解决了所有NP完全问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;若找到一个NP完全问题的确定性解法，就证明了NP=P&lt;/li&gt;
&lt;li&gt;若找到一个NP难优化问题的多项式时间解，就证明了NP=P&lt;/li&gt;
&lt;li&gt;NP完全的意义：若能证明一个问题为NP完全问题，则无需再寻找精确解，找到启发性的近似解即可&lt;/li&gt;
&lt;li&gt;常见NP完全问题&lt;ul&gt;
&lt;li&gt;3-SAT&lt;/li&gt;
&lt;li&gt;整数分割&lt;/li&gt;
&lt;li&gt;顶点覆盖&lt;/li&gt;
&lt;li&gt;汉密尔顿回路 可规约至旅行商问题&lt;/li&gt;
&lt;li&gt;完全子图&lt;/li&gt;
&lt;li&gt;图的着色&lt;/li&gt;
&lt;li&gt;旅行商&lt;/li&gt;
&lt;li&gt;整数规划属于NP难问题，但不是NP问题，因此不是NP完全问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十五章 无解与近似&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;NP完全只是NP里最难的问题，目前没有找到多项式解法&lt;/li&gt;
&lt;li&gt;难解问题不存在多项式解法&lt;/li&gt;
&lt;li&gt;不可决定问题：是无解的，即使是指数级也无济于事。但又潜在证人&lt;/li&gt;
&lt;li&gt;对于NP完全和难解问题，可以尝试找出次优解&lt;ul&gt;
&lt;li&gt;智能穷举&lt;ul&gt;
&lt;li&gt;能找的最优解&lt;/li&gt;
&lt;li&gt;两种剪枝策略：回溯法、分支限界&lt;/li&gt;
&lt;li&gt;如八皇后问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;近似算法&lt;ul&gt;
&lt;li&gt;能找到近似的解&lt;/li&gt;
&lt;li&gt;如聚类问题、启发式搜索、模拟退火、遗传算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;本地搜索&lt;ul&gt;
&lt;li&gt;一种贪婪策略&lt;/li&gt;
&lt;li&gt;不断向更优的可行解移动，可能仅能找到局部最优解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;
　　
　　&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140809《算法之道》精华 经典算法部分</title><link href="http://heloman.github.io/pages/2014/08/20140809suan-fa-zhi-dao-jing-hua-jing-dian-suan-fa-bu-fen.html" rel="alternate"></link><published>2014-08-09T13:00:15+08:00</published><updated>2014-08-09T13:00:15+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-09:/pages/2014/08/20140809suan-fa-zhi-dao-jing-hua-jing-dian-suan-fa-bu-fen.html</id><summary type="html">&lt;h1&gt;《算法之道》精华 经典算法部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;本书作者邹恒明，作者另有一本书《数据结构之弦》，以及《操作系统之哲学原理》都是很好的书&lt;/li&gt;
&lt;li&gt;这本书可以算得上是深入浅出，文笔很好，作者添加了很多自己的思考&lt;/li&gt;
&lt;li&gt;本文包括经典算法部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十章 排序与次序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;插入排序&lt;ul&gt;
&lt;li&gt;从无序部分抽取一张插入有序部分&lt;/li&gt;
&lt;li&gt;为原地排序，无需占用临时存储空间&lt;/li&gt;
&lt;li&gt;最优情况下为O(n)，平均O(n^2)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;折半插入排序&lt;ul&gt;
&lt;li&gt;插入时使用二分查找&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;归并排序&lt;ul&gt;
&lt;li&gt;分治，从中间分解，分别排序后进行仔细的合并&lt;/li&gt;
&lt;li&gt;异地排序，需要占用额外空间&lt;/li&gt;
&lt;li&gt;n&amp;gt;=30时性能比插入排序更好。复杂度固定为O(nlog(n))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快排&lt;ul&gt;
&lt;li&gt;分治，复杂的部分在于分解，而归并复杂在于合并&lt;/li&gt;
&lt;li&gt;原地排序&lt;/li&gt;
&lt;li&gt;最坏情况为O(n^2)，但只要不是每次都是最坏，复杂度就不是n^2，具有韧性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;任何基于比较的排序 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;《算法之道》精华 经典算法部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;本书作者邹恒明，作者另有一本书《数据结构之弦》，以及《操作系统之哲学原理》都是很好的书&lt;/li&gt;
&lt;li&gt;这本书可以算得上是深入浅出，文笔很好，作者添加了很多自己的思考&lt;/li&gt;
&lt;li&gt;本文包括经典算法部分&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十章 排序与次序&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;插入排序&lt;ul&gt;
&lt;li&gt;从无序部分抽取一张插入有序部分&lt;/li&gt;
&lt;li&gt;为原地排序，无需占用临时存储空间&lt;/li&gt;
&lt;li&gt;最优情况下为O(n)，平均O(n^2)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;折半插入排序&lt;ul&gt;
&lt;li&gt;插入时使用二分查找&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;归并排序&lt;ul&gt;
&lt;li&gt;分治，从中间分解，分别排序后进行仔细的合并&lt;/li&gt;
&lt;li&gt;异地排序，需要占用额外空间&lt;/li&gt;
&lt;li&gt;n&amp;gt;=30时性能比插入排序更好。复杂度固定为O(nlog(n))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快排&lt;ul&gt;
&lt;li&gt;分治，复杂的部分在于分解，而归并复杂在于合并&lt;/li&gt;
&lt;li&gt;原地排序&lt;/li&gt;
&lt;li&gt;最坏情况为O(n^2)，但只要不是每次都是最坏，复杂度就不是n^2，具有韧性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;任何基于比较的排序，决策树高度至少为nlog(n)&lt;/li&gt;
&lt;li&gt;计数排序&lt;ul&gt;
&lt;li&gt;元素值范围必须有限&lt;/li&gt;
&lt;li&gt;空间复杂度高&lt;/li&gt;
&lt;li&gt;O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基数排序&lt;ul&gt;
&lt;li&gt;从最低位到最高位排序，每一位排序都采用稳定排序，如计数排序&lt;/li&gt;
&lt;li&gt;一位排序应该选择log(n)个比特，使整体成本最低&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;桶排序&lt;ul&gt;
&lt;li&gt;把n元素按值分到n个桶里，每个桶内部进行插入排序，将各桶首位相连&lt;/li&gt;
&lt;li&gt;元素应该是均匀分布&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快速次序选择：求第K大的数&lt;ul&gt;
&lt;li&gt;使用快排的partition&lt;/li&gt;
&lt;li&gt;最差O(n^2)，平均O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;线性最差快速次序选择&lt;ul&gt;
&lt;li&gt;将元素每5个一组，分别取中值。在n/5个中值里面找到中值，作为partition的pivot&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;为什么&lt;/strong&gt;*不每3个一组？&lt;/li&gt;
&lt;li&gt;保证pivot左边右边至少3n/10个元素&lt;/li&gt;
&lt;li&gt;最差O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十一章 搜索与散列&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;顺序搜索&lt;ul&gt;
&lt;li&gt;在序列里面如果搜索频率从头到尾指数递减，则为O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;折半搜索&lt;ul&gt;
&lt;li&gt;对于有序序列，为O(logn)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常数搜索：散列搜索&lt;ul&gt;
&lt;li&gt;直接散列：非常简单，不会发生碰撞，空间浪费大&lt;/li&gt;
&lt;li&gt;除法（模除法）散列&lt;ul&gt;
&lt;li&gt;元素对散列表大小m取模得到&lt;/li&gt;
&lt;li&gt;m必须为素数，否则造成不均匀散射。比如m包含因子d，而大部分元素对d余数相等&lt;/li&gt;
&lt;li&gt;m不能靠近2的幂。如m为2的幂，散列结果将不依赖元素的所有位。靠近也不行，&lt;strong&gt;为什么&lt;/strong&gt;？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;乘法散列&lt;ul&gt;
&lt;li&gt;h(k) = (A * k ) % 2^r &amp;gt;&amp;gt; (w - r)，w为计算机字宽，A为2^(w-1)与2^w之间的一个奇数&lt;/li&gt;
&lt;li&gt;乘方取中法：乘方n次（常取n=2），取中间r位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;开放寻址散列：散列碰撞时纵深扩展，添加一个链表&lt;ul&gt;
&lt;li&gt;平均搜索时间为O(1+a)，a为加载因子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;封闭寻址散列：散列碰撞时为元素找到另一个位置&lt;ul&gt;
&lt;li&gt;找另一个位置的操作称为探寻&lt;/li&gt;
&lt;li&gt;线性探寻&lt;ul&gt;
&lt;li&gt;&lt;code&gt;h(k,i) = (h'(k) + i) % m&lt;/code&gt;，h'(k)为家位&lt;/li&gt;
&lt;li&gt;向单方向寻找未被占用的位置&lt;/li&gt;
&lt;li&gt;易出现顶级聚集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;非线性探寻&lt;ul&gt;
&lt;li&gt;平方探寻 &lt;code&gt;h(k,i) = (h'(k) + c1 * i + c2 * i^2) % m&lt;/code&gt; 易出现次级聚集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;双重散列探寻&lt;ul&gt;
&lt;li&gt;使用两个散列函数h1、h2来构造新散列函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h(k,i) = (h1(k) + i * h2(k) ) mod m&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;伪随机探寻&lt;ul&gt;
&lt;li&gt;使用伪随机序列&lt;/li&gt;
&lt;li&gt;存在次级聚集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;不成功搜索的探寻次数期望为&lt;code&gt;1/(1-a)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;成功搜索探寻次数最多为&lt;code&gt;1 / a * ln( 1/(1-a))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;封闭散列不能删除元素，可以放标记解决。如果插入相比搜索非常稀疏，则可以通过重新散列解决空位问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;随机化散列&lt;ul&gt;
&lt;li&gt;找到一组散列函数，每次随机选择一个不同的散列函数&lt;/li&gt;
&lt;li&gt;用于避免单个散列函数极端情况下聚集效应严重&lt;/li&gt;
&lt;li&gt;全域散列&lt;ul&gt;
&lt;li&gt;一组H个散列函数，将任意两个不同的元素映射到同一位置的函数个数为H/m&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完美散列&lt;ul&gt;
&lt;li&gt;n个元素，构造m=O(n)大小的散列表，使搜索最坏达到O(1)&lt;/li&gt;
&lt;li&gt;采用双层散列，第一层大小n，第二层每个表的大小为落到第一层位置i上的元素个数的平方&lt;/li&gt;
&lt;li&gt;空间消耗为O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十二章 最短路径&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果图中有负环，则不存在最短路径&lt;/li&gt;
&lt;li&gt;单源多点最短路径 &lt;ul&gt;
&lt;li&gt;Dijkstra算法&lt;ul&gt;
&lt;li&gt;贪婪算法，要求不存在负路径&lt;/li&gt;
&lt;li&gt;最优子结构：最短路径里的每一段都是两点之间的最短路径&lt;/li&gt;
&lt;li&gt;贪婪选择属性：路径向外延伸的下一个节点就是离源点最近的节点&lt;/li&gt;
&lt;li&gt;每次选取离源点最近的节点，更新所有与此节点相邻节点的距离&lt;/li&gt;
&lt;li&gt;时间复杂度为O(V^2)，采用堆实现，可以达到O(E log(V))。与Prim算法相同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bellman-Ford算法&lt;ul&gt;
&lt;li&gt;可以应对负权重&lt;/li&gt;
&lt;li&gt;进行V-1轮降距，每次更新图中所有边&lt;/li&gt;
&lt;li&gt;复杂度为O(VE)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BFS&lt;ul&gt;
&lt;li&gt;各边权重相等的情况&lt;/li&gt;
&lt;li&gt;O(V+E)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多源多点最短路径&lt;ul&gt;
&lt;li&gt;Floyd-Warshall算法&lt;ul&gt;
&lt;li&gt;动态规划算法&lt;/li&gt;
&lt;li&gt;子问题为从i到j，中间结点只属于集合1...k的最短路径长度&lt;/li&gt;
&lt;li&gt;c_ijk = min{c_ij(k-1), c_ik(k-1) + ckj(k-1)}|k&lt;/li&gt;
&lt;li&gt;复杂度O(n^3)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Jonhson算法&lt;ul&gt;
&lt;li&gt;等效变换为无负权重的图，使用Dijkstra算法&lt;/li&gt;
&lt;li&gt;添加一个节点s，到所有点路径长度为0，运行Bellman-Ford算法，对节点赋值&lt;/li&gt;
&lt;li&gt;对每个节点运行Dijkstra算法&lt;/li&gt;
&lt;li&gt;复杂度主要是Dijkstra算法运算，为O(VE + V^2 log(V))&lt;/li&gt;
&lt;li&gt;若Bellman-Ford算法报告有负环存在，不能使用此方法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;
　　
　　&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140809《算法之道》精华 算法设计部分</title><link href="http://heloman.github.io/pages/2014/08/20140809suan-fa-zhi-dao-jing-hua-suan-fa-she-ji-bu-fen.html" rel="alternate"></link><published>2014-08-09T13:00:12+08:00</published><updated>2014-08-09T13:00:12+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-09:/pages/2014/08/20140809suan-fa-zhi-dao-jing-hua-suan-fa-she-ji-bu-fen.html</id><summary type="html">&lt;h1&gt;《算法之道》精华 算法设计部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;本书作者邹恒明，作者另有一本书《数据结构之弦》，以及《操作系统之哲学原理》都是很好的书&lt;/li&gt;
&lt;li&gt;这本书可以算得上是深入浅出，文笔很好，作者添加了很多自己的思考&lt;/li&gt;
&lt;li&gt;本文仅包括算法设计部分，算法分析略去，并没有严格按照章节顺序来记录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;附录 算法随想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有人喜欢遍历，希望踏遍千山万水，人生丰富多彩；有人一生贪婪，眼界不宽，及时行乐；有人注定穷搜，辛辛苦苦，收获有限；有人善用时空均衡，用最少的时间办最多的事情，十分精明；有人会分治，再难的问题也能解决；有人动态规划，积少成多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第三章 分治与递归&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;生活中的例子：天平秤球以辨明次品；乘法运算；世界杯晋级赛；秦国合纵连横&lt;/li&gt;
&lt;li&gt;分治策略步骤：1，将问题分为若干小问题；2，递归解决这些子问题；3，合并子问题的解答，得到大问题的解&lt;/li&gt;
&lt;li&gt;标准分治策略的定义里面包含递归：&lt;code&gt;T …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;《算法之道》精华 算法设计部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;本书作者邹恒明，作者另有一本书《数据结构之弦》，以及《操作系统之哲学原理》都是很好的书&lt;/li&gt;
&lt;li&gt;这本书可以算得上是深入浅出，文笔很好，作者添加了很多自己的思考&lt;/li&gt;
&lt;li&gt;本文仅包括算法设计部分，算法分析略去，并没有严格按照章节顺序来记录&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;附录 算法随想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有人喜欢遍历，希望踏遍千山万水，人生丰富多彩；有人一生贪婪，眼界不宽，及时行乐；有人注定穷搜，辛辛苦苦，收获有限；有人善用时空均衡，用最少的时间办最多的事情，十分精明；有人会分治，再难的问题也能解决；有人动态规划，积少成多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第三章 分治与递归&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;生活中的例子：天平秤球以辨明次品；乘法运算；世界杯晋级赛；秦国合纵连横&lt;/li&gt;
&lt;li&gt;分治策略步骤：1，将问题分为若干小问题；2，递归解决这些子问题；3，合并子问题的解答，得到大问题的解&lt;/li&gt;
&lt;li&gt;标准分治策略的定义里面包含递归：&lt;code&gt;T(n) = aT(n/b) + f(n)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;递归式复杂度大师解法：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;T(n) &lt;/span&gt;
&lt;span class="err"&gt;= aT(n/b) + f(n) &lt;/span&gt;
&lt;span class="err"&gt;= a^2T(n/b^2) + af(n/b) + f(n)&lt;/span&gt;
&lt;span class="err"&gt;= a^(log_b(n)) T(1) + a^(log_b(n-1) f(n/b^(log_b(n-1))) +...+a^2f(n/b^2) + af(n/b) + f(n)&lt;/span&gt;
&lt;span class="err"&gt;= O(n^log_b(a)) + sum(a^j f(n/b^j))|(j = 0...log_b(n-1))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;前项为递归树最后一层节点数，后项为递归树各层分治过程分解与合并的代价&lt;/li&gt;
&lt;li&gt;f(n) &amp;lt; n^log_b(a)时，T(n) = O(n^log_b(a))&lt;/li&gt;
&lt;li&gt;f(n) &amp;gt; n^log_b(a) :  T(n) = O(f(n))&lt;/li&gt;
&lt;li&gt;算法题中常见分治例子：乘方运算、矩阵乘法、斐波那契数列的矩阵乘方解法、VLSI布线&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第四章 动态规划&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;动态规划是一种更有针对性的分治，分解得到的小问题很多重复，保存已经计算得到的结果可以免去重复计算&lt;/li&gt;
&lt;li&gt;动态规划每一步做出一个最优选择，该最优选择与子问题的最优解组合得到大问题的最优解&lt;/li&gt;
&lt;li&gt;具体步骤：&lt;ol&gt;
&lt;li&gt;证明问题的解决方案中包括一个选择，选择后剩下一个或多个子问题&lt;/li&gt;
&lt;li&gt;设计递归描述方式，得到递归方程&lt;/li&gt;
&lt;li&gt;证明对大问题的最优解包括对所有子问题的最优解&lt;/li&gt;
&lt;li&gt;证明子问题之间重叠&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;两个原则：最优子结构，重叠子问题&lt;/li&gt;
&lt;li&gt;动态规划的时间复杂度：全部子问题数量x选择成本&lt;/li&gt;
&lt;li&gt;算法题中常见动态规划例子：最长公共子序列（最长递增、最长递减子序列，编辑距离）、最优二叉搜索树&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第五章 贪婪选择思想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;动态规划在做出选择之前，将所有选择的结果做了比较，而如果选择的时候不经过比较，而是直接选择局部最优，就是贪婪&lt;/li&gt;
&lt;li&gt;贪婪的目的只是找出一种可行解，在一定情况下找出的是最优解&lt;/li&gt;
&lt;li&gt;贪婪与动态规划相同，都是一种分治策略。但与动态规划不同，贪婪将大问题分解为一个，而不是多个子问题&lt;/li&gt;
&lt;li&gt;具体步骤：&lt;ol&gt;
&lt;li&gt;将原问题表述为一个做出一个选择，然后剩下唯一一个子问题的形式&lt;/li&gt;
&lt;li&gt;证明所有的最优选择里面总有一个是贪婪选择&lt;/li&gt;
&lt;li&gt;证明贪婪选择加上对剩下子问题的最优解导致大问题的最优解&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;贪婪的两个原则：最优子结构（大问题的最优解包括小问题的最优解），贪婪选择属性&lt;/li&gt;
&lt;li&gt;贪婪选择属性：每个小问题可以贪婪选择获得&lt;/li&gt;
&lt;li&gt;算法题中常见贪婪例子：&lt;ul&gt;
&lt;li&gt;背包问题：财宝是否可以分割、每件财宝是否可以重复拿四个版本&lt;/li&gt;
&lt;li&gt;教室课程规划&lt;/li&gt;
&lt;li&gt;最小生成树&lt;ul&gt;
&lt;li&gt;Kruskal算法，每次加入一个不形成环的最小的边，复杂度为O(E log(V))&lt;/li&gt;
&lt;li&gt;Prime算法：每次加入距离最近的点，并降距，复杂度为O(V^2)，采用堆实现，可以达到O(E log(V))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;霍夫曼编码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第六章 随机化思想&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;蒙特卡洛算法：大概率输出正确答案，复杂度固定&lt;/li&gt;
&lt;li&gt;常见随机化算法例子：&lt;ul&gt;
&lt;li&gt;素性测试：根据费马小定理，若p为素数，则&lt;code&gt;(a^p - a) % p == 0&lt;/code&gt;；如果测试一百次都成立，则为合数的概率只有2^(-100)&lt;/li&gt;
&lt;li&gt;矩阵乘积结果验证：取随机二进制01矢量z，有zAB = z(AB)&lt;/li&gt;
&lt;li&gt;线性时间最小生成树算法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;
　　
　　&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140807《程序员面试宝典》精华 底层部分</title><link href="http://heloman.github.io/pages/2014/08/20140807cheng-xu-yuan-mian-shi-bao-dian-jing-hua-di-ceng-bu-fen.html" rel="alternate"></link><published>2014-08-07T07:33:54+08:00</published><updated>2014-08-07T07:33:54+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-07:/pages/2014/08/20140807cheng-xu-yuan-mian-shi-bao-dian-jing-hua-di-ceng-bu-fen.html</id><summary type="html">&lt;h1&gt;《程序员面试宝典》精华 底层部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;正所谓取其精华，去其糟粕。本文谨记录下《程序员面试宝典》一些关键的知识点、易错点，对于一些虽然重要但书中没有解释清楚的地方不做记录。书里是没有糟粕的，只是指不那么重要，或者比较简单的地方略过而已，并不是说书写的不好。希望以后回顾时无需再看此书，只看保留在文中的精华即可。&lt;/li&gt;
&lt;li&gt;本文专注位运算、操作系统、数据库、网络部分，包括第十二章以后的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十二章 位运算与嵌入式编程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;12.1 printf的%f说明符可以输出float和double型，float型会被提升为double型。&lt;code&gt;printf("%f",5);printf("%d",5.01)&lt;/code&gt;，前者会从存放5的位置取double型的8个字节，内存越界，并按bit解释，后者会按照整数来解释5.01的比特，输出为0，一个大整数。&lt;strong&gt;真的是越界&lt;/strong&gt;？&lt;/li&gt;
&lt;li&gt;12.1 &lt;code&gt;struct a{int z:33 …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;《程序员面试宝典》精华 底层部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;正所谓取其精华，去其糟粕。本文谨记录下《程序员面试宝典》一些关键的知识点、易错点，对于一些虽然重要但书中没有解释清楚的地方不做记录。书里是没有糟粕的，只是指不那么重要，或者比较简单的地方略过而已，并不是说书写的不好。希望以后回顾时无需再看此书，只看保留在文中的精华即可。&lt;/li&gt;
&lt;li&gt;本文专注位运算、操作系统、数据库、网络部分，包括第十二章以后的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十二章 位运算与嵌入式编程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;12.1 printf的%f说明符可以输出float和double型，float型会被提升为double型。&lt;code&gt;printf("%f",5);printf("%d",5.01)&lt;/code&gt;，前者会从存放5的位置取double型的8个字节，内存越界，并按bit解释，后者会按照整数来解释5.01的比特，输出为0，一个大整数。&lt;strong&gt;真的是越界&lt;/strong&gt;？&lt;/li&gt;
&lt;li&gt;12.1 &lt;code&gt;struct a{int z:33;};&lt;/code&gt;报错，因为z为int型，不可能有33位&lt;/li&gt;
&lt;li&gt;12.1 dynamic_cast,static_cast,reinterpret_cast的区别，没有讲清楚&lt;/li&gt;
&lt;li&gt;12.2 ISR终端服务程序不应该有参数和返回值，且不能使用不可重入的函数&lt;/li&gt;
&lt;li&gt;12.2 volatile的意思是易变的，指的是它可能在程序控制的范围之外意外发生变化，防止编译器的优化。volatile变量可以声明为const，表示是只读的&lt;/li&gt;
&lt;li&gt;12.2 const的意思是只读的&lt;/li&gt;
&lt;li&gt;12.2 &lt;code&gt;malloc(0)&lt;/code&gt;能得到一个合法的指针，而不是空指针，对其调用strlen和sizeof结果为0和4&lt;/li&gt;
&lt;li&gt;12.2 对于结构体&lt;code&gt;struct bit{int b1:5;int :2;int b2:2;};&lt;/code&gt;赋值后，取b1,b2的值，该如何解析？&lt;/li&gt;
&lt;li&gt;12.3 static的作用包括哪些？&lt;ul&gt;
&lt;li&gt;函数内的static变量中下次调用时保持值不变&lt;/li&gt;
&lt;li&gt;源代码文件（模块）内的static全局变量和函数的作用范围限制在模块内&lt;/li&gt;
&lt;li&gt;类的static成员变量对所有对象共享，static成员函数只能访问static成员变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十六章 操作系统&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;16.1 进程间如何通信：信号，信号量，消息队列，共享内存&lt;/li&gt;
&lt;li&gt;16.1 死锁的必要条件：互斥，请求与保持，不可剥夺，循环等待。后三种条件可以破坏&lt;/li&gt;
&lt;li&gt;16.2 进程与线程的区别：&lt;ul&gt;
&lt;li&gt;进程是程序的一次执行，线程为进程中执行的一段程序&lt;/li&gt;
&lt;li&gt;进程直接是独立的，而同一进程的线程共享内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十七章 数据库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;17.1 事务：作为单个逻辑工作单元执行的一系列操作，不可分割。具有原子性、一致性、独立性、持久性&lt;/li&gt;
&lt;li&gt;17.1 聚集索引与非聚集索引的区别：&lt;ul&gt;
&lt;li&gt;聚集索引的顺序就是数据的物理存储顺序，而非聚集索引顺序与物理存储顺序无关&lt;/li&gt;
&lt;li&gt;每个表只能有一个聚集索引，聚集索引对于范围查询的列非常有效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;17.2 表ppp里面num最小的数&lt;ul&gt;
&lt;li&gt;不使用min：&lt;code&gt;select top 1 num from ppp order by num&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用min：&lt;code&gt;select * from ppp where num = (select Min(num) from ppp)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;17.2 从表中取出第5行到第七行的数据的语句&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十八章 计算机网络&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;18.1 OSI七层模型及其作用：&lt;ul&gt;
&lt;li&gt;物理层 传输原始比特流&lt;/li&gt;
&lt;li&gt;数据链路层 &lt;/li&gt;
&lt;li&gt;网络层 路由选择&lt;/li&gt;
&lt;li&gt;传输层&lt;/li&gt;
&lt;li&gt;会话层&lt;/li&gt;
&lt;li&gt;表示层&lt;/li&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;18.2 TCP与UDP的区别&lt;ul&gt;
&lt;li&gt;TCP是传输控制协议，提供面向连接、可靠的字节流服务。提供超时重发、数据检验、流量控制等功能&lt;/li&gt;
&lt;li&gt;UDP是用户数据报协议，是面向数据报的传输层协议，不提供可靠性。但由于无需建立连接、超时重发，传输速度快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;18.3 socket编程流程&lt;ul&gt;
&lt;li&gt;服务器端：socket bind accept  sned recv close&lt;/li&gt;
&lt;li&gt;客户端： socket connect send recv close&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;18.3 常用端口号：0到1023范围内，21为FTP，25为SMTP，80为HTTP，23为telnet&lt;/li&gt;
&lt;li&gt;18.4 TCP的三次握手与四次挥手&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;
　　
　　&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140807《程序员面试宝典》精华 面向对象部分</title><link href="http://heloman.github.io/pages/2014/08/20140807cheng-xu-yuan-mian-shi-bao-dian-jing-hua-mian-xiang-dui-xiang-bu-fen.html" rel="alternate"></link><published>2014-08-07T00:00:36+08:00</published><updated>2014-08-07T00:00:36+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-07:/pages/2014/08/20140807cheng-xu-yuan-mian-shi-bao-dian-jing-hua-mian-xiang-dui-xiang-bu-fen.html</id><summary type="html">&lt;h1&gt;《程序员面试宝典》精华 面向对象部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;正所谓取其精华，去其糟粕。本文谨记录下《程序员面试宝典》一些关键的知识点、易错点，对于一些虽然重要但书中没有解释清楚的地方不做记录。书里是没有糟粕的，只是指不那么重要，或者比较简单的地方略过而已，并不是说书写的不好。希望以后回顾时无需再看此书，只看保留在文中的精华即可。&lt;/li&gt;
&lt;li&gt;文中有少许bug，亦摘录在此。&lt;/li&gt;
&lt;li&gt;本文专注面向对象部分，包括第十章到第十一章的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十章 面向对象&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;10.2 类与结构体的区别：都能继承、拥有析构等成员函数，唯一的区别是struct成员默认为public，而class默认为private。C++是为了兼容C代码才保留struct关键字&lt;/li&gt;
&lt;li&gt;10.3 &lt;code&gt;class B{...}; B b(); b.f();&lt;/code&gt;是错误的，b声明为了一个函数&lt;/li&gt;
&lt;li&gt;10.3 静态成员变量必须显式初始化，例如&lt;code&gt;int A::i  0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;10 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;《程序员面试宝典》精华 面向对象部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;正所谓取其精华，去其糟粕。本文谨记录下《程序员面试宝典》一些关键的知识点、易错点，对于一些虽然重要但书中没有解释清楚的地方不做记录。书里是没有糟粕的，只是指不那么重要，或者比较简单的地方略过而已，并不是说书写的不好。希望以后回顾时无需再看此书，只看保留在文中的精华即可。&lt;/li&gt;
&lt;li&gt;文中有少许bug，亦摘录在此。&lt;/li&gt;
&lt;li&gt;本文专注面向对象部分，包括第十章到第十一章的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十章 面向对象&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;10.2 类与结构体的区别：都能继承、拥有析构等成员函数，唯一的区别是struct成员默认为public，而class默认为private。C++是为了兼容C代码才保留struct关键字&lt;/li&gt;
&lt;li&gt;10.3 &lt;code&gt;class B{...}; B b(); b.f();&lt;/code&gt;是错误的，b声明为了一个函数&lt;/li&gt;
&lt;li&gt;10.3 静态成员变量必须显式初始化，例如&lt;code&gt;int A::i  0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;10.3 成员变量初始化顺序与初始化列表顺序无关，与变量声明顺序有关&lt;/li&gt;
&lt;li&gt;10.3 常数(cosnt)成员变量必须中构造函数的初始化列表里面初始化，或者声明为&lt;code&gt;static const&lt;/code&gt;成员&lt;/li&gt;
&lt;li&gt;10.4 把成员函数声明为虚函数造成调用开销增大，为什么常常把基类的析构函数声明为虚函数：多态情况下常常把派生类对象的指针赋给基类指针，那么使用虚函数保证delete时能调用派生类对象的析构函数，而不造成内存泄露&lt;/li&gt;
&lt;li&gt;10.4 构造函数为什么不能声明为virtual：虚调用是来调用一个只知道接口而不知道其对象类型的成员函数，实例化对象时必须知道对象的准确类型，因此构造函数不能为virtual（存疑，不够clear）&lt;/li&gt;
&lt;li&gt;10.4 函数f返回一个对象时，使用&lt;code&gt;A t = f()&lt;/code&gt;，会调用拷贝构造函数。即函数参数和返回值都是对象时，都会调用一次拷贝构造函数&lt;/li&gt;
&lt;li&gt;10.4 含有单个参数的构造函数会定义一个从参数类型到类的隐式类型转换，使用explicit关键字可以避免此转换&lt;/li&gt;
&lt;li&gt;10.5 函数参数常声明为const，这是因为const变量不能随意转换为非const，反之则可&lt;/li&gt;
&lt;li&gt;10.5 要求类的每个对象有唯一id，需要自定义拷贝构造函数避免重复&lt;/li&gt;
&lt;li&gt;10.5 如果类包含动态分配的指针，那么需要定义拷贝构造函数和赋值函数&lt;/li&gt;
&lt;li&gt;10.6 什么是多态？&lt;ul&gt;
&lt;li&gt;概念：封装、继承、多态是OO的三大基本概念。多态指的是允许将子类类型赋值给父类指针，而父类指针可以通过统一的接口对所有子类对象进行操作&lt;/li&gt;
&lt;li&gt;作用与目的：封装为了隐藏实现细节，以及数据类型和函数的统一，模块化；继承是为了方便扩展已有的代码模块；两者均可实现代码重用，而多态是为了实现接口重用&lt;/li&gt;
&lt;li&gt;实现方法：虚函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;10.6 重写与重载，前者override是指子类重新定义父类的虚函数，后者overload是指同时存在多个参数列表不同的同名函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十一章 继承与接口&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;11.1 如果显式调用虚函数，则虚调用机制失效，如&lt;code&gt;class B::public A{}; B b; b.A::f();&lt;/code&gt;，类f为虚函数，但此时显式调用A中的f&lt;/li&gt;
&lt;li&gt;11.2 三种继承方式的区别&lt;ul&gt;
&lt;li&gt;public继承：基类的public和protected成员对基类保持原有状态&lt;ul&gt;
&lt;li&gt;基类成员对派生类的可见性：派生类（的成员函数）可以访问基类的public和protected成员&lt;/li&gt;
&lt;li&gt;基类成员对派生类对象的可见性：（通过）派生类的对象（指例如&lt;code&gt;a.f()的方式&lt;/code&gt;）可以访问基类的public成员&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;private继承：将基类的public和protected成员当成派生类的private成员，且不能被派生类的子类访问&lt;ul&gt;
&lt;li&gt;基类成员对派生类的可见性：派生类（的成员函数）可以访问基类的public和protected成员&lt;/li&gt;
&lt;li&gt;基类成员对派生类对象的可见性：（通过）派生类的对象不可以访问基类的任何成员,因此基类的成员无法再向下继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;protected继承：将基类的public和protected成员当成派生类的protected成员，且不能被派生类的子类访问&lt;ul&gt;
&lt;li&gt;基类成员对派生类的可见性：派生类（的成员函数）可以访问基类的public和protected成员&lt;/li&gt;
&lt;li&gt;基类成员对派生类对象的可见性：（通过）派生类的对象不可以访问基类的任何成员,因此基类的成员无法再向下继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关键差别在于通过派生类对象可以访问基类的哪些成员，以及派生类的子类能否访问派生类的成员&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;11.2 三种成员属性的区别：基类的private成员对派生类屏蔽，protected成员使派生类可以访问，基类仅有public成员可以通过基类的对象访问&lt;/li&gt;
&lt;li&gt;11.2 虚继承是为了解决多重继承中的菱形继承冲突，派生类中会添加一个指向基类虚函数表的指针&lt;ul&gt;
&lt;li&gt;例如，C、B虚继承自A，D继承自B、C，则D中共有1个A&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;11.4 Java中使用接口替代多重继承，C++可以使用抽象类模拟接口&lt;/li&gt;
&lt;li&gt;11.4 C继承自A，B，pC指向C对象，pB把pC转换为指向B的指针，则&lt;code&gt;pC  == pB&lt;/code&gt;，这里发生从C的指针到B的指针的隐式转换，书中说反了，bug&lt;/li&gt;
&lt;li&gt;11.5 类的继承默认为private，通常需要加public关键字&lt;/li&gt;
&lt;li&gt;11.6 如何防止一个类实例化：使用带有纯虚函数的抽象类，或者把构造函数声明为private&lt;/li&gt;
&lt;li&gt;11.7 RTTI的缺点：除了运行开销外，使程序变得不确定，缺乏扩展性&lt;/li&gt;
&lt;li&gt;11.7 类型转换运算符重载，无返回值无参数，以目标类型为函数名，如：&lt;code&gt;operator char*()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;11.8 dynamic_cast如果转换失败返回0&lt;/li&gt;
&lt;li&gt;11.8 typeid返回值为对type_info常量对象的引用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;
　　
　　&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>《程序员面试宝典》精华</title><link href="http://heloman.github.io/pages/2014/08/cheng-xu-yuan-mian-shi-bao-dian-jing-hua.html" rel="alternate"></link><published>2014-08-06T20:54:52+08:00</published><updated>2014-08-06T20:54:52+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-06:/pages/2014/08/cheng-xu-yuan-mian-shi-bao-dian-jing-hua.html</id><summary type="html">&lt;h1&gt;《程序员面试宝典》精华&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;正所谓取其精华，去其糟粕。本文谨记录下《程序员面试宝典》一些关键的知识点、易错点，对于一些虽然重要但书中没有解释清楚的地方不做记录。当然这里的糟粕只是指不那么重要，或者比较简单，并不是说书写的不好。希望以后回顾时无需再看此书，只看保留在文中的精华即可。&lt;/li&gt;
&lt;li&gt;文中有少许bug，亦摘录在此。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第五章 语言细节&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;5.1 &lt;code&gt;y = z = 5&lt;/code&gt;，等号先计算右边，返回值是赋值后的左边的变量值&lt;/li&gt;
&lt;li&gt;5.1 printf函数中的表达式从右向左压栈，应该先计算右方的值&lt;/li&gt;
&lt;li&gt;5.4 float型1.0f在内存中表示为：0x3f 80 00 00&lt;/li&gt;
&lt;li&gt;5.5 出现int常数的表达式中的变量通常都要提升至int型&lt;/li&gt;
&lt;li&gt;5.5 赋值运算符默认从右向左结合，也就是先计算右方的值&lt;/li&gt;
&lt;li&gt;5.5 (x&amp;amp;y) + ((x^y …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;《程序员面试宝典》精华&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;正所谓取其精华，去其糟粕。本文谨记录下《程序员面试宝典》一些关键的知识点、易错点，对于一些虽然重要但书中没有解释清楚的地方不做记录。当然这里的糟粕只是指不那么重要，或者比较简单，并不是说书写的不好。希望以后回顾时无需再看此书，只看保留在文中的精华即可。&lt;/li&gt;
&lt;li&gt;文中有少许bug，亦摘录在此。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第五章 语言细节&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;5.1 &lt;code&gt;y = z = 5&lt;/code&gt;，等号先计算右边，返回值是赋值后的左边的变量值&lt;/li&gt;
&lt;li&gt;5.1 printf函数中的表达式从右向左压栈，应该先计算右方的值&lt;/li&gt;
&lt;li&gt;5.4 float型1.0f在内存中表示为：0x3f 80 00 00&lt;/li&gt;
&lt;li&gt;5.5 出现int常数的表达式中的变量通常都要提升至int型&lt;/li&gt;
&lt;li&gt;5.5 赋值运算符默认从右向左结合，也就是先计算右方的值&lt;/li&gt;
&lt;li&gt;5.5 (x&amp;amp;y) + ((x^y)&amp;gt;&amp;gt;1)效果是取二者的平均数&lt;/li&gt;
&lt;li&gt;5.6 不用判断和switch语句求a、b中的较大的一个：((a + b) + abs(a - b)) / 2&lt;/li&gt;
&lt;li&gt;5.7 &lt;code&gt;extern "C"&lt;/code&gt;的用法：函数声明前添加，解决C/C++编译器的名字包装的不同问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第六章 预处理、const和sizeof&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;6.1 求结构体中某成员的偏移量：&lt;code&gt;#define FIND(struc, e) (size_t)&amp;amp;(((struc *)0)-&amp;gt;e)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;6.2 C语言中，&lt;code&gt;const n = 10; char carray[n]&lt;/code&gt;是错误的，因为C编译器不能把const看成编译期的常量。但实验得出是正确的，bug&lt;/li&gt;
&lt;li&gt;6.3 C++中给类成员变量添加mutable修饰符，就可以使用const函数修改&lt;/li&gt;
&lt;li&gt;6.3 结构体对齐原则：结构体长度一定是最长数据元素整数倍，但如果大于处理器位数，则以处理器位数为对齐单位。CPU数据对齐原则是数据的内存地址必须是该数据长度的整数倍，以提高运行速度&lt;/li&gt;
&lt;li&gt;6.3 sizeof(string) == 4&lt;/li&gt;
&lt;li&gt;6.3 空类以及（多重）继承的空类大小都为1，但虚继承的类含有虚表指针，大小为4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第七章 指针与引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;7.1 指针与引用的区别&lt;ul&gt;
&lt;li&gt;引用总是非空的，指针可能为空，使用时要小心测试&lt;/li&gt;
&lt;li&gt;引用不可以指向另一个对象，但指针可以更改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;7.1 &lt;code&gt;int *p; *p = 0;&lt;/code&gt;是错误的，指针p并未指向某个实际的地址&lt;/li&gt;
&lt;li&gt;7.2 &lt;code&gt;char  a[] = "a"&lt;/code&gt;数组存放中栈中，函数返回即消失，&lt;code&gt;char *a = "a"&lt;/code&gt;数组存放于全局只读数据段&lt;/li&gt;
&lt;li&gt;7.2 若类B继承类A，两者皆有成员变量，A中有f方法，则&lt;code&gt;B b; b.f()&lt;/code&gt;调用的是A中的f，f使用的变量也为A中的变量&lt;/li&gt;
&lt;li&gt;7.3 指向const的指针应该是&lt;code&gt;const int *&lt;/code&gt;，bug&lt;/li&gt;
&lt;li&gt;7.3 &lt;code&gt;int ( *(*f)(int, int) )(int)&lt;/code&gt;定义了一个函数指针，接收两个int参数，返回值为一个函数指针&lt;/li&gt;
&lt;li&gt;7.4 指向整型数组的指针声明为：&lt;code&gt;int (*p) []&lt;/code&gt;，指向整型的指针数组声明为：&lt;code&gt;int *p[]&lt;/code&gt;，函数指针的数组的声明：&lt;code&gt;int (*p[10])(int)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;7.5 悬浮指针指的是delete之后的指针，应该让指针等于0，使得后续程序使用此悬浮指针出错是可控的。比如第二次delete&lt;/li&gt;
&lt;li&gt;7.5 new/delete与malloc/free的区别&lt;ul&gt;
&lt;li&gt;前者是运算符，后者是函数&lt;/li&gt;
&lt;li&gt;前者除了后者申请与释放动态内存的工作之外，对于非内置类型，还完成类初始化与析构操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;7.6 autoptr中拷贝时会尝试只保留一份指针，因此不适合放在容器中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第九章 STL模板与容器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;9.1 如果没有重载拷贝构造函数为深拷贝，而又包含指针，那么调用拷贝构造函数时会复制指针，造成同一个指针 delete多次&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十章 面向对象&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;10.2 类与结构体的区别：都能继承、拥有析构等成员函数，唯一的区别是struct成员默认为public，而class默认为private。C++是为了兼容C代码才保留struct关键字&lt;/li&gt;
&lt;li&gt;10.3 &lt;code&gt;class B{...}; B b(); b.f();&lt;/code&gt;是错误的，b声明为了一个函数&lt;/li&gt;
&lt;li&gt;10.3 静态成员变量必须显式初始化，例如&lt;code&gt;int A::i  0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;10.3 成员变量初始化顺序与初始化列表顺序无关，与变量声明顺序有关&lt;/li&gt;
&lt;li&gt;10.3 常数(cosnt)成员变量必须中构造函数的初始化列表里面初始化，或者声明为&lt;code&gt;static const&lt;/code&gt;成员&lt;/li&gt;
&lt;li&gt;10.4 把成员函数声明为虚函数造成调用开销增大，为什么常常把基类的析构函数声明为虚函数：多态情况下常常把派生类对象的指针赋给基类指针，那么使用虚函数保证delete时能调用派生类对象的析构函数，而不造成内存泄露&lt;/li&gt;
&lt;li&gt;10.4 构造函数为什么不能声明为virtual：虚调用是来调用一个只知道接口而不知道其对象类型的成员函数，实例化对象时必须知道对象的准确类型，因此构造函数不能为virtual（存疑，不够clear）&lt;/li&gt;
&lt;li&gt;10.4 函数f返回一个对象时，使用&lt;code&gt;A t = f()&lt;/code&gt;，会调用拷贝构造函数。即函数参数和返回值都是对象时，都会调用一次拷贝构造函数&lt;/li&gt;
&lt;li&gt;10.4 含有单个参数的构造函数会定义一个从参数类型到类的隐式类型转换，使用explicit关键字可以避免此转换&lt;/li&gt;
&lt;li&gt;10.5 函数参数常声明为const，这是因为const变量不能随意转换为非const，反之则可&lt;/li&gt;
&lt;li&gt;10.5 要求类的每个对象有唯一id，需要自定义拷贝构造函数避免重复&lt;/li&gt;
&lt;li&gt;10.5 如果类包含动态分配的指针，那么需要定义拷贝构造函数和赋值函数&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10.6 什么是多态？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;概念：封装、继承、多态是OO的三大基本概念。多态指的是允许将子类类型赋值给父类指针，而父类指针可以通过统一的接口对所有子类对象进行操作&lt;/li&gt;
&lt;li&gt;作用与目的：封装为了隐藏实现细节，以及数据类型和函数的统一，模块化；继承是为了方便扩展已有的代码模块；两者均可实现代码重用，而多态是为了实现接口重用&lt;/li&gt;
&lt;li&gt;实现方法：虚函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10.6 重写与重载，前者override是指子类重新定义父类的虚函数，后者overload是指同时存在多个参数列表不同的同名函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十一章 继承与接口&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;11.1 如果显式调用虚函数，则虚调用机制失效，如&lt;code&gt;class B::public A{}; B b; b.A::f();&lt;/code&gt;，类f为虚函数，但此时显式调用A中的f&lt;/li&gt;
&lt;li&gt;11.2 三种继承方式的区别&lt;ul&gt;
&lt;li&gt;public继承：基类的public和protected成员对基类保持原有状态&lt;ul&gt;
&lt;li&gt;基类成员对派生类的可见性：派生类（的成员函数）可以访问基类的public和protected成员&lt;/li&gt;
&lt;li&gt;基类成员对派生类对象的可见性：（通过）派生类的对象（指例如&lt;code&gt;a.f()的方式&lt;/code&gt;）可以访问基类的public成员&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;private继承：将基类的public和protected成员当成派生类的private成员，且不能被派生类的子类访问&lt;ul&gt;
&lt;li&gt;基类成员对派生类的可见性：派生类（的成员函数）可以访问基类的public和protected成员&lt;/li&gt;
&lt;li&gt;基类成员对派生类对象的可见性：（通过）派生类的对象不可以访问基类的任何成员,因此基类的成员无法再向下继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;protected继承：将基类的public和protected成员当成派生类的protected成员，且不能被派生类的子类访问&lt;ul&gt;
&lt;li&gt;基类成员对派生类的可见性：派生类（的成员函数）可以访问基类的public和protected成员&lt;/li&gt;
&lt;li&gt;基类成员对派生类对象的可见性：（通过）派生类的对象不可以访问基类的任何成员,因此基类的成员无法再向下继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;关键差别在于通过派生类对象可以访问基类的哪些成员，以及派生类的子类能否访问派生类的成员&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;11.2 三种成员属性的区别：基类的private成员对派生类屏蔽，protected成员使派生类可以访问，基类仅有public成员可以通过基类的对象访问&lt;/li&gt;
&lt;li&gt;11.2 虚继承是为了解决多重继承中的菱形继承冲突，派生类中会添加一个指向基类虚函数表的指针&lt;ul&gt;
&lt;li&gt;例如，C、B虚继承自A，D继承自B、C，则D中共有1个A&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;11.4 Java中使用接口替代多重继承，C++可以使用抽象类模拟接口&lt;/li&gt;
&lt;li&gt;11.4 C继承自A，B，pC指向C对象，pB把pC转换为指向B的指针，则&lt;code&gt;pC  == pB&lt;/code&gt;，这里发生从C的指针到B的指针的隐式转换，书中说反了，bug&lt;/li&gt;
&lt;li&gt;11.5 类的继承默认为private，通常需要加public关键字&lt;/li&gt;
&lt;li&gt;11.6 如何防止一个类实例化：使用带有纯虚函数的抽象类，或者把构造函数声明为private&lt;/li&gt;
&lt;li&gt;11.7 RTTI的缺点：除了运行开销外，使程序变得不确定，缺乏扩展性&lt;/li&gt;
&lt;li&gt;11.7 类型转换运算符重载，无返回值无参数，以目标类型为函数名，如：&lt;code&gt;operator char*()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;11.8 dynamic_cast如果转换失败返回0&lt;/li&gt;
&lt;li&gt;11.8 typeid返回值为对type_info常量对象的引用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十二章 位运算与嵌入式编程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;12.1 printf的%f说明符可以输出float和double型，float型会被提升为double型。&lt;code&gt;printf("%f",5);printf("%d",5.01)&lt;/code&gt;，前者会从存放5的位置取double型的8个字节，内存越界，并按bit解释，后者会按照整数来解释5.01的比特，输出为0，一个大整数。&lt;strong&gt;真的是越界&lt;/strong&gt;？&lt;/li&gt;
&lt;li&gt;12.1 &lt;code&gt;struct a{int z:33;};&lt;/code&gt;报错，因为z为int型，不可能有33位&lt;/li&gt;
&lt;li&gt;12.1 dynamic_cast,static_cast,reinterpret_cast的区别，没有讲清楚&lt;/li&gt;
&lt;li&gt;12.2 ISR终端服务程序不应该有参数和返回值，且不能使用不可重入的函数&lt;/li&gt;
&lt;li&gt;12.2 volatile的意思是易变的，指的是它可能在程序控制的范围之外意外发生变化，防止编译器的优化。volatile变量可以声明为const，表示是只读的&lt;/li&gt;
&lt;li&gt;12.2 const的意思是只读的&lt;/li&gt;
&lt;li&gt;12.2 &lt;code&gt;malloc(0)&lt;/code&gt;能得到一个合法的指针，而不是空指针，对其调用strlen和sizeof结果为0和4&lt;/li&gt;
&lt;li&gt;12.2 对于结构体&lt;code&gt;struct bit{int b1:5;int :2;int b2:2;};&lt;/code&gt;赋值后，取b1,b2的值，该如何解析？&lt;/li&gt;
&lt;li&gt;12.3 static的作用包括哪些？&lt;ul&gt;
&lt;li&gt;函数内的static变量中下次调用时保持值不变&lt;/li&gt;
&lt;li&gt;源代码文件（模块）内的static全局变量和函数的作用范围限制在模块内&lt;/li&gt;
&lt;li&gt;类的static成员变量对所有对象共享，static成员函数只能访问static成员变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十六章 操作系统&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;16.1 进程间如何通信：信号，信号量，消息队列，共享内存&lt;/li&gt;
&lt;li&gt;16.1 死锁的必要条件：互斥，请求与保持，不可剥夺，循环等待。后三种条件可以破坏&lt;/li&gt;
&lt;li&gt;16.2 进程与线程的区别：&lt;ul&gt;
&lt;li&gt;进程是程序的一次执行，线程为进程中执行的一段程序&lt;/li&gt;
&lt;li&gt;进程直接是独立的，而同一进程的线程共享内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十七章 数据库&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;17.1 事务：作为单个逻辑工作单元执行的一系列操作，不可分割。具有原子性、一致性、独立性、持久性&lt;/li&gt;
&lt;li&gt;17.1 聚集索引与非聚集索引的区别：&lt;ul&gt;
&lt;li&gt;聚集索引的顺序就是数据的物理存储顺序，而非聚集索引顺序与物理存储顺序无关&lt;/li&gt;
&lt;li&gt;每个表只能有一个聚集索引，聚集索引对于范围查询的列非常有效&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;17.2 表ppp里面num最小的数&lt;ul&gt;
&lt;li&gt;不使用min：&lt;code&gt;select top 1 num from ppp order by num&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用min：&lt;code&gt;select * from ppp where num = (select Min(num) from ppp)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;17.2 从表中取出第5行到第七行的数据的语句&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第十八章 计算机网络&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;18.1 OSI七层模型及其作用：&lt;ul&gt;
&lt;li&gt;物理层 传输原始比特流&lt;/li&gt;
&lt;li&gt;数据链路层 &lt;/li&gt;
&lt;li&gt;网络层 路由选择&lt;/li&gt;
&lt;li&gt;传输层&lt;/li&gt;
&lt;li&gt;会话层&lt;/li&gt;
&lt;li&gt;表示层&lt;/li&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;18.2 TCP与UDP的区别&lt;ul&gt;
&lt;li&gt;TCP是传输控制协议，提供面向连接、可靠的字节流服务。提供超时重发、数据检验、流量控制等功能&lt;/li&gt;
&lt;li&gt;UDP是用户数据报协议，是面向数据报的传输层协议，不提供可靠性。但由于无需建立连接、超时重发，传输速度快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;18.3 socket编程流程&lt;ul&gt;
&lt;li&gt;服务器端：socket bind accept  sned recv close&lt;/li&gt;
&lt;li&gt;客户端： socket connect send recv close&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;18.3 常用端口号：0到1023范围内，21为FTP，25为SMTP，80为HTTP，23为telnet&lt;/li&gt;
&lt;li&gt;18.4 TCP的三次握手与四次挥手&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20140806《程序员面试宝典》精华 语言部分</title><link href="http://heloman.github.io/pages/2014/08/20140806cheng-xu-yuan-mian-shi-bao-dian-jing-hua-yu-yan-bu-fen.html" rel="alternate"></link><published>2014-08-06T00:43:22+08:00</published><updated>2014-08-06T00:43:22+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-06:/pages/2014/08/20140806cheng-xu-yuan-mian-shi-bao-dian-jing-hua-yu-yan-bu-fen.html</id><summary type="html">&lt;h1&gt;《程序员面试宝典》精华 编程语言部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;正所谓取其精华，去其糟粕。本文谨记录下《程序员面试宝典》一些关键的知识点、易错点，对于一些虽然重要但书中没有解释清楚的地方不做记录。当然这里的糟粕只是指不那么重要，或者比较简单，并不是说书写的不好。希望以后回顾时无需再看此书，只看保留在文中的精华即可。&lt;/li&gt;
&lt;li&gt;文中有少许bug，亦摘录在此。&lt;/li&gt;
&lt;li&gt;本文专注编程语言部分，包括第五章到第九章的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第五章 语言细节&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;5.1 &lt;code&gt;y = z = 5&lt;/code&gt;，等号先计算右边，返回值是赋值后的左边的变量值&lt;/li&gt;
&lt;li&gt;5.1 printf函数中的表达式从右向左压栈，应该先计算右方的值&lt;/li&gt;
&lt;li&gt;5.4 float型1.0f在内存中表示为：0x3f 80 00 00&lt;/li&gt;
&lt;li&gt;5.5 出现int常数的表达式中的变量通常都要提升至int型&lt;/li&gt;
&lt;li&gt;5.5 赋值运算符默认从右向左结合，也就是先计算右方的值&lt;/li&gt;
&lt;li&gt;5.5 (x …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;《程序员面试宝典》精华 编程语言部分&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;正所谓取其精华，去其糟粕。本文谨记录下《程序员面试宝典》一些关键的知识点、易错点，对于一些虽然重要但书中没有解释清楚的地方不做记录。当然这里的糟粕只是指不那么重要，或者比较简单，并不是说书写的不好。希望以后回顾时无需再看此书，只看保留在文中的精华即可。&lt;/li&gt;
&lt;li&gt;文中有少许bug，亦摘录在此。&lt;/li&gt;
&lt;li&gt;本文专注编程语言部分，包括第五章到第九章的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第五章 语言细节&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;5.1 &lt;code&gt;y = z = 5&lt;/code&gt;，等号先计算右边，返回值是赋值后的左边的变量值&lt;/li&gt;
&lt;li&gt;5.1 printf函数中的表达式从右向左压栈，应该先计算右方的值&lt;/li&gt;
&lt;li&gt;5.4 float型1.0f在内存中表示为：0x3f 80 00 00&lt;/li&gt;
&lt;li&gt;5.5 出现int常数的表达式中的变量通常都要提升至int型&lt;/li&gt;
&lt;li&gt;5.5 赋值运算符默认从右向左结合，也就是先计算右方的值&lt;/li&gt;
&lt;li&gt;5.5 (x&amp;amp;y) + ((x^y)&amp;gt;&amp;gt;1)效果是取二者的平均数&lt;/li&gt;
&lt;li&gt;5.6 不用判断和switch语句求a、b中的较大的一个：((a + b) + abs(a - b)) / 2&lt;/li&gt;
&lt;li&gt;5.7 &lt;code&gt;extern "C"&lt;/code&gt;的用法：函数声明前添加，解决C/C++编译器的名字包装的不同问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第六章 预处理、const和sizeof&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;6.1 求结构体中某成员的偏移量：&lt;code&gt;#define FIND(struc, e) (size_t)&amp;amp;(((struc *)0)-&amp;gt;e)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;6.2 C语言中，&lt;code&gt;const n = 10; char carray[n]&lt;/code&gt;是错误的，因为C编译器不能把const看成编译期的常量。但实验得出是正确的，bug&lt;/li&gt;
&lt;li&gt;6.3 C++中给类成员变量添加mutable修饰符，就可以使用const函数修改&lt;/li&gt;
&lt;li&gt;6.3 结构体对齐原则：结构体长度一定是最长数据元素整数倍，但如果大于处理器位数，则以处理器位数为对齐单位。CPU数据对齐原则是数据的内存地址必须是该数据长度的整数倍，以提高运行速度&lt;/li&gt;
&lt;li&gt;6.3 sizeof(string) == 4&lt;/li&gt;
&lt;li&gt;6.3 空类以及（多重）继承的空类大小都为1，但虚继承的类含有虚表指针，大小为4&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第七章 指针与引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;7.1 指针与引用的区别&lt;ul&gt;
&lt;li&gt;引用总是非空的，指针可能为空，使用时要小心测试&lt;/li&gt;
&lt;li&gt;引用不可以指向另一个对象，但指针可以更改&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;7.1 &lt;code&gt;int *p; *p = 0;&lt;/code&gt;是错误的，指针p并未指向某个实际的地址&lt;/li&gt;
&lt;li&gt;7.2 &lt;code&gt;char  a[] = "a"&lt;/code&gt;数组存放中栈中，函数返回即消失，&lt;code&gt;char *a = "a"&lt;/code&gt;数组存放于全局只读数据段&lt;/li&gt;
&lt;li&gt;7.2 若类B继承类A，两者皆有成员变量，A中有f方法，则&lt;code&gt;B b; b.f()&lt;/code&gt;调用的是A中的f，f使用的变量也为A中的变量&lt;/li&gt;
&lt;li&gt;7.3 指向const的指针应该是&lt;code&gt;const int *&lt;/code&gt;，bug&lt;/li&gt;
&lt;li&gt;7.3 &lt;code&gt;int ( *(*f)(int, int) )(int)&lt;/code&gt;定义了一个函数指针，接收两个int参数，返回值为一个函数指针&lt;/li&gt;
&lt;li&gt;7.4 指向整型数组的指针声明为：&lt;code&gt;int (*p) []&lt;/code&gt;，指向整型的指针数组声明为：&lt;code&gt;int *p[]&lt;/code&gt;，函数指针的数组的声明：&lt;code&gt;int (*p[10])(int)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;7.5 悬浮指针指的是delete之后的指针，应该让指针等于0，使得后续程序使用此悬浮指针出错是可控的。比如第二次delete&lt;/li&gt;
&lt;li&gt;7.5 new/delete与malloc/free的区别&lt;ul&gt;
&lt;li&gt;前者是运算符，后者是函数&lt;/li&gt;
&lt;li&gt;前者除了后者申请与释放动态内存的工作之外，对于非内置类型，还完成类初始化与析构操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;7.6 autoptr中拷贝时会尝试只保留一份指针，因此不适合放在容器中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第九章 STL模板与容器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;9.1 如果没有重载拷贝构造函数为深拷贝，而又包含指针，那么调用拷贝构造函数时会复制指针，造成同一个指针 delete多次&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;
　　
　　&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140805NeutrinoRDP源码分析 utils库</title><link href="http://heloman.github.io/pages/2014/08/20140805neutrinordpyuan-ma-fen-xi-utilsku.html" rel="alternate"></link><published>2014-08-05T02:33:16+08:00</published><updated>2014-08-05T02:33:16+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-05:/pages/2014/08/20140805neutrinordpyuan-ma-fen-xi-utilsku.html</id><summary type="html">&lt;h1&gt;NeutrinoRDP源码分析 一 utils库&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;首先分析utils库，代码位于/libfreerdp-utils下，包括api, bitmap, dsp, event, file, list, memory, mutex, rail, semaphore, signal, sleep, stopwatch, stream, string, thread等文件&lt;/li&gt;
&lt;li&gt;以下分文件进行解析&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;api&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;头文件中定义了FREERDP_API，在linux下为&lt;code&gt;__attribute__((visibility("default")))&lt;/code&gt;，作用&lt;strong&gt;是什么&lt;/strong&gt;？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;bitmap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这段源码为位图格式文件工具&lt;/li&gt;
&lt;li&gt;定义结构体：&lt;ul&gt;
&lt;li&gt;bmpfile_magic 文件的魔数 &lt;/li&gt;
&lt;li&gt;bmpfile_header 数据起始位置以及文件大小 &lt;/li&gt;
&lt;li&gt;BITMAPINFOHEADER 文件头，包括位图相对位置与尺寸，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;freerdp_bitmap_write函数：把位图数据与尺寸写入指定的文件中，以'w+b'的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;dsp&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数字音频处理工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;event&lt;/h2&gt;
&lt;h2&gt;file&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文件操作工具 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;NeutrinoRDP源码分析 一 utils库&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;首先分析utils库，代码位于/libfreerdp-utils下，包括api, bitmap, dsp, event, file, list, memory, mutex, rail, semaphore, signal, sleep, stopwatch, stream, string, thread等文件&lt;/li&gt;
&lt;li&gt;以下分文件进行解析&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;api&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;头文件中定义了FREERDP_API，在linux下为&lt;code&gt;__attribute__((visibility("default")))&lt;/code&gt;，作用&lt;strong&gt;是什么&lt;/strong&gt;？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;bitmap&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这段源码为位图格式文件工具&lt;/li&gt;
&lt;li&gt;定义结构体：&lt;ul&gt;
&lt;li&gt;bmpfile_magic 文件的魔数 &lt;/li&gt;
&lt;li&gt;bmpfile_header 数据起始位置以及文件大小 &lt;/li&gt;
&lt;li&gt;BITMAPINFOHEADER 文件头，包括位图相对位置与尺寸，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;freerdp_bitmap_write函数：把位图数据与尺寸写入指定的文件中，以'w+b'的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;dsp&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数字音频处理工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;event&lt;/h2&gt;
&lt;h2&gt;file&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;文件操作工具&lt;/li&gt;
&lt;li&gt;对win/linux/mac环境变量名称、动态链接库后缀名、路径上的&lt;code&gt;/&lt;/code&gt;,&lt;code&gt;\\&lt;/code&gt;做了封装&lt;/li&gt;
&lt;li&gt;包含freerdp_mkdir, freerdp_get_home_path, freerdp_get_config_path, freerdp_check_file_exists, freerdp_get_current_path, freerdp_construct_path等命名简单易懂的函数&lt;/li&gt;
&lt;li&gt;freerdp_get_config_path等返回路径名称的函数，频繁使用使用sprintf把字符串组合起来得到路径名称&lt;/li&gt;
&lt;li&gt;上述函数使用自定义的xmalloc/xstrdup等函数&lt;/li&gt;
&lt;li&gt;freerdp_append_shared_library_suffix 如果函数参数文件路径名称后缀不同于动态链接库后缀名，返回添加后缀名后的路径。使用了xstrdup， 返回的字符串指针要记得free&lt;/li&gt;
&lt;li&gt;freerdp_get_parent_path 参数给出待求的父文件夹阶数，返回向上返回depth次的路径&lt;/li&gt;
&lt;li&gt;freerdp_path_contains_separator 判断给定路径是否含有路径分隔符，使用strchr查找&lt;/li&gt;
&lt;li&gt;freerdp_detect_development_mode 检测代码文件夹是否使用git进行版本控制。设置当前文件夹到向上两级文件夹是否含有&lt;code&gt;.git&lt;/code&gt;文件夹，以及含有&lt;code&gt;.git&lt;/code&gt;文件夹 的路径&lt;/li&gt;
&lt;li&gt;freerdp_detect_paths 设置家目录的路径，配置文件路径，版本控制顶层文件夹路径&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;list&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;双向链表，提供了队列模式接口
//头文件全部补上&lt;/li&gt;
&lt;li&gt;list_item_new 新建节点，data为数据指针&lt;/li&gt;
&lt;li&gt;list_item_find 线性查找，找到指向指定数据指针的链表节点&lt;/li&gt;
&lt;li&gt;以上两个函数使用static修饰，作用域限制于源文件内&lt;/li&gt;
&lt;li&gt;list_new 新建链表&lt;/li&gt;
&lt;li&gt;list_free 释放链表：如果头指针不为空，持续调用list_dequeue，逐个节点释放&lt;/li&gt;
&lt;li&gt;list_enqueue 把数据指针添加到链表尾部新建的节点中，同时节点数量&lt;/li&gt;
&lt;li&gt;list_dequeue 把链表头部首个节点释放，更新节点数量。对于空链表不做处理&lt;/li&gt;
&lt;li&gt;list_peek 返回链表当前头节点的数据指针，可能为NULL&lt;/li&gt;
&lt;li&gt;list_next 返回链表中存放 给定数据指针的节点的下一个节点指向的数据指针&lt;/li&gt;
&lt;li&gt;list_remove 移除存放给定数据指针的节点&lt;/li&gt;
&lt;li&gt;list_size 返回链表中节点数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;memory&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;内存管理工具&lt;/li&gt;
&lt;li&gt;定义shm_info_t&lt;/li&gt;
&lt;li&gt;xmalloc 对malloc函数的简单封装，申请一块内存&lt;/li&gt;
&lt;li&gt;xzalloc 对calloc的简单封装，申请一块内存，并没有注释所说的全部填充0的功能&lt;/li&gt;
&lt;li&gt;xrealloc 对realloc的简单封装，调整内存大小&lt;/li&gt;
&lt;li&gt;xfree 对free的简单封装&lt;/li&gt;
&lt;li&gt;xstrdup 对strdup/_strdup（windows下）的简单封装，strdup会在内部调用malloc，容易忘记free，应该使用strcpy代替&lt;/li&gt;
&lt;li&gt;create_shm_info 生成指定大小的shm_info_t（信号量），兼容win/linux&lt;/li&gt;
&lt;li&gt;delete_shm_info 释放shm_info_t指针，兼容win/linux&lt;/li&gt;
&lt;li&gt;xnew定义在头文件中，为一个调用xzalloc的宏&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;mutex&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;锁&lt;/li&gt;
&lt;li&gt;win/linux差别较大，几乎所有文件都使用ifdef来兼容两种操作系统&lt;/li&gt;
&lt;li&gt;freerdp_mutex_t win定义为 HANDLE，linux定义为pthread_mutex_t&lt;/li&gt;
&lt;li&gt;freerdp_mutex_new 创建一个锁，linux下使用pthread_mutex_init初始化&lt;/li&gt;
&lt;li&gt;freerdp_mutex_free 去除锁，linux使用pthread_mutex_destroy&lt;/li&gt;
&lt;li&gt;freerdp_mutex_lock freerdp_mutex_unlock 加锁，linux下为pthread_mutex_lock, pthread_mutex_unlock的简单封装&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;rail&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;RAIL：Remote Applications Integrated Locally&lt;/li&gt;
&lt;li&gt;rail_unicode_string_alloc 为一个UNICODE_STRING结构体指针初始化结构体内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;signal&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对信号的处理&lt;/li&gt;
&lt;li&gt;静态函数fatal_handler&lt;/li&gt;
&lt;li&gt;freerdp_handle_signals&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;sleep&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;freerdp_sleep 睡眠n 秒，调用sleep函数实现&lt;/li&gt;
&lt;li&gt;freerdp_usleep 睡眠n 微秒，调用usleep函数&lt;/li&gt;
&lt;li&gt;freerdp_get_mstime 使用gettimeofday得当时间，换算为ms返回&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;stopwatch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;秒表&lt;/li&gt;
&lt;li&gt;头文件中定义STOPWATCH&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;struct _STOPWATCH&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;        clock_t start;&lt;/span&gt;
&lt;span class="err"&gt;        clock_t end;&lt;/span&gt;
&lt;span class="err"&gt;        double elapsed;&lt;/span&gt;
&lt;span class="err"&gt;        clock_t count;&lt;/span&gt;
&lt;span class="err"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;定义stopwatch_create、stopwatch_free、stopwatch_start、stopwatch_stop、stopwatch_reset、stopwatch_get_elapsed_time_in_seconds、stopwatch_get_elapsed_time_in_useconds函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;stream&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;流&lt;/li&gt;
&lt;li&gt;STREAM 为结构体，包含size，两个uint8的指针 p和data，头文件中定义类很多宏，如下：&lt;/li&gt;
&lt;li&gt;stream_attach 使用给定的数组及其大小初始化stream，位置指针p指向data的开始位置&lt;/li&gt;
&lt;li&gt;stream_detach 使用memset将stream置0&lt;/li&gt;
&lt;li&gt;stream_clear 使用memset将stream成员数组data置0&lt;/li&gt;
&lt;li&gt;stream_check_size 如果p之后的剩余空间不到n，调用stream_extend扩展n空间。此处使用while的&lt;strong&gt;作用是什么&lt;/strong&gt;？&lt;/li&gt;
&lt;li&gt;stream_get_pos stream_set_pos set、get位置指针p&lt;/li&gt;
&lt;li&gt;stream_seek p向后移动指定偏移量&lt;/li&gt;
&lt;li&gt;stream_rewind p向前移动指定偏移量&lt;/li&gt;
&lt;li&gt;stream_seal 根据p重设size&lt;/li&gt;
&lt;li&gt;stream_get_mark stream_set_mark 用外部指针mark set、get位置指针p&lt;/li&gt;
&lt;li&gt;stream_get_ + head、tail、length、data、size、left 分别得到当前有效数据的开头、末尾、长度， 数据数组指针data、size、剩余空间&lt;/li&gt;
&lt;li&gt;stream_read_ + uint8、uint16、sint16、uint32、uint64 从流中读取指定大小的数据，并更新p 均使用类while，&lt;strong&gt;为什么&lt;/strong&gt;？&lt;/li&gt;
&lt;li&gt;stream_read 使用memcpy向指定地址拷贝指定大小的数据，更新p&lt;/li&gt;
&lt;li&gt;stram_write_ + uint8、uint16、uint32、uint64, stream_write 等函数与上述read函数类似&lt;/li&gt;
&lt;li&gt;stream_write_zero 写入&lt;code&gt;\0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;stream_set_byte 使用memset向stream写入指定长度的指定值，更新p&lt;/li&gt;
&lt;li&gt;stream_peek_ + uint8....uint64 取得指定大小的值，只读，不更新p&lt;/li&gt;
&lt;li&gt;stream_seek_ + uint8...uint64 移动相应大小&lt;/li&gt;
&lt;li&gt;stream_ + read/write + _ + uint16/uint32 + _be 使用big endian读写相应大小，更新p&lt;/li&gt;
&lt;li&gt;stream_copy 从源stream读取n个字节，写入到目标stream，使用memcpy&lt;/li&gt;
&lt;li&gt;以下为包含的函数&lt;/li&gt;
&lt;li&gt;stream_new 使用给定的size创建一个STREAM&lt;/li&gt;
&lt;li&gt;stream_free 回收stream占用的内存&lt;/li&gt;
&lt;li&gt;stream_extend 扩展stream的data数组增加指定大小，至少扩展到当前数组大小的两倍以避免频繁调用xrealloc，实现精巧&lt;/li&gt;
&lt;li&gt;宏中大量使用&lt;code&gt;do{...}while(0)&lt;/code&gt;包括多行代码，应该是为了封装宏为单个语句，易于使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;string&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;字符串工具&lt;/li&gt;
&lt;li&gt;头文件中定义了rdp_string，之后&lt;code&gt;typedef struct rdp_string rdpString;&lt;/code&gt;，这么多应该是为了修改定义时方便，很精巧&lt;/li&gt;
&lt;li&gt;rdpString包含length和两个char指针：ascii和unicode&lt;/li&gt;
&lt;li&gt;freerdp_string_length32 从流中读取uint32的值作为rdpString的长度，之后从流中读取此长度的数据写入unicode指向的数组，并转换为ascii编码写入asscii指向的数组&lt;/li&gt;
&lt;li&gt;freerdp_string_free 回收string中两个指针指向的空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;thread&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;线程&lt;/li&gt;
&lt;li&gt;头文件中定义结构体freerdp_thread，成员有mutex, wait_obj管道数组signals[5]&lt;/li&gt;
&lt;li&gt;源代码中定义函数如下：&lt;/li&gt;
&lt;li&gt;freerdp_thread_new 创建freerdp_thread,  signals数组初始化两个，也即初始化时一个线程有1个mutex和2个管道&lt;/li&gt;
&lt;li&gt;freerdp_thread_start 调用pthread_create 使用给定函数和参数创建线程，并使用pthread_detach分离线程避免僵死&lt;/li&gt;
&lt;li&gt;freerdp_thread_stop 对signals数组中第一个wait_obj调用wait_obj_set&lt;strong&gt;什么用&lt;/strong&gt;？，如果freerdp_thread的status不为0，至少休眠&lt;/li&gt;
&lt;li&gt;freerdp_thread_free 释放freerdp_thread&lt;/li&gt;
&lt;li&gt;头文件中定义宏如下：&lt;/li&gt;
&lt;li&gt;freerdp_thread_wait 对freerdp_thread的signals数组调用wait_obj_select，返回select结果&lt;/li&gt;
&lt;li&gt;freerdp_thread_wait_timeout select最多阻塞timeout时间返回&lt;/li&gt;
&lt;li&gt;freerdp_thread_is_stopped 通过调用wait_obj_is_set检测signals[0]读取端是否可读&lt;/li&gt;
&lt;li&gt;freerdp_thread_is_running 如果status为1，表示正在运行&lt;/li&gt;
&lt;li&gt;freerdp_thread_quit status标记为-1，调用wait_obj_clear清空管道signal[0]&lt;/li&gt;
&lt;li&gt;freerdp_thread_signal 对signals[0]调用wait_obj_set&lt;/li&gt;
&lt;li&gt;freerdp_thread_reset 调用wait_obj_clear清空管道signal[1]&lt;/li&gt;
&lt;li&gt;freerdp_thread_lock/freerdp_thread_unlock 解锁/加锁&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;wait_obj&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Virtual channel manager&lt;/li&gt;
&lt;li&gt;源文件中定义结构体wait_obj，windows下成员为HANDLE，linux下成员为&lt;code&gt;int pipe_fd[2]&lt;/code&gt;。两操作系统均定义了int类型成员变量attached&lt;/li&gt;
&lt;li&gt;wait_obj_new linux下对数组pipe_fd调用pipe函数建立管道，两个数组元素分别是读取写入文件描述符&lt;/li&gt;
&lt;li&gt;wait_obj_new_with_fd 使用给定的描述符初始化一个管道的读取端&lt;/li&gt;
&lt;li&gt;wait_obj_free 关闭wait_obj的读取写入fd，并回收其内存&lt;/li&gt;
&lt;li&gt;wait_obj_is_set 新建一个fd_set，将wait_obj管道读取端加入fd_set,使用select检测是否可以读数据，timeout = 0， maxfdp应为所有fd最大值加1&lt;/li&gt;
&lt;li&gt;wait_obj_set 如果管道不可读，则写入“sig”&lt;/li&gt;
&lt;li&gt;wait_obj_clear 从管道中读取所有可读数据&lt;/li&gt;
&lt;li&gt;wait_obj_select 对一列wait_obj做select，返回select结果&lt;/li&gt;
&lt;li&gt;wait_obj_get_fds 将wait_obj管道读取描述符加入fds数组&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20140803软硬件接口第0周作业</title><link href="http://heloman.github.io/pages/2014/08/20140803ruan-ying-jian-jie-kou-di-0zhou-zuo-ye.html" rel="alternate"></link><published>2014-08-03T12:51:37+08:00</published><updated>2014-08-03T12:51:37+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-03:/pages/2014/08/20140803ruan-ying-jian-jie-kou-di-0zhou-zuo-ye.html</id><summary type="html">&lt;h1&gt;软硬件接口第0周作业&lt;/h1&gt;
&lt;h3&gt;内存寻址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;无论是4字节机器字还是8字节机器字，地址都按照实际地址来取，即每个机器字的数个字节每个均有单独的地址&lt;/li&gt;
&lt;li&gt;指针使用一个机器字存储&lt;/li&gt;
&lt;li&gt;X86架构使用小头字节序，低字节在前，internet使用大头字节序。对于char数组，在两种字节序下兼容&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;整数的表示&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有符号整数用补码形式表示，可以把减法转换为加法：&lt;code&gt;a - b = a + (-b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;补码表示的负数的最高位表示&lt;code&gt;-2^(N-1)&lt;/code&gt;，其他位与整数相同，表示&lt;code&gt;2^(N-2), ... 2^1, 2^0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如下图：&lt;/li&gt;
&lt;li&gt;&lt;img alt="" src="20140803Swhdinterface.JPG"&gt;&lt;/li&gt;
&lt;li&gt;例如：1111表示&lt;code&gt;-8 + 4 + 2 + 1 = -1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;要得到负数-x的补码表示，有如下关系：&lt;code&gt;~x + 1 = -x&lt;/code&gt;，即绝对值的反码加1&lt;/li&gt;
&lt;li&gt;最大值参考&lt;code&gt;/usr/include/limits.h&lt;/code&gt;，与平台有关&lt;/li&gt;
&lt;li&gt;C语言中的常数默认为int …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;软硬件接口第0周作业&lt;/h1&gt;
&lt;h3&gt;内存寻址&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;无论是4字节机器字还是8字节机器字，地址都按照实际地址来取，即每个机器字的数个字节每个均有单独的地址&lt;/li&gt;
&lt;li&gt;指针使用一个机器字存储&lt;/li&gt;
&lt;li&gt;X86架构使用小头字节序，低字节在前，internet使用大头字节序。对于char数组，在两种字节序下兼容&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;整数的表示&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;有符号整数用补码形式表示，可以把减法转换为加法：&lt;code&gt;a - b = a + (-b)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;补码表示的负数的最高位表示&lt;code&gt;-2^(N-1)&lt;/code&gt;，其他位与整数相同，表示&lt;code&gt;2^(N-2), ... 2^1, 2^0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如下图：&lt;/li&gt;
&lt;li&gt;&lt;img alt="" src="20140803Swhdinterface.JPG"&gt;&lt;/li&gt;
&lt;li&gt;例如：1111表示&lt;code&gt;-8 + 4 + 2 + 1 = -1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;要得到负数-x的补码表示，有如下关系：&lt;code&gt;~x + 1 = -x&lt;/code&gt;，即绝对值的反码加1&lt;/li&gt;
&lt;li&gt;最大值参考&lt;code&gt;/usr/include/limits.h&lt;/code&gt;，与平台有关&lt;/li&gt;
&lt;li&gt;C语言中的常数默认为int，使用&lt;code&gt;0U&lt;/code&gt;前缀可以强制为unsigned int类型&lt;/li&gt;
&lt;li&gt;int与unsigned之间的类型转换为按位解释。隐式转换可以在gcc中使用&lt;code&gt;-­‐Wsign-­‐conversion&lt;/code&gt;，但&lt;code&gt;-Wall&lt;/code&gt;选项没用&lt;/li&gt;
&lt;li&gt;int类型移位&lt;ul&gt;
&lt;li&gt;逻辑右移：左方填0&lt;/li&gt;
&lt;li&gt;算术右移：左方填充符号位，保持符号不变。如果移动位数不在&lt;code&gt;[0, 32)&lt;/code&gt;之间，行为未定义&lt;/li&gt;
&lt;li&gt;C语言中默认为算术右移&lt;/li&gt;
&lt;li&gt;C语言的右移向下取整，和除法不同，比如&lt;code&gt;-3 / 2 = -1, -3 % 2 = -1, -3 &amp;gt;&amp;gt; 1 = -2&lt;/code&gt;。而python中&lt;code&gt;-3 / 2 = -2, -3 % 2 = 1&lt;/code&gt;，除法和右移一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;gcc命令行参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-Wall&lt;/code&gt;显示所有类型的警告&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-g&lt;/code&gt;生成带有调试符号表的可执行文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-std=gnu99&lt;/code&gt;使用C99标准，允许在for循环内声明变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o filename&lt;/code&gt;指定编译得到的程序的文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;valgrind&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;valgrind程序可以非常方便的完成内存泄露分析&lt;/li&gt;
&lt;li&gt;&lt;code&gt;valgrind ./arrays&lt;/code&gt;可以检查arrays程序是否存在内存泄露&lt;/li&gt;
&lt;li&gt;&lt;code&gt;valgrind --leak-check=full ./arrays&lt;/code&gt;可以显示详细的内存泄露位置信息&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>排序算法分析及实现</title><link href="http://heloman.github.io/pages/2014/08/pai-xu-suan-fa-fen-xi-ji-shi-xian.html" rel="alternate"></link><published>2014-08-02T13:00:21+08:00</published><updated>2014-08-02T13:00:21+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-02:/pages/2014/08/pai-xu-suan-fa-fen-xi-ji-shi-xian.html</id><content type="html">&lt;p&gt;排序算法分析及实现&lt;/p&gt;
&lt;h2&gt;算法稳定性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;不稳定的排序算法共有四种，快排，选择排序，希尔排序，堆排序。首字母为qssh，简记为“去死”&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;不稳定算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;快速排序&lt;/li&gt;
&lt;li&gt;选择排序&lt;/li&gt;
&lt;li&gt;希尔排序&lt;/li&gt;
&lt;li&gt;堆排序&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20140802如何统计代码行数</title><link href="http://heloman.github.io/pages/2014/08/20140802ru-he-tong-ji-dai-ma-xing-shu.html" rel="alternate"></link><published>2014-08-02T09:29:07+08:00</published><updated>2014-08-02T09:29:07+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-02:/pages/2014/08/20140802ru-he-tong-ji-dai-ma-xing-shu.html</id><summary type="html">&lt;h1&gt;如何统计代码行数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;linux下提供了很多实用工具，甚至在安卓上，都有移植的busybox包含这些工具。 &lt;/li&gt;
&lt;li&gt;根据KISS理念，这些工具的功能很单一。但这些工具组合起来，就可以很方面的统计代码量了。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;统计代码行数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;流程为：首先使用find命令找到所有后缀名符合规则的源代码文件，之后使用wc命令统计行数。文件数可能过多，为防止出错使用xargs命令分割参数列表，最后得到的结果可以使用sort排序&lt;/li&gt;
&lt;li&gt;统计所有c源代码行数的命令：&lt;code&gt;find -name *.c | xargs wc -l |sort -r&lt;/code&gt;。结果按照反序排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find -name *.c | xargs wc -l |sort -k2&lt;/code&gt; 结果按照文件名排列&lt;/li&gt;
&lt;li&gt;如需统计c++代码，将&lt;code&gt;*.c&lt;/code&gt;更改为&lt;code&gt;*.cc&lt;/code&gt;即可。如果c++使用cpp后缀名，改为&lt;code&gt;*.cpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;用到的命令详解&lt;/h2&gt;
&lt;h3&gt;find命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;find命令递归搜索目录，若任一文件使表达式为真则放入结果&lt;/li&gt;
&lt;li&gt;使用方法 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;如何统计代码行数&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;linux下提供了很多实用工具，甚至在安卓上，都有移植的busybox包含这些工具。 &lt;/li&gt;
&lt;li&gt;根据KISS理念，这些工具的功能很单一。但这些工具组合起来，就可以很方面的统计代码量了。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;统计代码行数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;流程为：首先使用find命令找到所有后缀名符合规则的源代码文件，之后使用wc命令统计行数。文件数可能过多，为防止出错使用xargs命令分割参数列表，最后得到的结果可以使用sort排序&lt;/li&gt;
&lt;li&gt;统计所有c源代码行数的命令：&lt;code&gt;find -name *.c | xargs wc -l |sort -r&lt;/code&gt;。结果按照反序排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find -name *.c | xargs wc -l |sort -k2&lt;/code&gt; 结果按照文件名排列&lt;/li&gt;
&lt;li&gt;如需统计c++代码，将&lt;code&gt;*.c&lt;/code&gt;更改为&lt;code&gt;*.cc&lt;/code&gt;即可。如果c++使用cpp后缀名，改为&lt;code&gt;*.cpp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;用到的命令详解&lt;/h2&gt;
&lt;h3&gt;find命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;find命令递归搜索目录，若任一文件使表达式为真则放入结果&lt;/li&gt;
&lt;li&gt;使用方法&lt;code&gt;find [path...] [expression]&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;path指定需要寻找的目录范围，默认为当前目录  &lt;/li&gt;
&lt;li&gt;expression通常为测试条件，返回true或false  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-name pattern&lt;/code&gt;文件名符合shell正则式  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-path pattern&lt;/code&gt;文件路径名符合shell正则式  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-exec order {}&lt;/code&gt;执行命令，若返回值为0则真&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;find -name *.c&lt;/code&gt; 搜索后缀名为c的文件&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;find . -exec sleep {1}&lt;/code&gt; 每隔1s显示一个文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;wc命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;wc为wordcount的缩写，用于统计文件&lt;/li&gt;
&lt;li&gt;使用方法&lt;code&gt;wc [-lwc] filename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;l、w、c分别表示统计行数、单词数、字符数。默认为统计全部三者&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;wc -l file1 file2&lt;/code&gt;统计两文件的行数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;xargs命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;xargs的功能是捕获管道中前一个命令的输出，建立分段参数表并执行另一个命令&lt;/li&gt;
&lt;li&gt;find命令如果产生的参数列太长，可以使用xargs命令每次只传递一部分参数，防止在部分系统上出现溢出错误&lt;/li&gt;
&lt;li&gt;xargs通常以空格或者换行符分割参数，&lt;code&gt;-0&lt;/code&gt;选项可以保证参数列中含有空格、换行符等时分割正确&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;find /tmp -name core | xargs -0 /bin/rm -f&lt;/code&gt;。把&lt;code&gt;/tmp&lt;/code&gt;文件夹下所有名称为core的文件传递给rm命令，强制删除。&lt;code&gt;-0&lt;/code&gt;选项可以保证正确处理文件名中含有换行或空格的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;sort命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sort用于对不同的文本进行排序，以行为单位&lt;/li&gt;
&lt;li&gt;默认排序方式为升序，&lt;code&gt;-r&lt;/code&gt;选项可以修改为降序排列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt;选项按照字符表示的数字的值来排序，如&lt;code&gt;1 2 10 20&lt;/code&gt;没有开启此选项排序结果为&lt;code&gt;1 10 2 20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;忽略大小写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;设置列之间的分隔符，&lt;code&gt;-k&lt;/code&gt;指定按照第几列排序&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;sort -n -f -k 2 test.txt&lt;/code&gt;。将test.txt中的各行按照第二列排序，忽略大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;重定向&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;行数统计结果可以存入文本文件中，命令行最后加上&lt;code&gt;&amp;gt; count.txt&lt;/code&gt;即可&lt;/li&gt;
&lt;li&gt;标准输入、输出、错误输出分别用0，1，2表示&lt;/li&gt;
&lt;li&gt;输入重定向使用输入重定向运算符&lt;code&gt;&amp;lt;&lt;/code&gt;，可以把文件中的内容作为程序的输入。例如测试代码时使用：&lt;code&gt;./a.out &amp;lt; test.in&lt;/code&gt;，test.in文件里面是程序的测试输入&lt;/li&gt;
&lt;li&gt;输出重定向可以将程序的输出写入到文件中，使用输出重定向运算符&lt;code&gt;&amp;gt;&lt;/code&gt;。&lt;ul&gt;
&lt;li&gt;例子：&lt;code&gt;ls 1&amp;gt;/dev/null 2&amp;gt;/dev/null&lt;/code&gt; 不显示输出和错误输出。1、2与&amp;gt;之间不能有空格&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;ls 2&amp;gt; &amp;amp;1&amp;gt; t.txt&lt;/code&gt; 将错误输出重定向到标准输出，而此时标准输出还未重定向，因此标准输出内容将写入t.txt，而错误输出仍留在屏幕上&lt;/li&gt;
&lt;li&gt;例子：&lt;code&gt;ls 1&amp;gt; t.txt 2&amp;gt; &amp;amp;1&lt;/code&gt;将标准输出和错误输出都写入t.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;管道&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;管道使用&lt;code&gt;|&lt;/code&gt;表示&lt;/li&gt;
&lt;li&gt;功能为前一个命令的标准输出定向为第二个命令的标准输入&lt;/li&gt;
&lt;li&gt;第二个命令必须能从标准输入中读取才行，如&lt;code&gt;ls&lt;/code&gt;命令就不符合要求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;
　
　&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140801socket套接字socket套接字TCP API</title><link href="http://heloman.github.io/pages/2014/08/20140801sockettao-jie-zi-sockettao-jie-zi-tcp-api.html" rel="alternate"></link><published>2014-08-01T08:54:31+08:00</published><updated>2014-08-01T08:54:31+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-01:/pages/2014/08/20140801sockettao-jie-zi-sockettao-jie-zi-tcp-api.html</id><summary type="html">&lt;h1&gt;socket套接字TCP API&lt;/h1&gt;
&lt;h2&gt;socket概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;socket又称“套接字”，是计算机网络中进程间通信数据通道的一个端点，或称之为句柄。IP地址+端口号就可以唯一确定一个socket。&lt;/li&gt;
&lt;li&gt;TCP/IP协议族包括传输层（TCP/UDP），网络层（ICMP/IP/IGMP），链路层（ARP/RARP）。应用层通常使用socket地址，即IP地址+端口号来确定通信的对端。而socket正是TCP/IP协议族与应用层之间的接口层，可以说对上层提供了TCP/IP协议族的一种封装，无需关心更底层的实现。&lt;/li&gt;
&lt;li&gt;应用上通常使用一些更高层的协议库来编程，socket更多归类于底层驱动编程。不过熟悉socket总归是有好处的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;套接字地址结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IP地址+端口号可以唯一确定一个socket套接字地址，命名为&lt;code&gt;sockaddr_in&lt;/code&gt;，位于&lt;code&gt;netinet/in.h&lt;/code&gt;头文件中，定义如下。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;struct in_addr{&lt;/span&gt;
&lt;span class="err"&gt;    in_addr_t s_addr;&lt;/span&gt;
&lt;span class="err"&gt;};&lt;/span&gt;
&lt;span class="err"&gt;struct sockaddr_in{&lt;/span&gt;
&lt;span class="err"&gt;    uint8_t sin_len …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;socket套接字TCP API&lt;/h1&gt;
&lt;h2&gt;socket概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;socket又称“套接字”，是计算机网络中进程间通信数据通道的一个端点，或称之为句柄。IP地址+端口号就可以唯一确定一个socket。&lt;/li&gt;
&lt;li&gt;TCP/IP协议族包括传输层（TCP/UDP），网络层（ICMP/IP/IGMP），链路层（ARP/RARP）。应用层通常使用socket地址，即IP地址+端口号来确定通信的对端。而socket正是TCP/IP协议族与应用层之间的接口层，可以说对上层提供了TCP/IP协议族的一种封装，无需关心更底层的实现。&lt;/li&gt;
&lt;li&gt;应用上通常使用一些更高层的协议库来编程，socket更多归类于底层驱动编程。不过熟悉socket总归是有好处的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;套接字地址结构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;IP地址+端口号可以唯一确定一个socket套接字地址，命名为&lt;code&gt;sockaddr_in&lt;/code&gt;，位于&lt;code&gt;netinet/in.h&lt;/code&gt;头文件中，定义如下。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;struct in_addr{&lt;/span&gt;
&lt;span class="err"&gt;    in_addr_t s_addr;&lt;/span&gt;
&lt;span class="err"&gt;};&lt;/span&gt;
&lt;span class="err"&gt;struct sockaddr_in{&lt;/span&gt;
&lt;span class="err"&gt;    uint8_t sin_len;&lt;/span&gt;
&lt;span class="err"&gt;    sa_family_t sin_family;&lt;/span&gt;
&lt;span class="err"&gt;    in_port_t sin_port;&lt;/span&gt;
&lt;span class="err"&gt;    struct in_addr sin_addr;&lt;/span&gt;
&lt;span class="err"&gt;    char sin_zero(0);&lt;/span&gt;
&lt;span class="err"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;in_addr_t&lt;/code&gt; &lt;code&gt;in_port_t&lt;/code&gt;位于&lt;code&gt;netinet/in.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in_addr_t&lt;/code&gt;一般定义为&lt;code&gt;uint32_t&lt;/code&gt;，&lt;code&gt;in_port_t&lt;/code&gt;一般定义为&lt;code&gt;uint16_t&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sa_family_t&lt;/code&gt;位于&lt;code&gt;sys/socket.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uint8_t&lt;/code&gt;等位于&lt;code&gt;sys/types.h&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sin_addr&lt;/code&gt; &lt;code&gt;sin_port&lt;/code&gt;即为以网络字节序存储的32位ip地址与端口号&lt;/li&gt;
&lt;li&gt;套接字地址有很多种，为了能够统一以指针的形式使用socket API，使用时需要转换为通用套接字地址&lt;code&gt;sockaddr&lt;/code&gt;，一般进行强制类型转换即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;socket基本TCP API&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;相关函数定义于&lt;code&gt;sys/socket.h&lt;/code&gt;中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;socket函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;socket函数用以创建一个socket。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;int socket(int family, int type, int protocal);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;family通常设置为&lt;code&gt;AF_INET``AF_INET6&lt;/code&gt;，分别表示IPv4/6协议。&lt;/li&gt;
&lt;li&gt;type通常设置为&lt;code&gt;SOCK_STREAM&lt;/code&gt; &lt;code&gt;SOCK_DGRAM&lt;/code&gt; &lt;code&gt;SOCK_RAW&lt;/code&gt;，分别表示字节流（TCP），数据报（UDP），原始套接字。&lt;/li&gt;
&lt;li&gt;protocal表示协议族，&lt;code&gt;IPPROTO_TCP'&lt;/code&gt;IPPROTO_UDP`通常设置为0也可。&lt;/li&gt;
&lt;li&gt;返回值表示非负套接字描述符&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;connect函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用于建立连接&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;int connect(int sockfd, const struct sockaddr *servaddr, int addrlen);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;TCP客户端用connect函数与服务器端建立连接&lt;/li&gt;
&lt;li&gt;此函数将激发TCP的三次握手连接过程，直到链接建立成功或出错才返回&lt;/li&gt;
&lt;li&gt;每个socket只能调用一次connect，出错后必须close当前socket再次重新依次调用socket、connect&lt;/li&gt;
&lt;li&gt;函数参数为socket描述符，通用socket地址指针及其结构体大小。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;bind函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;bind将IP地址和端口绑定到套接字描述符&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;int bind(int sockfd, const struct sockadddr *myaddr, int addrlen);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;如果sin_addr.s_addr设置为INADDR_ANY，且主机有多个网络接口，则可以在多个网络接口接受用户connect&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;listen函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;listem将一个未调用connect函数的socket转换为一个被动监听套接字&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;int listen(int sockfd, int backlog);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;backlog规定了挂起连接的最大数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;accept函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;内核为任一个监听套接字维护一个正在处于握手连接阶段的未完成连接队列，以及已完成连接队列&lt;/li&gt;
&lt;li&gt;accept每次接受一个监听套接字描述符，返回一个已连接队列中的已连接套接字描述符&lt;/li&gt;
&lt;li&gt;已连接套接字的套接字地址与地址长度存放于cliaddr与addrlen指向的内存中。如果使用两个0来调用，则无法得到客户端已连接套接字表示的地址与端口等信息。&lt;/li&gt;
&lt;li&gt;对于每个处理完毕的连接，应该close，否则可能耗尽套接字描述符&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;int accept(int sockfd, struct sockaddr *cliaddr, int *addrlen)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;close函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;close一个TCP套接字默认行为是把socket标记为关闭后返回。但触发了四次挥手过程&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;int close(int sockfd);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;传送数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通常需要一个缓冲区，之后使用recv、send函数接收发送&lt;/li&gt;
&lt;li&gt;read、write在*nix系统上也可以&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;int recv(int sockfd, void *buf, size_t len, int flags);&lt;/span&gt;
&lt;span class="err"&gt;int send(int sockfd, const void *buf, size_t len, int flags);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;TCP通信客户端与服务器端&lt;/h2&gt;
&lt;h3&gt;客户端流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用connect连接服务器之后就可以开始传输数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;服务器端流程&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需要首先绑定网络接口（bind），之后进入监听状态（listen），最后从队列中取出一个已经连接的套接字，即获得新连接（accept），之后可以开始传输数据&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;源代码如下：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务器端&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;netinet&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;stdio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htonl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INADDR_ANY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;socket call failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;local&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;bind call failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;listen call failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;sl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;sl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;accept call failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;recv call failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;good&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;send call failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;netinet&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;arpa&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;inet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;stdio&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;peer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="n"&gt;peer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;peer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;peer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inet_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;socket call failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;peer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;peer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;connect call failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;send call failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;recv call failed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;%s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>使用Markdown写简历</title><link href="http://heloman.github.io/pages/2014/08/shi-yong-markdownxie-jian-li.html" rel="alternate"></link><published>2014-08-01T08:51:44+08:00</published><updated>2014-08-01T08:51:44+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-08-01:/pages/2014/08/shi-yong-markdownxie-jian-li.html</id><content type="html"></content><category term="misc"></category></entry><entry><title>剑指offer思路笔记</title><link href="http://heloman.github.io/pages/2014/07/jian-zhi-offersi-lu-bi-ji.html" rel="alternate"></link><published>2014-07-31T23:40:48+08:00</published><updated>2014-07-31T23:40:48+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-07-31:/pages/2014/07/jian-zhi-offersi-lu-bi-ji.html</id><content type="html"></content><category term="misc"></category></entry><entry><title>20140728Matlab并行编程</title><link href="http://heloman.github.io/pages/2014/07/20140728matlabbing-xing-bian-cheng.html" rel="alternate"></link><published>2014-07-28T17:27:37+08:00</published><updated>2014-07-28T17:27:37+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-07-28:/pages/2014/07/20140728matlabbing-xing-bian-cheng.html</id><summary type="html">&lt;h1&gt;Matlab的parfor并行编程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;通常消耗最多计算资源的程序往往是循环。把循环并行化，或者优化循环体中的代码是最常用的加快程序运行速度的思路。&lt;/li&gt;
&lt;li&gt;Matlab提供了parfor关键字，可以很方便的在多核机器或集群上实现并行计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;parfor关键字的使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由for关键字引导的循环通常为串行运行，如果改为parfor则可以由多个worker以并行方式执行。&lt;/li&gt;
&lt;li&gt;parfor可以将n次循环分解为独立不相关的m部分，然后将各部分分别交给一个worker执行。&lt;/li&gt;
&lt;li&gt;循环执行的结果应该与n次循环执行的顺序无关。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;parfor中的变量类型&lt;/h2&gt;
&lt;h3&gt;简约变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一般parfor中各次循环对应的运算应该相互独立，但简约操作可以在多次循环内同时对一个变量操作。这种变量称为简约变量。例如下方代码中a就是简约变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;a = 0;&lt;/span&gt;
&lt;span class="err"&gt;for i = 1:1000&lt;/span&gt;
&lt;span class="err"&gt;    a = a+i;&lt;/span&gt;
&lt;span class="err"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;简约操作包括&lt;code&gt;+ - * .* &amp;amp; | [,] [;] {,} {;} min max union intersect&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;同一个parfor循环对简约变量的操作必须一致，即必须是同一种简约操作符。而且与操作符的相对位置也必须一致。&lt;/li&gt;
&lt;li&gt;简约变量赋值表达式应该满足结合律和交换律。&lt;code&gt;* [] {}&lt;/code&gt;底层有特殊处理保证结果的正确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;切片变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;parfor中可能需要读取或写入parfor之外的矩阵，读取写入位置与循环变量相关。这样就需要向worker传输大量的数据。&lt;/li&gt;
&lt;li&gt;矩阵如果被Matlab识别为切片变量，则数据可以分段传输到各worker，提高传输效率。&lt;/li&gt;
&lt;li&gt;切片变量矩阵的大小是不可在parfor中改变的，且为了保证Matlab识别正确，每次循环中只能读取由同一个索引值索引的切片，如&lt;code&gt;a …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Matlab的parfor并行编程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;通常消耗最多计算资源的程序往往是循环。把循环并行化，或者优化循环体中的代码是最常用的加快程序运行速度的思路。&lt;/li&gt;
&lt;li&gt;Matlab提供了parfor关键字，可以很方便的在多核机器或集群上实现并行计算。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;parfor关键字的使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;由for关键字引导的循环通常为串行运行，如果改为parfor则可以由多个worker以并行方式执行。&lt;/li&gt;
&lt;li&gt;parfor可以将n次循环分解为独立不相关的m部分，然后将各部分分别交给一个worker执行。&lt;/li&gt;
&lt;li&gt;循环执行的结果应该与n次循环执行的顺序无关。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;parfor中的变量类型&lt;/h2&gt;
&lt;h3&gt;简约变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一般parfor中各次循环对应的运算应该相互独立，但简约操作可以在多次循环内同时对一个变量操作。这种变量称为简约变量。例如下方代码中a就是简约变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;a = 0;&lt;/span&gt;
&lt;span class="err"&gt;for i = 1:1000&lt;/span&gt;
&lt;span class="err"&gt;    a = a+i;&lt;/span&gt;
&lt;span class="err"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;简约操作包括&lt;code&gt;+ - * .* &amp;amp; | [,] [;] {,} {;} min max union intersect&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;同一个parfor循环对简约变量的操作必须一致，即必须是同一种简约操作符。而且与操作符的相对位置也必须一致。&lt;/li&gt;
&lt;li&gt;简约变量赋值表达式应该满足结合律和交换律。&lt;code&gt;* [] {}&lt;/code&gt;底层有特殊处理保证结果的正确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;切片变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;parfor中可能需要读取或写入parfor之外的矩阵，读取写入位置与循环变量相关。这样就需要向worker传输大量的数据。&lt;/li&gt;
&lt;li&gt;矩阵如果被Matlab识别为切片变量，则数据可以分段传输到各worker，提高传输效率。&lt;/li&gt;
&lt;li&gt;切片变量矩阵的大小是不可在parfor中改变的，且为了保证Matlab识别正确，每次循环中只能读取由同一个索引值索引的切片，如&lt;code&gt;a[i] a[i+1]&lt;/code&gt;同时出现则a不被识别为切片变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;循环变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如上例中的i，表示当前循环的id。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;广播变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在parfor之前赋值，在parfor内只进行读取操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;临时变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;作用域局限于parfor内，parfor结束后不存在。不影响parfor之前声明的同名变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;各种变量区分的例子&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;下例中，parfor中的tmp是临时变量，parfor结束后tmp的值依然是5，不受临时变量的影响。&lt;/li&gt;
&lt;li&gt;broadcast是广播变量，每次循环中的值不变。&lt;/li&gt;
&lt;li&gt;redued是简约变量，Matlab对其的值将分段由各worker计算后送回主进程处理。&lt;/li&gt;
&lt;li&gt;sliced为切片变量，数据传输有优化提升。&lt;/li&gt;
&lt;li&gt;i为循环变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;tmp = 5;&lt;/span&gt;
&lt;span class="err"&gt;broadcast = 1;&lt;/span&gt;
&lt;span class="err"&gt;reduced = 0;&lt;/span&gt;
&lt;span class="err"&gt;sliced = ones(1, 10);&lt;/span&gt;
&lt;span class="err"&gt;parfor i = 1:10&lt;/span&gt;
&lt;span class="err"&gt;    tmp = i;&lt;/span&gt;
&lt;span class="err"&gt;    reduced = reduced + i + broadcast;&lt;/span&gt;
&lt;span class="err"&gt;    sliced(i) = sliced(i) * i;&lt;/span&gt;
&lt;span class="err"&gt;end &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;worker配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在运行程序之前，需要配置worker。否则如前文所说，parfor循环将以普通for循环的形式运行，无法并行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;单机配置&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用matlabpool命令可以开启关闭本机的并行计算池。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matlabpool n&lt;/code&gt;命令可以打开n个worker。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matlabpool open configname&lt;/code&gt;按照指定配置打开，默认配置为&lt;code&gt;local&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;程序运行结束后，应该使用&lt;code&gt;matlabpool close&lt;/code&gt;关闭worker。&lt;/li&gt;
&lt;li&gt;配置项的修改可以通过&lt;code&gt;Parallel -&amp;gt; Manage Cluster Profile&lt;/code&gt;完成。&lt;/li&gt;
&lt;li&gt;n的选择：如果有c个cpu核心，通常可以设置为c。如果是远程服务器，为防止服务器响应卡顿，可以设置为&lt;code&gt;c-1&lt;/code&gt;。对于计算密集型程序，超线程带来的性能提升几乎为0，可以设置为核心数，而不是线程数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;注意事项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;循环次数n最好能整除以worker个数m，否则部分worker会分配较多的循环，造成一部分worker闲置一段时间，降低了并行性。&lt;/li&gt;
&lt;li&gt;并行运行时各个worker之间会进行通信，要注意大量数据传输带来的性能下降。尤其对于广播变量，如果较大可尝试变为切片变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点我&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>多普勒失真信号重采样的Matlab仿真分析</title><link href="http://heloman.github.io/pages/2014/07/duo-pu-le-shi-zhen-xin-hao-zhong-cai-yang-de-matlabfang-zhen-fen-xi.html" rel="alternate"></link><published>2014-07-24T16:48:26+08:00</published><updated>2014-07-24T16:48:26+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-07-24:/pages/2014/07/duo-pu-le-shi-zhen-xin-hao-zhong-cai-yang-de-matlabfang-zhen-fen-xi.html</id><summary type="html">&lt;h1&gt;多普勒失真信号重采样的Matlab仿真分析&lt;/h1&gt;
&lt;h2&gt;应用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;水声通信指的是使用声信号在水中传输数据。相对而言，电磁信号在水中吸收严重衰减过快，光信号受水中悬浮颗粒的影响，也无法完成远距离传输。这两种信号的传播距离约为数百米，而声信号在水中传播距离达到数十千米，成为水下通信的首选方式。&lt;/li&gt;
&lt;li&gt;水声通信的一个重大挑战就是运动带来的多普勒。多普勒造成信号的频率漂移，影响系统性能，因此非常有必要消除多普勒带来的影响。而多普勒在时域的表现为信号的长度压缩和扩展，即'y(t) = x((1+a) * t)'，其中&lt;code&gt;a&lt;/code&gt;为多普勒因子。而如果估计出多普勒因子，之后采用重采样技术就可以恢复得到原始信号&lt;code&gt;x(t) = y( t/(a+a) )&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;重采样的意义就是插值，从一个信号插值得到多普勒影响前后的信号。而&lt;code&gt;1+a&lt;/code&gt;一般为小数，虽然采用多相滤波可以达到很好的插值效果，但复杂度太高。相比之下，线性插值、样条插值等方式运算量小，在做数字系统的时候更加合适&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Matlab一维插值&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MATLAB中的插值函数为&lt;code&gt;interp1()&lt;/code&gt;,其调用格式为 &lt;code&gt;yi=interp1 …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;多普勒失真信号重采样的Matlab仿真分析&lt;/h1&gt;
&lt;h2&gt;应用场景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;水声通信指的是使用声信号在水中传输数据。相对而言，电磁信号在水中吸收严重衰减过快，光信号受水中悬浮颗粒的影响，也无法完成远距离传输。这两种信号的传播距离约为数百米，而声信号在水中传播距离达到数十千米，成为水下通信的首选方式。&lt;/li&gt;
&lt;li&gt;水声通信的一个重大挑战就是运动带来的多普勒。多普勒造成信号的频率漂移，影响系统性能，因此非常有必要消除多普勒带来的影响。而多普勒在时域的表现为信号的长度压缩和扩展，即'y(t) = x((1+a) * t)'，其中&lt;code&gt;a&lt;/code&gt;为多普勒因子。而如果估计出多普勒因子，之后采用重采样技术就可以恢复得到原始信号&lt;code&gt;x(t) = y( t/(a+a) )&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;重采样的意义就是插值，从一个信号插值得到多普勒影响前后的信号。而&lt;code&gt;1+a&lt;/code&gt;一般为小数，虽然采用多相滤波可以达到很好的插值效果，但复杂度太高。相比之下，线性插值、样条插值等方式运算量小，在做数字系统的时候更加合适&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Matlab一维插值&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MATLAB中的插值函数为&lt;code&gt;interp1()&lt;/code&gt;,其调用格式为 &lt;code&gt;yi=interp1(x,y,xi, 'method')&lt;/code&gt;。其中x,y为观测数据点,xi为插值(自变量)向量,yi为xi的插值结果(函数值)。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;'method'&lt;/code&gt;表示采用的插值方法。取值'nearest'为最邻近插值，'linear'是线性插值，'spline'是三次样条插值，'cubic'为分段三次Hermite插值。默认情况为线性插值，三次样条效果最平滑，三次效果多项式介于两者之间。&lt;/li&gt;
&lt;li&gt;线性插值：通过所在位置相邻两点的值来插值。已知f(a)和f(c)，b在a,c中间，求f(b)的公式为：&lt;code&gt;f(b) = f(a) + (b-a)/(c-a) *[f(c) - f(a)]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;分段三次Hermite插值：分段让邻近两点的导数相同，曲线更平滑。&lt;/li&gt;
&lt;li&gt;样条插值：样条插值通常比多项式插值好用。用低阶的样条插值能产生和高阶的多项式插值类似的效果，并且可以避免龙格现象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;线性插值的误差&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;插值不免会造成信号失真，定义原始信号功率与噪声功率的比值为信干比，计算公式为：&lt;code&gt;SDR = 10 * log10( power(x(t)) / power(x(t) - x'(t) )&lt;/code&gt;。&lt;code&gt;x'(t)&lt;/code&gt;为插值后得到的信号。&lt;/li&gt;
&lt;li&gt;而对于线性插值，SDR与信号采样频率&lt;code&gt;fs&lt;/code&gt;和信号频率&lt;code&gt;f&lt;/code&gt;的比值有近似如下关系：&lt;code&gt;SDR(dB) = 40 * log10( fs/f /2 )&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;仿真对比&lt;/h2&gt;
&lt;p&gt;代码如下。
- 首先设置多普勒因子&lt;code&gt;dop&lt;/code&gt;，插值方法，采样率与信号频率的比例ns。最小值取2，对应奈奎斯特频率。
- 之后对于每个ns值，生成相应的初始信号&lt;code&gt;a&lt;/code&gt;，之后插值以对信号添加多普勒。因&lt;code&gt;spline&lt;/code&gt;方法造成的误差最小，选择作为添加多普勒的方法。
- 采用不同的插值方法去除多普勒。因为插值造成信号长度变化，每次都只略去尾部6000个数据点。
- 之后画图，每个ns对应一张图，并注明实测SDR以及线性插值的理论SDR值以作对比。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;dop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;intermethod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;nearest&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;nearest&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;cubic&lt;/span&gt; &lt;span class="n"&gt;spline&lt;/span&gt; 

&lt;span class="nf"&gt;%n&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;fc&lt;/span&gt;
&lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;interp1&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6000&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;dop&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;spline&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;interp1&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6000&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;dop&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;intermethod&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;29901&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30000&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;hold&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;29901&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;num2str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;SDR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;num2str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;dB&lt;/span&gt; &lt;span class="n"&gt;VS&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;dB&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;仿真结果分析&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;临近点插值仿真结果：性能极差，无法使用。&lt;/li&gt;
&lt;li&gt;线性插值仿真结果：可见与理论值符合的较好。&lt;/li&gt;
&lt;li&gt;分段三次Hermite插值插值仿真结果：大约提高5dB，但带来的是大量的计算。&lt;/li&gt;
&lt;li&gt;三次样条插值仿真结果：性能非常好，但最复杂。因为添加多普勒时也采用了样条插值，仿真结果加上3dB才应该是理论结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;如果采用重采样来去除多普勒带来的影响，并且采用较为实用的线性插值法，若要达到约19dB的通信信噪比要求，需要提高采样率至少为6倍信号频率。
　　
　　
　　
&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点我&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>coursera_dl</title><link href="http://heloman.github.io/pages/2014/07/coursera_dl.html" rel="alternate"></link><published>2014-07-23T15:59:54+08:00</published><updated>2014-07-23T15:59:54+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-07-23:/pages/2014/07/coursera_dl.html</id><content type="html">&lt;h1&gt;Coursera下载工具源码解析&lt;/h1&gt;
&lt;h2&gt;入口&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;coursera-dl脚本中调用了coursera/coursera_dl.py中的coursera_dl.main()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;coursera_dl中加载的库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BeautifulSoup与html5lib&lt;/li&gt;
&lt;li&gt;argparse用以解析参数&lt;/li&gt;
&lt;li&gt;json解析json数据&lt;/li&gt;
&lt;li&gt;subprocess子进程管理&lt;/li&gt;
&lt;li&gt;requests&lt;/li&gt;
&lt;li&gt;six&lt;/li&gt;
&lt;li&gt;logging&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;参数args解析&lt;/h3&gt;</content><category term="misc"></category></entry><entry><title>20140722《剑指offer》解题笔记</title><link href="http://heloman.github.io/pages/2014/07/20140722jian-zhi-offer-jie-ti-bi-ji.html" rel="alternate"></link><published>2014-07-22T08:43:00+08:00</published><updated>2014-07-22T08:43:00+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-07-22:/pages/2014/07/20140722jian-zhi-offer-jie-ti-bi-ji.html</id><summary type="html">&lt;h1&gt;《剑指offer》解题笔记&lt;/h1&gt;
&lt;p&gt;《剑指offer》共50题，这两周使用C++花时间做了一遍，谨在此把一些很巧妙的方法、写代码遇到的难点、易犯错的细节等做一个简单的标注，但不会太过详细，具体算法还是请参考书本。
做的比较急，代码还有很多不完善的地方，如有错误，欢迎改正，地址为：&lt;a href="https://github.com/heLomaN/sword_of_offer.git"&gt;github:sword_of_offer&lt;/a&gt;。可以使用&lt;code&gt;git clone https://github.com/heLomaN/sword_of_offer.git&lt;/code&gt;命令获取代码。
其中，少数无法验证正确与否的题目没有写代码，部分二叉树的题目写了代码，但由于生成二叉树太过麻烦没有验证。&lt;/p&gt;
&lt;h2&gt;解题笔记&lt;/h2&gt;
&lt;h3&gt;Q3&lt;/h3&gt;
&lt;p&gt;声明并初始化二维数组的语句如何写？
cin如何判断输入结束？&lt;/p&gt;
&lt;h3&gt;Q4&lt;/h3&gt;
&lt;p&gt;字符数组的末尾位置计算差了1，忘了加上\0，要小心&lt;/p&gt;
&lt;h3&gt;Q5&lt;/h3&gt;
&lt;p&gt;递归的方法更简洁&lt;/p&gt;
&lt;h3&gt;Q6&lt;/h3&gt;
&lt;p&gt;stl的find算法
vector传值性能差，应该用引用
截取一段时要根据左右子树的长度来截，再次find是错误的&lt;/p&gt;
&lt;h3&gt;Q7 …&lt;/h3&gt;</summary><content type="html">&lt;h1&gt;《剑指offer》解题笔记&lt;/h1&gt;
&lt;p&gt;《剑指offer》共50题，这两周使用C++花时间做了一遍，谨在此把一些很巧妙的方法、写代码遇到的难点、易犯错的细节等做一个简单的标注，但不会太过详细，具体算法还是请参考书本。
做的比较急，代码还有很多不完善的地方，如有错误，欢迎改正，地址为：&lt;a href="https://github.com/heLomaN/sword_of_offer.git"&gt;github:sword_of_offer&lt;/a&gt;。可以使用&lt;code&gt;git clone https://github.com/heLomaN/sword_of_offer.git&lt;/code&gt;命令获取代码。
其中，少数无法验证正确与否的题目没有写代码，部分二叉树的题目写了代码，但由于生成二叉树太过麻烦没有验证。&lt;/p&gt;
&lt;h2&gt;解题笔记&lt;/h2&gt;
&lt;h3&gt;Q3&lt;/h3&gt;
&lt;p&gt;声明并初始化二维数组的语句如何写？
cin如何判断输入结束？&lt;/p&gt;
&lt;h3&gt;Q4&lt;/h3&gt;
&lt;p&gt;字符数组的末尾位置计算差了1，忘了加上\0，要小心&lt;/p&gt;
&lt;h3&gt;Q5&lt;/h3&gt;
&lt;p&gt;递归的方法更简洁&lt;/p&gt;
&lt;h3&gt;Q6&lt;/h3&gt;
&lt;p&gt;stl的find算法
vector传值性能差，应该用引用
截取一段时要根据左右子树的长度来截，再次find是错误的&lt;/p&gt;
&lt;h3&gt;Q7&lt;/h3&gt;
&lt;p&gt;stack的pop返回值是void，而top方法才返回顶部值&lt;/p&gt;
&lt;h3&gt;Q8&lt;/h3&gt;
&lt;p&gt;这个二分相当的难。尤其是非递归的写法
边界值处理要仔细想
不能忽略如1 0 1的特殊情况&lt;/p&gt;
&lt;h3&gt;Q9&lt;/h3&gt;
&lt;p&gt;应该用long long类型&lt;/p&gt;
&lt;h3&gt;Q10&lt;/h3&gt;
&lt;p&gt;求数的二进制表示种1的个数应记住：减1再&amp;amp;自身总会消去一个1&lt;/p&gt;
&lt;h3&gt;Q11&lt;/h3&gt;
&lt;p&gt;除以2用&amp;gt;&amp;gt;，模2用&amp;amp;，效率更高
应该加上错误检测&lt;/p&gt;
&lt;h3&gt;Q12&lt;/h3&gt;
&lt;p&gt;遇到数字有关的题，首先考虑是不是大数问题&lt;/p&gt;
&lt;h3&gt;Q13&lt;/h3&gt;
&lt;p&gt;把下一个节点的值拷贝到当前节点即可，之后删除下一个节点&lt;/p&gt;
&lt;h3&gt;Q14&lt;/h3&gt;
&lt;p&gt;9du oj要求奇数或偶数的顺序不变，现在的代码没有符合这个要求&lt;/p&gt;
&lt;h3&gt;Q15&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;node *p,q&lt;/code&gt;只把p声明为指针，小心
参考&lt;a href="https://github.com/julycoding/The-Art-Of-Programming-By-July"&gt;https://github.com/julycoding/The-Art-Of-Programming-By-July&lt;/a&gt;，&lt;code&gt;*&lt;/code&gt;应该靠近类型名&lt;/p&gt;
&lt;h3&gt;Q16&lt;/h3&gt;
&lt;p&gt;画图以帮助理解&lt;/p&gt;
&lt;h3&gt;Q18&lt;/h3&gt;
&lt;p&gt;!p判断指针为空是可以的
代码未测试&lt;/p&gt;
&lt;h3&gt;Q22&lt;/h3&gt;
&lt;p&gt;方法很难想起来，要仔细分析其中规律&lt;/p&gt;
&lt;h3&gt;Q25&lt;/h3&gt;
&lt;p&gt;代码未测试&lt;/p&gt;
&lt;h3&gt;Q26&lt;/h3&gt;
&lt;p&gt;方法很难想起来 第三步分离链表操作不够简洁&lt;/p&gt;
&lt;h3&gt;Q27&lt;/h3&gt;
&lt;p&gt;使用了一个辅助vector，书上的方法不能仔细的写出来&lt;/p&gt;
&lt;h3&gt;Q28&lt;/h3&gt;
&lt;p&gt;这种解法无法处理多个字符重复的情况，会造成重复
递归的时候修改全局数组，但递归调用后要把全局数组修改回来，和之前递归调用前后出入栈的方法有异曲同工之妙
8皇后问题也可以用这个方法解决&lt;/p&gt;
&lt;h3&gt;Q29&lt;/h3&gt;
&lt;p&gt;求数组中任意第K大的数字有成熟的O(n)的算法&lt;/p&gt;
&lt;h3&gt;Q30&lt;/h3&gt;
&lt;p&gt;C++中throw new excetion("error")是不正确的，不能用字符串初始化excetion
set和multiset是基于红黑树实现的&lt;/p&gt;
&lt;h3&gt;Q31&lt;/h3&gt;
&lt;p&gt;第一种解法和DP解法原理是一样的&lt;/p&gt;
&lt;h3&gt;Q32&lt;/h3&gt;
&lt;p&gt;1到n个9之间出现1的次数是n*10^(n-1)
代码未测试&lt;/p&gt;
&lt;h3&gt;Q33&lt;/h3&gt;
&lt;p&gt;itoa不是标准库函数，只是linux下的库函数，可以用printf代替
string可以直接+、&amp;gt;、&amp;lt;运算&lt;/p&gt;
&lt;h3&gt;Q34&lt;/h3&gt;
&lt;p&gt;关键是如何保证已经找到的丑数数组是有序的&lt;/p&gt;
&lt;h3&gt;Q35&lt;/h3&gt;
&lt;p&gt;memset函数是在cstring头文件中&lt;/p&gt;
&lt;h3&gt;Q35&lt;/h3&gt;
&lt;p&gt;关键是merge两个数组时的细节处理
归并排序相当于O(n)的空间换来了时间复杂度提升到O(nlogn)&lt;/p&gt;
&lt;h3&gt;Q37&lt;/h3&gt;
&lt;p&gt;代码未测试&lt;/p&gt;
&lt;h3&gt;Q38&lt;/h3&gt;
&lt;p&gt;关键是改变二分查找的循环判断条件&lt;/p&gt;
&lt;h3&gt;Q39&lt;/h3&gt;
&lt;p&gt;题目2的算法不易想起
代码未测试&lt;/p&gt;
&lt;h3&gt;Q40&lt;/h3&gt;
&lt;p&gt;方法很巧妙
C++中auto&amp;amp; e : v遍历容器注意v指向元素的引用才可以改变容器中的值&lt;/p&gt;
&lt;h3&gt;Q41&lt;/h3&gt;
&lt;p&gt;书中未给出算法证明，亟待解决&lt;/p&gt;
&lt;h3&gt;Q43&lt;/h3&gt;
&lt;p&gt;方法巧妙，解法很难想起来&lt;/p&gt;
&lt;h3&gt;Q45&lt;/h3&gt;
&lt;p&gt;方法巧妙，解法很难想起来&lt;/p&gt;
&lt;h3&gt;Q50&lt;/h3&gt;
&lt;p&gt;如果有指向父节点的指针，那么找到这两个点到根节点的链表，求第一个公共节点
如果没有，那么dfs遍历得到这两个点的链表，求第一个公共节点&lt;/p&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140716hard_soft_interface</title><link href="http://heloman.github.io/pages/2014/07/20140716hard_soft_interface.html" rel="alternate"></link><published>2014-07-16T10:46:57+08:00</published><updated>2014-07-16T10:46:57+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-07-16:/pages/2014/07/20140716hard_soft_interface.html</id><summary type="html">&lt;h1&gt;《软硬件接口》课程大纲&lt;/h1&gt;
&lt;p&gt;Coursera课程 &lt;a href="https://class.coursera.org/hwswinterface-002"&gt;The Hardware/Software Interface&lt;/a&gt;是华盛顿大学提供的一门课程，其中汇编语言、进程结构、Java实现等章节内容我认为对于学编程的同学来说非常有用。教学环境是Fedora，顺带介绍了一些常用工具的使用。&lt;/p&gt;
&lt;h2&gt;课程大纲&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这门课程将会让学生知道当软件运行时到底发生了什么，并说明这个问题可以通过硬件架构层、汇编层、C语言层和Java层等数层抽象解答。- &lt;/li&gt;
&lt;li&gt;这门课程的核心是关于C、汇编、以及底层数据表示的，但同时与更高层（Java语言实现机理）、更底层（处理器通用架构）、操作系统（无关操作系统的实现）相关。&lt;/li&gt;
&lt;li&gt;对于那些想要专注于高层抽象的计算机专业学生来说，这门课可能是他们学习到的关于C语言及以更下层的唯一课程。不过，他们大多能够同时学到一些系统编程、硬件设计与实现、操作系统、编译器等知识。&lt;/li&gt;
&lt;li&gt;对于对硬件、嵌入式系统、计算机工程、计算机架构等感兴趣的学生来说，这门课程是一门入门课程，后续课程会在特定领域更加深入，并且会关注更下层的硬件实现、电路设计等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;课程主题&lt;/h3&gt;
&lt;p&gt;本课程主要有三个主题。
1. 表示：不同的数据类型，如整数和结构体数组，在内存中如何存在 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;《软硬件接口》课程大纲&lt;/h1&gt;
&lt;p&gt;Coursera课程 &lt;a href="https://class.coursera.org/hwswinterface-002"&gt;The Hardware/Software Interface&lt;/a&gt;是华盛顿大学提供的一门课程，其中汇编语言、进程结构、Java实现等章节内容我认为对于学编程的同学来说非常有用。教学环境是Fedora，顺带介绍了一些常用工具的使用。&lt;/p&gt;
&lt;h2&gt;课程大纲&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;这门课程将会让学生知道当软件运行时到底发生了什么，并说明这个问题可以通过硬件架构层、汇编层、C语言层和Java层等数层抽象解答。- &lt;/li&gt;
&lt;li&gt;这门课程的核心是关于C、汇编、以及底层数据表示的，但同时与更高层（Java语言实现机理）、更底层（处理器通用架构）、操作系统（无关操作系统的实现）相关。&lt;/li&gt;
&lt;li&gt;对于那些想要专注于高层抽象的计算机专业学生来说，这门课可能是他们学习到的关于C语言及以更下层的唯一课程。不过，他们大多能够同时学到一些系统编程、硬件设计与实现、操作系统、编译器等知识。&lt;/li&gt;
&lt;li&gt;对于对硬件、嵌入式系统、计算机工程、计算机架构等感兴趣的学生来说，这门课程是一门入门课程，后续课程会在特定领域更加深入，并且会关注更下层的硬件实现、电路设计等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;课程主题&lt;/h3&gt;
&lt;p&gt;本课程主要有三个主题。
1. 表示：不同的数据类型，如整数和结构体数组，在内存中如何存在？指令如何编码？如何生成内存地址并用于创建复杂的数据结构？
2. 翻译：高层的语言，如C和Java如何转换成硬件处理器的基本指令？
3. 控制流：计算机如何阻止计算的顺序，如何跟踪大型程序当前的运行轨迹，多个进程如何并行执行？&lt;/p&gt;
&lt;h3&gt;课程目标&lt;/h3&gt;
&lt;p&gt;课程结束后，学生应该能够
1. 理解高层次的程序转换成可以被处理器执行的指令流的过程
2. 知道指针是什么，以及如何使用指针操纵复杂的数据结构
3. 能够使用X86汇编语言写简短的程序，并理解汇编语言和高层次语言如何映射
4. 理解分级存储器的基本组织和参数，理解它对于系统性能的重要性
5. 能够解释清楚操作系统的功能
6. 知道Java和C的本质区别
7. 理解并行机制以及它在系统级的重要性
8. 成为更高效的程序员，更有效的debug，对系统性能更敏感&lt;/p&gt;
&lt;h3&gt;课程专题&lt;/h3&gt;
&lt;p&gt;大约每周一个专题，包括
- 数字的表示
- 汇编语言
- C语言基础
- 内存管理
- 操作系统的进程模型
- 高层次机器架构
- 分级存储器
- 高层次语言的实现&lt;/p&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点我&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>substring</title><link href="http://heloman.github.io/pages/2014/07/substring.html" rel="alternate"></link><published>2014-07-15T12:05:30+08:00</published><updated>2014-07-15T12:05:30+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-07-15:/pages/2014/07/substring.html</id><summary type="html">&lt;h1&gt;字符串查找算法&lt;/h1&gt;
&lt;p&gt;字符串查找常用于电子监控，网络数据提取，文本编辑器。
字符串查找要求在一段长度为N的文本text中找到长度为N的pattern字符串的起始位置。常用算法如下。&lt;/p&gt;
&lt;h2&gt;暴力搜索&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;遍历text，以text中每个字符开始与pattern做比较。&lt;/li&gt;
&lt;li&gt;算法复杂度为MN，比如在AAAAAAAAB中查找AAB&lt;/li&gt;
&lt;li&gt;算法需要回退，如果发现一次不匹配，需要回退text的指针。可以通过缓冲M个字符解决&lt;/li&gt;
&lt;li&gt;算法实现&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;public static int search(String pat, String txt)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;    int i, N = txt.length();&lt;/span&gt;
&lt;span class="err"&gt;    int j, M = pat.length();&lt;/span&gt;
&lt;span class="err"&gt;    for(i = 0, j = 0; i &amp;lt; N &amp;amp;&amp;amp; j &amp;lt; M; i++)&lt;/span&gt;
&lt;span class="err"&gt;    {&lt;/span&gt;
&lt;span class="err"&gt;        if (txt.charAt(i) == pat.charAt …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;字符串查找算法&lt;/h1&gt;
&lt;p&gt;字符串查找常用于电子监控，网络数据提取，文本编辑器。
字符串查找要求在一段长度为N的文本text中找到长度为N的pattern字符串的起始位置。常用算法如下。&lt;/p&gt;
&lt;h2&gt;暴力搜索&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;遍历text，以text中每个字符开始与pattern做比较。&lt;/li&gt;
&lt;li&gt;算法复杂度为MN，比如在AAAAAAAAB中查找AAB&lt;/li&gt;
&lt;li&gt;算法需要回退，如果发现一次不匹配，需要回退text的指针。可以通过缓冲M个字符解决&lt;/li&gt;
&lt;li&gt;算法实现&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;public static int search(String pat, String txt)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;    int i, N = txt.length();&lt;/span&gt;
&lt;span class="err"&gt;    int j, M = pat.length();&lt;/span&gt;
&lt;span class="err"&gt;    for(i = 0, j = 0; i &amp;lt; N &amp;amp;&amp;amp; j &amp;lt; M; i++)&lt;/span&gt;
&lt;span class="err"&gt;    {&lt;/span&gt;
&lt;span class="err"&gt;        if (txt.charAt(i) == pat.charAt(j)) j++;&lt;/span&gt;
&lt;span class="err"&gt;        else {i -= j; j = 0; }&lt;/span&gt;
&lt;span class="err"&gt;    }&lt;/span&gt;
&lt;span class="err"&gt;    if (j == M) return i - M;&lt;/span&gt;
&lt;span class="err"&gt;    else        return N;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;暴力算法不够好，复杂度不够低，需要回退&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;KMP算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;相比暴力搜索算法，根据当前一次不匹配的已知信息跳过以后的数次匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;DFA算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本质是DFA（deterministic finite state automaton 有限状态机）。已经匹配的字符数作为状态，下一个输入字符为输入条件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="DFA" src="substring1.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算法实现&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;txt.charAt(i)[[j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;与暴力算法的异同&lt;ul&gt;
&lt;li&gt;需要根据pattern计算dfa矩阵&lt;/li&gt;
&lt;li&gt;指针永不回退，可以使用输入字符流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dfa矩阵的计算&lt;ul&gt;
&lt;li&gt;对于符合pattern的状态跳转，拥有从0到M的一条顺序路径&lt;/li&gt;
&lt;li&gt;不符合pattern的，将要跳转到的状态等于pattern去除第一个字符情况下要跳转到的状态。可以使用X来跟踪去除第一个字符后腰跳转到的状态。如上图，X应是BABAC的状态跳转&lt;/li&gt;
&lt;li&gt;算法实现：对于每个状态j，对于匹配的情况，设&lt;code&gt;dfa[pat.charAt[(j)][j] = j+1&lt;/code&gt;,对于不匹配的情况，设&lt;code&gt;dfa[][X] = dfa[][j]&lt;/code&gt;。复杂度为RM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;KMP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pat.charAt(0)&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;mismatch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pat.charAt[(j)&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;dfa&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pat.charAt(j)&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;对字符的读取最多不超过N+M次，而dfa矩阵的构建的时间空间复杂度为RM&lt;/li&gt;
&lt;li&gt;如果字符为unicode等R比较大的字符集，应该采用改进的KMP版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;KMP算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于一次匹配，如果匹配到pattern的当前字符位置j+1不再匹配，之前的pattern[1，j]都匹配，那么下一个可能匹配的位置设为pattern[k]，必然有&lt;code&gt;pattern[1,j-k+1] == pattern[k,j]&lt;/code&gt;。如果有多个k，那么应该取最小的一个，防止遗漏。也即：&lt;strong&gt;在pattern不匹配的字符位置之前的那个字串&lt;code&gt;pattern[1，j]&lt;/code&gt;中，找到最大的一个字串p，使得它同时是pattern[1，j]的真前缀和真后缀，这个字串p的长度为k&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;对于每一个pattern中的j+1，如果能找到k，那么就能直接得到下一个可能匹配的位置，尽量多的跳过数次匹配。这就是算法的原理。&lt;/li&gt;
&lt;li&gt;如何计算k？暴力计算当然是可以的，复杂度M^2。有一种简化的方法&lt;ul&gt;
&lt;li&gt;分析j+1与j+2之间的关系，如果&lt;code&gt;pattern[1,j-k+1]&lt;/code&gt;的后一个字符&lt;code&gt;pattern[j-k+2] == pattern[j+1]&lt;/code&gt;，则pattern[1，j+1]前后缀相等关系依然保持，&lt;code&gt;k'= k+1&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果两者不等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>Python的特性</title><link href="http://heloman.github.io/pages/2014/07/pythonde-te-xing.html" rel="alternate"></link><published>2014-07-02T16:11:15+08:00</published><updated>2014-07-02T16:11:15+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-07-02:/pages/2014/07/pythonde-te-xing.html</id><summary type="html">&lt;p&gt;Python的特性
Python于1991年发布，创始人现在在Google&lt;/p&gt;
&lt;h2&gt;特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;动态类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量在运行时绑定，获得一个数据类型之后还可以更改，数据类型在赋值后确定&lt;/li&gt;
&lt;li&gt;变量皆为对象的引用&lt;/li&gt;
&lt;li&gt;修改不可变类型时会创建新的对象，而可变类型（list,dict）则是直接修改对象&lt;/li&gt;
&lt;li&gt;特别注意在函数传递时，传递的都是引用，如有对对象的修改要当心&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;强类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1+"2"会报错，不能自动进行类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动内存管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数与短字符串对象会被缓存重用&lt;/li&gt;
&lt;li&gt;每个对象都保存有引用计数&lt;/li&gt;
&lt;li&gt;使用引用计数完成GC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解释型交互语言&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;自省&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;为什么选择python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;支持OO中的多重继承
C++支持，但Java不支持，但可以使用接口实现相同的功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开源 免费&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;真正的易于移植&lt;/li&gt;
&lt;li&gt;强大的库&lt;/li&gt;
&lt;li&gt;易于与其他语言混合&lt;/li&gt;
&lt;li&gt;易学易用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;语法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;空格缩进对齐，换行表示一行代码的结束&lt;/li&gt;
&lt;li&gt;赋值操作的是reference，x=y使x指向y指向的对象&lt;/li&gt;
&lt;li&gt;执行方式：&lt;ul&gt;
&lt;li&gt;python -i a …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Python的特性
Python于1991年发布，创始人现在在Google&lt;/p&gt;
&lt;h2&gt;特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;动态类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量在运行时绑定，获得一个数据类型之后还可以更改，数据类型在赋值后确定&lt;/li&gt;
&lt;li&gt;变量皆为对象的引用&lt;/li&gt;
&lt;li&gt;修改不可变类型时会创建新的对象，而可变类型（list,dict）则是直接修改对象&lt;/li&gt;
&lt;li&gt;特别注意在函数传递时，传递的都是引用，如有对对象的修改要当心&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;强类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1+"2"会报错，不能自动进行类型转换&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动内存管理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整数与短字符串对象会被缓存重用&lt;/li&gt;
&lt;li&gt;每个对象都保存有引用计数&lt;/li&gt;
&lt;li&gt;使用引用计数完成GC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解释型交互语言&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;自省&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;为什么选择python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;支持OO中的多重继承
C++支持，但Java不支持，但可以使用接口实现相同的功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;开源 免费&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;真正的易于移植&lt;/li&gt;
&lt;li&gt;强大的库&lt;/li&gt;
&lt;li&gt;易于与其他语言混合&lt;/li&gt;
&lt;li&gt;易学易用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;语法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;空格缩进对齐，换行表示一行代码的结束&lt;/li&gt;
&lt;li&gt;赋值操作的是reference，x=y使x指向y指向的对象&lt;/li&gt;
&lt;li&gt;执行方式：&lt;ul&gt;
&lt;li&gt;python -i a.py命令可以使命令运行之后持续交互&lt;/li&gt;
&lt;li&gt;exec('a.py')&lt;/li&gt;
&lt;li&gt;import a 变量x需要a.x使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符串的截取：s[i:j:k]每间隔k个取一个&lt;/li&gt;
&lt;li&gt;array相比list做运算很快，默认的操作是对每一个元素操作&lt;/li&gt;
&lt;li&gt;拷贝&lt;ul&gt;
&lt;li&gt;copy.copy() 浅拷贝，只拷贝对象&lt;/li&gt;
&lt;li&gt;copy.deepcopy() 深拷贝，同时拷贝对象和子对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;list comprehension很常用：&lt;code&gt;[exp for var in list if condition]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;并行赋值：可以一次赋值多个变量&lt;/li&gt;
&lt;li&gt;异常处理：&lt;code&gt;try except finally&lt;/code&gt;，&lt;code&gt;raise&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Django&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MTV架构，M/T/V分别相当于MVC中的M/V/C&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20140604c traps and pitfalls</title><link href="http://heloman.github.io/pages/2014/06/20140604c-traps-and-pitfalls.html" rel="alternate"></link><published>2014-06-30T02:55:57+08:00</published><updated>2014-06-30T02:55:57+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-06-30:/pages/2014/06/20140604c-traps-and-pitfalls.html</id><summary type="html">&lt;p&gt;看完《C陷阱与缺陷》，忍不住要重新翻一下，记录一下与自己的惯性思维不符合的地方。记录的是知识的增量，是这几天的流量，而不是存量。
这本书是在ASCI C/C89订制之前写的，有些地方有疏漏。&lt;/p&gt;
&lt;h2&gt;第一章 词法陷阱&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.3 C语言中解析符号时使用贪心策略，如&lt;code&gt;x+++++y&lt;/code&gt;将被解析为&lt;code&gt;x++ ++ +y&lt;/code&gt;，并编译出错。&lt;/li&gt;
&lt;li&gt;1.5 单引号引起的一个字符代表一个对应的整数，对于采用ASCII字符集的编译器而言，'a'与0141、97含义一致。&lt;/li&gt;
&lt;li&gt;练习1.1 嵌套注释（如&lt;code&gt;/*/**/*/&lt;/code&gt;）只在某些C编译器中允许，如gcc4.8.2编译时是不支持的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第二章 语法陷阱&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2.6 else始终与同一个括号内最近的未匹配的if结合&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第三章 语义陷阱&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;3.1 &lt;code&gt;int a[12][31 …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;看完《C陷阱与缺陷》，忍不住要重新翻一下，记录一下与自己的惯性思维不符合的地方。记录的是知识的增量，是这几天的流量，而不是存量。
这本书是在ASCI C/C89订制之前写的，有些地方有疏漏。&lt;/p&gt;
&lt;h2&gt;第一章 词法陷阱&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1.3 C语言中解析符号时使用贪心策略，如&lt;code&gt;x+++++y&lt;/code&gt;将被解析为&lt;code&gt;x++ ++ +y&lt;/code&gt;，并编译出错。&lt;/li&gt;
&lt;li&gt;1.5 单引号引起的一个字符代表一个对应的整数，对于采用ASCII字符集的编译器而言，'a'与0141、97含义一致。&lt;/li&gt;
&lt;li&gt;练习1.1 嵌套注释（如&lt;code&gt;/*/**/*/&lt;/code&gt;）只在某些C编译器中允许，如gcc4.8.2编译时是不支持的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第二章 语法陷阱&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2.6 else始终与同一个括号内最近的未匹配的if结合&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第三章 语义陷阱&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;3.1 &lt;code&gt;int a[12][31]&lt;/code&gt;表示的是一个长度12的数组，每个元素是一个长度31的数组。&lt;/li&gt;
&lt;li&gt;3.1 在需要指针的地方如果使用数组名来替换，那么数组名就被视为其下标为0的元素的指针，&lt;code&gt;p = &amp;amp;a&lt;/code&gt;的写法是非法的（gcc4.8.2只是警告）。&lt;/li&gt;
&lt;li&gt;3.2 如何连接两个给出的字符串s、t？细节很重要，书中给出的答案如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;原文称不能直接声明一个&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;t长度之和的数组&lt;/span&gt;&lt;span class="err"&gt;，但&lt;/span&gt;&lt;span class="n"&gt;c99可以声明变长数组&lt;/span&gt;&lt;span class="err"&gt;，已经可以了&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;记得要把长度加&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;必须判断内存是否分配成功&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;complain&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;strcat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;......&lt;/span&gt;

&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;完成之后一定要释放&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;
&lt;span class="k"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;3.6 如何正确计算数组的边界？原则一，考虑最简单情况下的特例；原则二，仔细计算边界。&lt;/li&gt;
&lt;li&gt;3.6 以下一段代码为何引起死循环？这是因为在内存地址递减时，a[10]就是i。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;3.6 边界的编程技巧：用第一个入界点和第一个出界点表示数值范围，即[low,high)。这样的效果是&lt;ul&gt;
&lt;li&gt;取值范围的大小为两者之差。&lt;/li&gt;
&lt;li&gt;若取值范围为空，则上界等于下界。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3.6 &lt;code&gt;--n&lt;/code&gt;一般比&lt;code&gt;n--&lt;/code&gt;执行速度更快。&lt;/li&gt;
&lt;li&gt;3.7 运算符&amp;amp;&amp;amp;和||保证两个操作数从左至右求值，其他运算符的操作数求值顺序未定义。比如&lt;code&gt;y[i] = x[i++]&lt;/code&gt;结果是未定义的。&lt;/li&gt;
&lt;li&gt;3.9 如何检测a+b是否溢出？&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if(a+b &amp;lt; 0)&lt;/code&gt;是不正确的，因为溢出时的行为是未定义的。正确的方法是将两者转换为unsigned型与INT_MAX比较&lt;/li&gt;
&lt;li&gt;更巧妙的方法：&lt;code&gt;if(a &amp;gt; INT_MAX - b)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第四章 连接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;4.2 &lt;code&gt;int a&lt;/code&gt;若出现在所有函数体之外，则完成了声明与定义（分配存储空间）。而&lt;code&gt;extern int a;&lt;/code&gt;只是声明，说明a的存储空间是在其他地方分配的，不是定义；因此必须在别的某个地方定义，同一个或不同的源文件均可。&lt;/li&gt;
&lt;li&gt;4.3 static修饰符可以将一个函数或变量的作用域限制在一个源文件之内，不会与其他文件中的同名量发生冲突&lt;/li&gt;
&lt;li&gt;4.5 声明与定义必须严格相同，而数组和指针是不同的。&lt;/li&gt;
&lt;li&gt;4.6 如何避免声明与定义不符？遵守“每个外部对象只在一个地方声明”的规则即可。一般放在头文件中，所有用到此外部对象的源文件都要包括此头文件，定义此对象的文件也应该包括此头文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第五章 库函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;5.1 getchar()返回整数，不能把返回值赋值给char型变量再与EOF比较，因为EOF定义为-1，应该赋值给int型变量。&lt;/li&gt;
&lt;li&gt;5.2 如果要对文件进行连续的read和write操作，则中间必须插入fseek函数调用。&lt;/li&gt;
&lt;li&gt;5.3 &lt;code&gt;setbuf(stdout, buf);&lt;/code&gt;可以强制将buf指向的char数组设为缓冲区，改变输出缓存大小。&lt;/li&gt;
&lt;li&gt;5.3 书中使用缓冲区把stdin的内容复制到stdout的程序是错误的，因为缓冲区内容的写出直到缓冲区满或调用fflush才开始完成。可以把buf声明为静态的或者malloc在堆中，防止main函数结束后buf清空。&lt;/li&gt;
&lt;li&gt;5..1 一个程序异常终止时，程序输出的最后一部分常常丢失，可以使用setbuf指向一个空指针作为缓冲区&lt;/li&gt;
&lt;li&gt;5..2 putchar/getchar在stdio.h中使用宏实现，如果没有包括stdio.h，很大可能仍能运行，但是使用相应的函数代替，速度降低。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第六章 预处理器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;6 宏只是对文本处理，是一个表达式，不是函数或语句&lt;/li&gt;
&lt;li&gt;6.1 宏定义最好把每个参数和整个表达式使用括号括起来防止出错。&lt;/li&gt;
&lt;li&gt;6.2 如果一个操作数在两个地方用到，将被求值两次。解决方案：操作数应该没有副作用；将宏实现为函数。&lt;/li&gt;
&lt;li&gt;6.2 宏可能产生非常庞大的表达式。&lt;/li&gt;
&lt;li&gt;6.3 宏的分号的使用很麻烦，assert的一种正确实现：&lt;code&gt;#define assert(e) ((void)((e)||_assert_error(__FILE__,__LINE__)))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;6.4 &lt;code&gt;typedef struct foo FOOTYPE&lt;/code&gt;是类型定义语句，定义了一个新的类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;第七章 可移植性缺陷&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;7.4 编译器实现可能将字符当作有符号或无符号的。char转换为int时结果未定义，可以使用unsigned char避免。&lt;/li&gt;
&lt;li&gt;7.4 将字符变量转换为无符号整数时应该使用&lt;code&gt;(unsigned char)c&lt;/code&gt;而不是&lt;code&gt;(unsigned)c&lt;/code&gt;，后者将c转换为int再转换为unsigned int。&lt;/li&gt;
&lt;li&gt;7.5 除法运算速度大大慢于移位。&lt;/li&gt;
&lt;li&gt;7.7 整数除法运算时，仅规定&lt;code&gt;商 x 除数 + 余数 == 被除数&lt;/code&gt;，大多数实现在负数的除法时，只保证余数与被除数正负号相同，商与被除数的符号无关。应尽量使n为无符号数。 &lt;/li&gt;
&lt;li&gt;7.9 toupper/tolower函数均采用int型参数，实现时要检查输入是否符合要求，采用置位实现非常快速。&lt;/li&gt;
&lt;li&gt;7.11 要求一个按位输出long型数字。需要考虑：不能对-n求值，可能溢出（边界条件），应该把n转换为负的再处理；余数的符号未知，应做归一化处理。&lt;/li&gt;
&lt;li&gt;7..2 atoi函数把字符串转换为long型整数，应该按照负数来处理以避免溢出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Python源码剖析</title><link href="http://heloman.github.io/pages/2014/06/pythonyuan-ma-pou-xi.html" rel="alternate"></link><published>2014-06-30T01:42:11+08:00</published><updated>2014-06-30T01:42:11+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-06-30:/pages/2014/06/pythonyuan-ma-pou-xi.html</id><content type="html"></content><category term="misc"></category></entry><entry><title>程序员的自我修养</title><link href="http://heloman.github.io/pages/2014/06/cheng-xu-yuan-de-zi-wo-xiu-yang.html" rel="alternate"></link><published>2014-06-25T03:44:33+08:00</published><updated>2014-06-25T03:44:33+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-06-25:/pages/2014/06/cheng-xu-yuan-de-zi-wo-xiu-yang.html</id><summary type="html">&lt;h3&gt;第十章&lt;/h3&gt;
&lt;h4&gt;10.1 程序的内存布局&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;linux下从0xc0000000开始到0xffffffff的1GB空间映射给内核，剩余3GB为用户空间&lt;/li&gt;
&lt;li&gt;0x08048000开始为代码区和数据区，即可执行文件。之前为系统保留区，约128MB&lt;/li&gt;
&lt;li&gt;可执行文件被映射到计算机内存中，包括只读的.text、.rodata，以及可读写的.data、.bss数据段。其中bss段由于保存的是未初始化的全局变量，在可执行文件中占用空间极少，并在加载程序时初始化为0&lt;/li&gt;
&lt;li&gt;动态链接库映射区从0x40000000开始，2.6内核之后已经挪到0xbfxxxxxx附近&lt;/li&gt;
&lt;li&gt;堆在可读写区之后，栈在内核空间之前，自高向下增长。堆和栈都可以动态增长&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;10.2.1 “烫”“屯”出现的原因&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;VC调试程序时，未初始化的变量或内存值通常是烫，这是因为debug模式下所有分配的栈空间字节初始化为0xCC，而0xCCCC就是汉字中的“烫”。而未初始化的堆内存则全部是0xCD，0xCDCD对应的汉字为“屯”。&lt;/li&gt;
&lt;li&gt;这些是为了方便调试时判断一个变量是否初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;10.2.2 函数调用规范&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;调用惯例规定了函数的参数传递顺序与方式、栈的维护方、名字修饰策略&lt;/li&gt;
&lt;li&gt;C语言默认惯例是cdecl …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;第十章&lt;/h3&gt;
&lt;h4&gt;10.1 程序的内存布局&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;linux下从0xc0000000开始到0xffffffff的1GB空间映射给内核，剩余3GB为用户空间&lt;/li&gt;
&lt;li&gt;0x08048000开始为代码区和数据区，即可执行文件。之前为系统保留区，约128MB&lt;/li&gt;
&lt;li&gt;可执行文件被映射到计算机内存中，包括只读的.text、.rodata，以及可读写的.data、.bss数据段。其中bss段由于保存的是未初始化的全局变量，在可执行文件中占用空间极少，并在加载程序时初始化为0&lt;/li&gt;
&lt;li&gt;动态链接库映射区从0x40000000开始，2.6内核之后已经挪到0xbfxxxxxx附近&lt;/li&gt;
&lt;li&gt;堆在可读写区之后，栈在内核空间之前，自高向下增长。堆和栈都可以动态增长&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;10.2.1 “烫”“屯”出现的原因&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;VC调试程序时，未初始化的变量或内存值通常是烫，这是因为debug模式下所有分配的栈空间字节初始化为0xCC，而0xCCCC就是汉字中的“烫”。而未初始化的堆内存则全部是0xCD，0xCDCD对应的汉字为“屯”。&lt;/li&gt;
&lt;li&gt;这些是为了方便调试时判断一个变量是否初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;10.2.2 函数调用规范&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;调用惯例规定了函数的参数传递顺序与方式、栈的维护方、名字修饰策略&lt;/li&gt;
&lt;li&gt;C语言默认惯例是cdecl，参数从右至左入栈，函数调用方维护栈，名字修饰为函数名前加一个下划线&lt;/li&gt;
&lt;li&gt;初次之外还有stdcall、fastcall、pascal、naked call等惯例&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;10.2.3 函数返回值&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;一般使用不超过8字节的数据使用eax与edx寄存器&lt;/li&gt;
&lt;li&gt;超过8字节一般在调用方开辟临时空间，被调函数把待返回数据复制到临时空间，再复制到待赋值的变量&lt;/li&gt;
&lt;li&gt;对应于C语言中的两次复制，C++返回一个对象时调用两次拷贝构造函数，但ROV可以对此优化&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;10.3.2 linux进程的堆管理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;系统调用开销大，因此对堆空间的管理由运行库申请一大块堆空间后管理分配&lt;/li&gt;
&lt;li&gt;linux下brk与mmap系统调用都可以分配堆空间&lt;ul&gt;
&lt;li&gt;brk设置进程数据段的结束位置，数据段空间增量就可以用作堆空间，最常用&lt;/li&gt;
&lt;li&gt;mmap函数是将内存映射到文件，若不映射文件则称为匿名空间，可作为堆空间，只能是系统页大小（4KB）的整数倍&lt;/li&gt;
&lt;li&gt;glibc中的malloc函数以128kB为界，小于此大小在现有堆空间分配，否则使用mmap分配一块内存空间，再在此匿名空间内分配空间&lt;/li&gt;
&lt;li&gt;使用mmap实现malloc函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;void *malloc(size_t nbytes)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;    void * ret = mmap(0, nbytes, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 0,0);&lt;/span&gt;
&lt;span class="err"&gt;    if(ret == MAP_FAILED)&lt;/span&gt;
&lt;span class="err"&gt;        return 0;&lt;/span&gt;
&lt;span class="err"&gt;    return ret;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;10.3.3 Windows进程的堆管理&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;win的进程地址空间是很破碎的，每个进程有一个默认1MB的栈&lt;/li&gt;
&lt;li&gt;VirtualAlloc与mmap类似可以用于申请堆空间。但堆管理器已经提供了一套API&lt;/li&gt;
&lt;li&gt;malloc申请的内存在进程结束后不会存在。进程结束后，所有相关资源包括地址空间、物理内存、io都被回收&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;10.3.4 堆分配算法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;获得内存后，需要按需分配给程序，并回收。这就是堆分配算法&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空闲链表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将堆中各个空闲块以链表串起，每个空闲块头部的header结构体记录上一个与下一个空闲块地址，并在每个块中保存空间大小&lt;/li&gt;
&lt;li&gt;分配时查找到一个满足请求大小的空闲块，分配后将剩余部分添加回链表&lt;/li&gt;
&lt;li&gt;优缺点：实现简单，但访问越界时易于被破坏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位图bitmap&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memcached的内存管理思想类似&lt;/li&gt;
&lt;li&gt;将堆分配为大量大小相同的块，只分配整数个块给用户。使用整数数组来记录块的使用状态，只需要2bit，称为位图&lt;/li&gt;
&lt;li&gt;优点：速度快（位图数组连续cache易名字），稳定（备份位图可防止破坏），位图易于管理&lt;/li&gt;
&lt;li&gt;缺点：易产生碎片浪费，位图较大时效率低（使用多级位图改善）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象池&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;被分配对象大小固定时把堆分为对象大小的块，可使用链表或位图管理，速度快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;glibc对于小于128KB的申请按照大小采用不同的分配算法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="misc"></category></entry><entry><title>20140624codeforces解初体验</title><link href="http://heloman.github.io/pages/2014/06/20140624codeforcesjie-chu-ti-yan.html" rel="alternate"></link><published>2014-06-24T15:30:46+08:00</published><updated>2014-06-24T15:30:46+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-06-24:/pages/2014/06/20140624codeforcesjie-chu-ti-yan.html</id><summary type="html">&lt;h2&gt;Codeforces印象&lt;/h2&gt;
&lt;p&gt;这两天抽时间去codeforces体验了一把。
首先，果然有众多大牛存在，很多名人一直参加每周一次的比赛，积分2000+，并参与出题。
另外，上面题目很多，估计至少一千题。比赛结束后，题目将转为练习题，可以持续尝试。每道题目都有标签，如greedy， math， matrices等等，可以点击相应的标签只做相关的题目。可惜我做了好几道之后才发现。&lt;/p&gt;
&lt;h2&gt;这次解决的题目&lt;/h2&gt;
&lt;p&gt;首次尝试，这次做的几个都是选的完成人数最多的，比较简单，但还是有些东西是从中新学习到的。以后最好分类练习。&lt;/p&gt;
&lt;h3&gt;1A    Theatre Square&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用a x a的砖块去铺满面积m x n的广场，不准破坏砖块，允许超出广场，求砖块数目&lt;/li&gt;
&lt;li&gt;分别计算长宽至少多少块即可&lt;/li&gt;
&lt;li&gt;小技巧：(m-1)/a+1来计算长度方向的砖块数目&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;limits&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;Codeforces印象&lt;/h2&gt;
&lt;p&gt;这两天抽时间去codeforces体验了一把。
首先，果然有众多大牛存在，很多名人一直参加每周一次的比赛，积分2000+，并参与出题。
另外，上面题目很多，估计至少一千题。比赛结束后，题目将转为练习题，可以持续尝试。每道题目都有标签，如greedy， math， matrices等等，可以点击相应的标签只做相关的题目。可惜我做了好几道之后才发现。&lt;/p&gt;
&lt;h2&gt;这次解决的题目&lt;/h2&gt;
&lt;p&gt;首次尝试，这次做的几个都是选的完成人数最多的，比较简单，但还是有些东西是从中新学习到的。以后最好分类练习。&lt;/p&gt;
&lt;h3&gt;1A    Theatre Square&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用a x a的砖块去铺满面积m x n的广场，不准破坏砖块，允许超出广场，求砖块数目&lt;/li&gt;
&lt;li&gt;分别计算长宽至少多少块即可&lt;/li&gt;
&lt;li&gt;小技巧：(m-1)/a+1来计算长度方向的砖块数目&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;limits&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kr"&gt;long&lt;/span&gt; &lt;span class="kr"&gt;long&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;//cout &amp;lt;&amp;lt; numeric_limits&amp;lt;long&amp;gt;::max() &amp;lt;&amp;lt; endl;&lt;/span&gt;
  &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4A    Watermelon&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;太过简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;158A  Next Round&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;太过简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;71A   Way Too Long Words&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;给定一个单词，如果长度超过10，改成缩写形式：首字母+中间的字母个数+尾字母&lt;/li&gt;
&lt;li&gt;直接输出结果即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;118A  String Task&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;给定一个单词，删掉所有元音字母，其余字母转换为小写并每个字母前加.符号&lt;/li&gt;
&lt;li&gt;使用ostringstream和tolower函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;ostringstream&lt;/span&gt; &lt;span class="n"&gt;ostr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;auto&lt;/span&gt; &lt;span class="nl"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kr"&gt;char&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;o&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;e&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;u&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;ostr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ostr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;158B  Taxi&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;n个小组，每组不超过4人，出租车每车不能超过4人，同组人不能分开，求最少要多少辆车&lt;/li&gt;
&lt;li&gt;贪心，尽量坐满每一辆车，剩下的进行组合&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// can&amp;#39;t initialize a vector with its element;&lt;/span&gt;
  &lt;span class="c1"&gt;//vector&amp;lt;int&amp;gt; test(1,2,3,4);&lt;/span&gt;
  &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num_taxi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;num_taxi&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
    &lt;span class="n"&gt;num_taxi&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;num_taxi&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;num_taxi&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;num_taxi&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;num_taxi&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;50A   Domino piling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;mxn的广场用2x1的砖块铺满，至少多少块？&lt;/li&gt;
&lt;li&gt;分析m,n在为奇偶的情况下的铺法即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;231A  Team&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;太过简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;116A  Tram&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;太多简单&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;131A  cAPS lOCK&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根据特定条件更改字符串中的字母大小写&lt;/li&gt;
&lt;li&gt;关键是如何遍历字符串中的字符并更改大小写&lt;/li&gt;
&lt;li&gt;for(char &amp;amp;c:s) 可以方便的遍历字符串&lt;/li&gt;
&lt;li&gt;cctype头文件中包含了islower,tolower,isupper,toupper等char字符处理函数&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;cctype&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;meet_rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;char&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;islower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kr"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;meet_rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;char&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nl"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;true&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;islower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;toupper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; 
                &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;282A  Bit++&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;太过简单&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点我&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140603Memcached</title><link href="http://heloman.github.io/pages/2014/06/20140603memcached.html" rel="alternate"></link><published>2014-06-03T21:11:53+08:00</published><updated>2014-06-03T21:11:53+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-06-03:/pages/2014/06/20140603memcached.html</id><summary type="html">&lt;h1&gt;Memcached&lt;/h1&gt;
&lt;p&gt;Memcached是一套分布式的内存对象缓存系统，使用C语言编写，作为数据库的前端cache，缓存数据库查询结果可以减轻数据库负载。
类似一张巨大的hash表，缓存的对象以key-value对的形式存在。&lt;/p&gt;
&lt;h2&gt;工作流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;检查客户端请求的数据是否在Memcached中存在，若存在直接返回结果&lt;/li&gt;
&lt;li&gt;若不存在，查询数据库，返回结果并把结果缓存&lt;/li&gt;
&lt;li&gt;每次修改数据库时要同时更新Memcached数据&lt;/li&gt;
&lt;li&gt;内存空间用完之后使用LRU算法替换缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;特点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;基于文本行的协议，可以直接通过telnet管理&lt;/li&gt;
&lt;li&gt;基于libevent，异步io，高性能。libevent是个程序库，它将Linux的epoll、BSD类操作系统的kqueue等事件处理功能 封装成统一的接口。&lt;/li&gt;
&lt;li&gt;对被缓存的数据没有备份，重启后对数据库产生较大的压力&lt;/li&gt;
&lt;li&gt;memcached不互相通信的分布式，分布式由客户端完成&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;工作原理&lt;/h2&gt;
&lt;p&gt;服务守护进程运行后，客户端连接到服务进程进行操作。目前支持python,c,php等多种客户端。服务进程基于事件的单进程单线程实现。
- 内存管理
内存使用slab分配器分配，这种方案可以减少内存碎片和内存分配释放次数，加快处理速度。服务进程把分配的内存分割成各种固定尺寸的块，根据待缓存数据的大小选择一个最合适大小的块存入。分配的内存不会释放，而是重复利用。
数据大小和块的大小不匹配时会造成内存利用率低下。默认情况下不同大小的块的尺寸以2的增长因子扩大，可以使用'-f'选项调整增长因子。
- 分布式
分布式由客户端实现，客户端根据key来选择不同的memcached服务器 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Memcached&lt;/h1&gt;
&lt;p&gt;Memcached是一套分布式的内存对象缓存系统，使用C语言编写，作为数据库的前端cache，缓存数据库查询结果可以减轻数据库负载。
类似一张巨大的hash表，缓存的对象以key-value对的形式存在。&lt;/p&gt;
&lt;h2&gt;工作流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;检查客户端请求的数据是否在Memcached中存在，若存在直接返回结果&lt;/li&gt;
&lt;li&gt;若不存在，查询数据库，返回结果并把结果缓存&lt;/li&gt;
&lt;li&gt;每次修改数据库时要同时更新Memcached数据&lt;/li&gt;
&lt;li&gt;内存空间用完之后使用LRU算法替换缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;特点&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;基于文本行的协议，可以直接通过telnet管理&lt;/li&gt;
&lt;li&gt;基于libevent，异步io，高性能。libevent是个程序库，它将Linux的epoll、BSD类操作系统的kqueue等事件处理功能 封装成统一的接口。&lt;/li&gt;
&lt;li&gt;对被缓存的数据没有备份，重启后对数据库产生较大的压力&lt;/li&gt;
&lt;li&gt;memcached不互相通信的分布式，分布式由客户端完成&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;工作原理&lt;/h2&gt;
&lt;p&gt;服务守护进程运行后，客户端连接到服务进程进行操作。目前支持python,c,php等多种客户端。服务进程基于事件的单进程单线程实现。
- 内存管理
内存使用slab分配器分配，这种方案可以减少内存碎片和内存分配释放次数，加快处理速度。服务进程把分配的内存分割成各种固定尺寸的块，根据待缓存数据的大小选择一个最合适大小的块存入。分配的内存不会释放，而是重复利用。
数据大小和块的大小不匹配时会造成内存利用率低下。默认情况下不同大小的块的尺寸以2的增长因子扩大，可以使用'-f'选项调整增长因子。
- 分布式
分布式由客户端实现，客户端根据key来选择不同的memcached服务器。
一般使用hash值mod服务器台数来选择。这样当服务器台数发生变化时会造成大量key对应的服务器改变，短时间内数据库服务器负载非常大。一致性hash可以解决这个问题。
    - 一致性hash使用普通的hash将每个key映射到圆环上的一个点，而每个服务器节点也映射到圆环上的一个点。根据key对应的圆环上的点顺时针行进找到的第一个节点即为应保存的位置。
    - 对服务器节点hash时很难做到服务器节点在圆环上的均匀分布，可以采用虚拟节点的思想，为每个服务器在圆环上分配100~200个点，做到更均匀的hash。
    - 当移除或增加一个服务器节点时，只有此节点对应的key的缓存受到影响。
　
　
&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点我&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>git</title><link href="http://heloman.github.io/pages/2014/05/git.html" rel="alternate"></link><published>2014-05-21T13:55:58+08:00</published><updated>2014-05-21T13:55:58+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-05-21:/pages/2014/05/git.html</id><content type="html">&lt;h1&gt;使用Git完成版本控制&lt;/h1&gt;
&lt;p&gt;我经常同时保存一个程序或一个文档的不同版本，采取的方式就是文件名上面加上日期。
版本控制在团队开发大型项目中是必须的&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140520Ruby on Rails开发Web应用的基本概念</title><link href="http://heloman.github.io/pages/2014/05/20140520ruby-on-railskai-fa-webying-yong-de-ji-ben-gai-nian.html" rel="alternate"></link><published>2014-05-20T10:39:23+08:00</published><updated>2014-05-20T10:39:23+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-05-20:/pages/2014/05/20140520ruby-on-railskai-fa-webying-yong-de-ji-ben-gai-nian.html</id><summary type="html">&lt;h2&gt;Web应用架构&lt;/h2&gt;
&lt;h3&gt;C/S架构&lt;/h3&gt;
&lt;p&gt;Web应用从最初就采用C/S架构。Server负责监听客户端请求，提供资源，Client向server发起请求并渲染页面。两者通过TCP/IP协议栈之上的HTTP协议通信。&lt;/p&gt;
&lt;h3&gt;多层架构&lt;/h3&gt;
&lt;p&gt;在Web 2.0时代，随着交互性的要求，这个架构变得更为复杂。Server需要提供更复杂的服务，Client也要完成更多的交互任务，涌现出很多新的提供更快更好服务的技术。相应的，C/S架构需要以一种更复杂的方式来组织，即多层架构。
多层架构中的每一层负责提供一个特定的功能，与其他层通过良好的接口进行交互，易于升级维护。原始的C/S架构可以视作Server、Client两层。&lt;/p&gt;
&lt;h4&gt;3层架构&lt;/h4&gt;
&lt;p&gt;典型的3层架构为表示层，逻辑层，数据层
- 表示层由浏览器负责渲染
- 逻辑层由服务器端操纵数据，并发往表示层
- 数据层负责存储数据。&lt;/p&gt;
&lt;h4&gt;6层架构&lt;/h4&gt;
&lt;p&gt;如果进一步分割，就得到6层架构，如下图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示层分为Client层和表示逻辑层&lt;/li&gt;
&lt;li&gt;Client层负责渲染展示页面&lt;/li&gt;
&lt;li&gt;表示逻辑层为Server根据脚本生成网页&lt;/li&gt;
&lt;li&gt;逻辑层分为商业逻辑层和数据访问层&lt;/li&gt;
&lt;li&gt;事务逻辑层表征事务逻辑和流程&lt;/li&gt;
&lt;li&gt;数据访问层负责存取数据，发往事务逻辑层 &lt;/li&gt;
&lt;li&gt;服务端通常有网络层负责网络&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ruby …&lt;/h2&gt;</summary><content type="html">&lt;h2&gt;Web应用架构&lt;/h2&gt;
&lt;h3&gt;C/S架构&lt;/h3&gt;
&lt;p&gt;Web应用从最初就采用C/S架构。Server负责监听客户端请求，提供资源，Client向server发起请求并渲染页面。两者通过TCP/IP协议栈之上的HTTP协议通信。&lt;/p&gt;
&lt;h3&gt;多层架构&lt;/h3&gt;
&lt;p&gt;在Web 2.0时代，随着交互性的要求，这个架构变得更为复杂。Server需要提供更复杂的服务，Client也要完成更多的交互任务，涌现出很多新的提供更快更好服务的技术。相应的，C/S架构需要以一种更复杂的方式来组织，即多层架构。
多层架构中的每一层负责提供一个特定的功能，与其他层通过良好的接口进行交互，易于升级维护。原始的C/S架构可以视作Server、Client两层。&lt;/p&gt;
&lt;h4&gt;3层架构&lt;/h4&gt;
&lt;p&gt;典型的3层架构为表示层，逻辑层，数据层
- 表示层由浏览器负责渲染
- 逻辑层由服务器端操纵数据，并发往表示层
- 数据层负责存储数据。&lt;/p&gt;
&lt;h4&gt;6层架构&lt;/h4&gt;
&lt;p&gt;如果进一步分割，就得到6层架构，如下图&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示层分为Client层和表示逻辑层&lt;/li&gt;
&lt;li&gt;Client层负责渲染展示页面&lt;/li&gt;
&lt;li&gt;表示逻辑层为Server根据脚本生成网页&lt;/li&gt;
&lt;li&gt;逻辑层分为商业逻辑层和数据访问层&lt;/li&gt;
&lt;li&gt;事务逻辑层表征事务逻辑和流程&lt;/li&gt;
&lt;li&gt;数据访问层负责存取数据，发往事务逻辑层 &lt;/li&gt;
&lt;li&gt;服务端通常有网络层负责网络&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Ruby on Rails&lt;/h2&gt;
&lt;p&gt;Ruby on Rails是一个基于Ruby开发的构建Web应用的开源框架或者开源库，Twitter、Hulu、Github、Iteye等公司都采用了rails
框架。&lt;/p&gt;
&lt;h3&gt;组件&lt;/h3&gt;
&lt;p&gt;Ruby on Rails包含一系列组件
- Rake：类似于make，可以用来修改、迁移数据库
- WEBrick:一个Rails内置的HTTP服务器，可以使用rails server命令启动，速度较慢，适合完成开发阶段的测试
- SQLite：最简单的数据库，同样只适合开发阶段的测试
- Rack Middleware：中间件，用于服务器软件和应用之间的交互&lt;/p&gt;
&lt;h3&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不适合海量服务，Twitter已经由ROR转向Scala&lt;/li&gt;
&lt;li&gt;它是一个框架，隐藏了太多细节&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;MVC架构&lt;/h3&gt;
&lt;p&gt;Model表示数据，View使用数据渲染页面，而Controller是媒介。View和Model的严格分离保留了重用性。
使用Rails创建应用时会自动按照MVC架构生成相关代码，包括：
- 表示Model的一个类，数据库中会建立相应的表
- 一个Controller，相应的URL解析和数据库中的操作会一一对应好
- View包括一系列html文件用来渲染页面&lt;/p&gt;
&lt;h3&gt;Active Record&lt;/h3&gt;
&lt;p&gt;Active Record机制使object-relational mapping (ORM)变得可行。在Ruby中以ActiveRecord模块的形式出现。ORM映射机制为：
- class - table
- object - record（表的一行）
- attribute - record value（表的一列）&lt;/p&gt;
&lt;p&gt;ActiveRecord模块提供以下功能：
- 与数据库建立连接
- 表的创建
- ORM映射
- 使用object完成CRUD操作(Create、Read、Update、Delete)&lt;/p&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140518C++11新特性</title><link href="http://heloman.github.io/pages/2014/05/20140518c11xin-te-xing.html" rel="alternate"></link><published>2014-05-18T10:09:00+08:00</published><updated>2014-05-18T10:09:00+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-05-18:/pages/2014/05/20140518c11xin-te-xing.html</id><summary type="html">&lt;h1&gt;C++11新特性&lt;/h1&gt;
&lt;p&gt;C++11已经推出三年了（2011），编译器GCC4.7、Clang3.1在2012年已经逐渐完善，VS2013也已经支持相关特性，GCC4.8.1支持全部特性。不过新特性似乎在工业界并未得到太多应用，可能出于兼容性和稳定性的考虑吧。
推出的新特性还是相当的丰富，看下面这张图就知道了。我仅仅在这里提一下相对比较容易应用的部分，包括语法上的一些扩展以及改进，lambda表达式以及正则式等比较复杂，暂且不提。&lt;/p&gt;
&lt;h2&gt;统一初始化&lt;/h2&gt;
&lt;p&gt;以往的C++可以使用很多种方法完成初始化，而且传统的构造函数类似于函数声明，不是非常直观。而新标准把数组的初始化方法推广为统一的初始化方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;int i{0};&lt;/span&gt;
&lt;span class="err"&gt;float f{2.0};&lt;/span&gt;
&lt;span class="err"&gt;ClassA a{a,&amp;#39;c&amp;#39;,&amp;quot;foo&amp;quot;}; &lt;/span&gt;
&lt;span class="err"&gt;int i{2.0};//error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种方法不会造成narrowing，编程风格更为统一。&lt;/p&gt;
&lt;h2&gt;类型推导&lt;/h2&gt;
&lt;p&gt;引入auto和decltype关键字。auto可以根据表达式或函数返回值在编译阶段得到正确的类型。而decltype可以在编译时确定一个表达式的类型 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;C++11新特性&lt;/h1&gt;
&lt;p&gt;C++11已经推出三年了（2011），编译器GCC4.7、Clang3.1在2012年已经逐渐完善，VS2013也已经支持相关特性，GCC4.8.1支持全部特性。不过新特性似乎在工业界并未得到太多应用，可能出于兼容性和稳定性的考虑吧。
推出的新特性还是相当的丰富，看下面这张图就知道了。我仅仅在这里提一下相对比较容易应用的部分，包括语法上的一些扩展以及改进，lambda表达式以及正则式等比较复杂，暂且不提。&lt;/p&gt;
&lt;h2&gt;统一初始化&lt;/h2&gt;
&lt;p&gt;以往的C++可以使用很多种方法完成初始化，而且传统的构造函数类似于函数声明，不是非常直观。而新标准把数组的初始化方法推广为统一的初始化方法:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;int i{0};&lt;/span&gt;
&lt;span class="err"&gt;float f{2.0};&lt;/span&gt;
&lt;span class="err"&gt;ClassA a{a,&amp;#39;c&amp;#39;,&amp;quot;foo&amp;quot;}; &lt;/span&gt;
&lt;span class="err"&gt;int i{2.0};//error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这种方法不会造成narrowing，编程风格更为统一。&lt;/p&gt;
&lt;h2&gt;类型推导&lt;/h2&gt;
&lt;p&gt;引入auto和decltype关键字。auto可以根据表达式或函数返回值在编译阶段得到正确的类型。而decltype可以在编译时确定一个表达式的类型。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;const_iterator&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;decltype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到可以减少代码工作量。
另外，用于模版编程可以很好的用于模版编程：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;template&amp;lt;class T1, class T2&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;auto f(T1 a, T2 b){&lt;/span&gt;
&lt;span class="err"&gt;    return a + b;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;基于范围的for循环&lt;/h2&gt;
&lt;p&gt;结合auto使用，可以很方便的对数组或各种容器完成遍历：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;for(auto &amp;amp; i:array)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;    i*=2;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;成员变量默认初始化&lt;/h2&gt;
&lt;p&gt;在定义类的时候完成成员变量的默认初始化，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;class A{&lt;/span&gt;
&lt;span class="err"&gt;    int c = 10;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;智能指针shared_ptr&lt;/h2&gt;
&lt;p&gt;可以自动完成指针的托管，离开作用域时自动delete。使用方法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;shared_ptr&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意：对同一个指针只能用来初始化至多一个shared_ptr，否则在离开作用域时会造成delete指针多次报错。&lt;/p&gt;
&lt;h2&gt;nullptr&lt;/h2&gt;
&lt;p&gt;nullptr表示空指针，其“==”是经过重载的，主要是为了消除“NULL”的歧义性。两个不同类型的指针不能判断是否相等，即使他们都是nullptr。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;int * p = NULL;&lt;/span&gt;
&lt;span class="err"&gt;float * np = nullptr;&lt;/span&gt;
&lt;span class="err"&gt;np == NULL;//true;&lt;/span&gt;
&lt;span class="err"&gt;np == p;//false &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;右值引用&lt;/h2&gt;
&lt;p&gt;右值引用可以有效的减少深拷贝的次数。右值一般指无法取地址的表达式，实质为在表达式结束后就不存在的临时对象，使用右值引用时要注意这一点，因为这个右值可能被更改。
比如：a++是右值，而++a为左值。
某需要深拷贝的类型右值赋值给一个变量或作为函数返回值时通常会调用复制构造函数，RVO（返回值优化）在避免复制构造上面并不够好。
但我们可以给此类型定义move构造函数和move赋值函数，这样显示的使用move函数把一个变量转变为右值后，就可以调用move构造/赋值函数减少开销。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;定义了一个右值引用&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;move构造函数&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;move赋值函数&lt;/span&gt;
&lt;span class="err"&gt;}；&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;调用&lt;/span&gt;&lt;span class="n"&gt;move赋值函数&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;调用&lt;/span&gt;&lt;span class="n"&gt;move构造函数&lt;/span&gt; 
&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;但是&lt;/span&gt;&lt;span class="n"&gt;b已经作为右值被使用了&lt;/span&gt;&lt;span class="err"&gt;，可能已经被改变，错误的用法！&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140429主定理</title><link href="http://heloman.github.io/pages/2014/04/20140429zhu-ding-li.html" rel="alternate"></link><published>2014-04-29T18:54:26+08:00</published><updated>2014-04-29T18:54:26+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-04-29:/pages/2014/04/20140429zhu-ding-li.html</id><summary type="html">&lt;h2&gt;主定理&lt;/h2&gt;
&lt;p&gt;主定理最早出现在《算法导论》中，提供了分治方法带来的递归表达式的渐近复杂度分析。&lt;br&gt;
规模为n的问题通过分治，得到a个规模为n/b的问题，每次递归带来的额外计算为c(n^d)&lt;br&gt;
&lt;strong&gt;T(n) &amp;lt;= aT(n/b)+c(n^d)&lt;/strong&gt;&lt;br&gt;
那么就可以得到问题的复杂度为：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;T(n) = O(n^d log(n)), if a = b^d&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T(n) = O(n^d ), if a &amp;lt; b^d&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T(n) = O(n^logb(a))), if a &amp;gt; b^d …&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;主定理&lt;/h2&gt;
&lt;p&gt;主定理最早出现在《算法导论》中，提供了分治方法带来的递归表达式的渐近复杂度分析。&lt;br&gt;
规模为n的问题通过分治，得到a个规模为n/b的问题，每次递归带来的额外计算为c(n^d)&lt;br&gt;
&lt;strong&gt;T(n) &amp;lt;= aT(n/b)+c(n^d)&lt;/strong&gt;&lt;br&gt;
那么就可以得到问题的复杂度为：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;T(n) = O(n^d log(n)), if a = b^d&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T(n) = O(n^d ), if a &amp;lt; b^d&lt;/strong&gt;  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T(n) = O(n^logb(a))), if a &amp;gt; b^d&lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;证明方法&lt;/h2&gt;
&lt;p&gt;本来使用主定理是可以免去画递归树的，但为了证明主定理，还是需要画树。  &lt;/p&gt;
&lt;p&gt;可见，每次递归把问题分为a个规模为n/b的子问题。从根节点开始，共有logb(n)+1层，叶子节点数为a^(logb(n))。
那么，第j层共有a^j个子问题，每个问题规模为n/b^j，每个子问题运算量为c*(n/b^j)^d需要完成的计算量为：  &lt;/p&gt;
&lt;p&gt;求和得到整个问题的运算量：  &lt;/p&gt;
&lt;p&gt;那么，根据a与b^d的关系，很容易得到主定理。&lt;/p&gt;
&lt;h2&gt;应用&lt;/h2&gt;
&lt;h3&gt;二分搜索&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每次问题规模减半，a=1，b=2，d=0&lt;/li&gt;
&lt;li&gt;复杂度为n^0 log(n) = log(n)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;快速排序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;随机选择待排序序列中的一个数字作为划分字问题的标准，划分是否平均影响算法复杂度&lt;/li&gt;
&lt;li&gt;每次问题规模减半，a=2，b=2，d=1&lt;/li&gt;
&lt;li&gt;复杂度为n^2 log(n)&lt;/li&gt;
&lt;li&gt;最差情况下，复杂度为O(n^2)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;归并排序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据列均分为两部分，分别排序，之后以O(n)的复杂度进行合并，空间复杂度O(n)&lt;/li&gt;
&lt;li&gt;每次问题规模减半，a=2，b=2，d=1&lt;/li&gt;
&lt;li&gt;复杂度为n log(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;基数排序(Radix sort)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于待排序的整数序列，从最低位到最高位每次按照相应的位排序一次&lt;/li&gt;
&lt;li&gt;每次递归问题规模变为原来的1/10，但需要求解10个子问题，额外运算为O(n)的，a=10，b=10，d=1&lt;/li&gt;
&lt;li&gt;复杂度为n^1 log(n) = n log(n)，近似为O(kN)，k为整数的位数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;快速傅里叶变换：FFT&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每次问题规模减半，a=2，b=2，d=1&lt;/li&gt;
&lt;li&gt;复杂度为n log(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Karatsuba快速乘法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;正常两个n位数乘法为n^2&lt;/li&gt;
&lt;li&gt;算法把两个乘数各分为高低位两部分，如X*Y = (a+b) * (c+d) = ac+bd + (bc+ad) = ac+bd+(ac+bd - (a-b)(c-d)) &lt;/li&gt;
&lt;li&gt;只需要ac,bd,(a-b)(c-d)三次乘法&lt;/li&gt;
&lt;li&gt;每次问题规模减半，但需要解3个子问题，加法是O(n)的，a=3，b=2，d=1&lt;/li&gt;
&lt;li&gt;复杂度为n^log2(3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;，原文链接为点击打开&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>20140422Map_reduce</title><link href="http://heloman.github.io/pages/2014/04/20140422map_reduce.html" rel="alternate"></link><published>2014-04-22T17:55:48+08:00</published><updated>2014-04-22T17:55:48+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2014-04-22:/pages/2014/04/20140422map_reduce.html</id><summary type="html">&lt;h1&gt;Map-Reduce&lt;/h1&gt;
&lt;p&gt;Map-Reduce是由Google在2004年提出的大数据并行编程架构，分为Map（映射）和Reduce（化简）两个步骤，因此得名。它隐藏并行化、容错、数据分布、负载均衡等细节，可以搭建在普通PC上，程序员可以很方便完成大数据并行编程。&lt;/p&gt;
&lt;h2&gt;并行运算的效率&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;假如使用1个处理器花费T1时长可以完成任务，而使用了p个处理器需要Tp时长。那么加速比为：S(Speeup) = T1/Tp，效率为：E = S/p = T1 / (p Tp)   &lt;/li&gt;
&lt;li&gt;一般效率都小于1，而且p越大效率越低，但是在数据集增大时，效率会相应的有所提高。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;传统的并行处理架构&lt;/h2&gt;
&lt;h3&gt;数据并行架构：共享内存-分割任务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;内存（数据）是共享的，把任务分为p个部分，分别由p个处理器完成。为防止冲突，每个处理器都要在开始工作时对使用的数据段加锁，以阻塞其他任务使用这一数据段。任务完成之后，才会解锁。  &lt;/li&gt;
&lt;li&gt;很显然，如果p个处理器同时对不同的数据段进行处理，效率是很高的。但如果有冲突 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h1&gt;Map-Reduce&lt;/h1&gt;
&lt;p&gt;Map-Reduce是由Google在2004年提出的大数据并行编程架构，分为Map（映射）和Reduce（化简）两个步骤，因此得名。它隐藏并行化、容错、数据分布、负载均衡等细节，可以搭建在普通PC上，程序员可以很方便完成大数据并行编程。&lt;/p&gt;
&lt;h2&gt;并行运算的效率&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;假如使用1个处理器花费T1时长可以完成任务，而使用了p个处理器需要Tp时长。那么加速比为：S(Speeup) = T1/Tp，效率为：E = S/p = T1 / (p Tp)   &lt;/li&gt;
&lt;li&gt;一般效率都小于1，而且p越大效率越低，但是在数据集增大时，效率会相应的有所提高。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;传统的并行处理架构&lt;/h2&gt;
&lt;h3&gt;数据并行架构：共享内存-分割任务&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;内存（数据）是共享的，把任务分为p个部分，分别由p个处理器完成。为防止冲突，每个处理器都要在开始工作时对使用的数据段加锁，以阻塞其他任务使用这一数据段。任务完成之后，才会解锁。  &lt;/li&gt;
&lt;li&gt;很显然，如果p个处理器同时对不同的数据段进行处理，效率是很高的。但如果有冲突，就会带来额外的通信开销，降低效率。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;消息传递架构：消息传递-分割数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如MPI和PVM。  &lt;/li&gt;
&lt;li&gt;消息传递机制把数据分为p个数据段，p个CPU分别使用一个数据段完成同样的任务。  &lt;/li&gt;
&lt;li&gt;这种方式的问题是，一个CPU的运算需要使用另一个CPU的运算结果以完成下一步的任务，这样，它们之间就需要交换数据。  &lt;/li&gt;
&lt;li&gt;这个问题使得消息传递架构比数据并行架构更复杂。但消息传递架构更具有可扩展性，比如在数千个CPU的情况下，减少冲突是很难做到的。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;除了上述两种方式外，共享内存-分割数据和消息传递-分割任务也是可以的。  &lt;/p&gt;
&lt;h2&gt;Map-Reduce架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Map-Reduce是一种抽象的消息传递，及数据并行化的架构。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如图所示，左方为代处理数据集，右方为处理结果数据集。图中圆角矩形代表map和reduce节点，每个对应一台电脑。    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Map函数把输入数据中的一个key/value对（k1,v1）映射为一组临时key/value对（k2,v2）。每个key/value对都是被独立操作的，而且没有修改原始数据，因此Map操作是可以高度并行的，如图示map1、map2……mapM。  &lt;/li&gt;
&lt;li&gt;Reduce函数接收键为特定的k2的一组临时key/value对，并合并这些结果得到最终结果（k2,v3），这里键值k2是不变的。如图示reduce1，reduce2……reduceR。相对来说实现并行要难一些。  &lt;/li&gt;
&lt;li&gt;除了这两个函数之外，还需要做一些额外工作。&lt;ul&gt;
&lt;li&gt;每个Reduce节点只接收键固定的临时key/value对，平台要根据临时key/value对的键把key/value对送至相应的Reduce节点。&lt;/li&gt;
&lt;li&gt;临时key/value对的读写工作量也相当大。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Word counting&lt;/h2&gt;
&lt;p&gt;Word counting指的是给出一系列文档，统计所有单词的词频。Word counting就是Map-Reduce的Hello word!。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入数据：（k1,v1），k1是文档id，v1是文档内容，即图中的(d1,"w1w2w4")，d1代表文档id，w1代表一个单词  &lt;/li&gt;
&lt;li&gt;Map函数：从文档中每读入一个单词，就产生一个临时key/value对，即图中左边一列灰色宽箭头  &lt;/li&gt;
&lt;li&gt;临时元素：（k2,v2），k2是单词，v2是单词出现次数，即图中的第二列(w1,2)  &lt;/li&gt;
&lt;li&gt;Reduce函数：接收所有具有同一个k2的临时key/value对，对v2求和得到v3，即图中右边一列灰色宽箭头&lt;/li&gt;
&lt;li&gt;输出结果：（k2,v3），v3是所有文档中单词k2的词频数  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;center&gt;转载请注明作者：Focustc，博客地址为&lt;a href="http://blog.csdn.net/caozhk"&gt;http://blog.csdn.net/caozhk&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>django开发视频网站项目记录</title><link href="http://heloman.github.io/pages/2013/11/djangokai-fa-shi-pin-wang-zhan-xiang-mu-ji-lu.html" rel="alternate"></link><published>2013-11-08T00:00:00+08:00</published><updated>2013-11-09T22:33:41+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2013-11-08:/pages/2013/11/djangokai-fa-shi-pin-wang-zhan-xiang-mu-ji-lu.html</id><summary type="html">&lt;h3&gt;20131108启动&lt;/h3&gt;
&lt;p&gt;下载了Owntube，尝试运行。官方文档给出的运行方式是virtualenv，一个虚拟的python环境。我索性直接在系统环境内安装了相关的软件。django版本真的比较低。  &lt;/p&gt;
&lt;p&gt;在settings.py中很多变量需要配置，根据官方给出的&lt;a href="https://docs.djangoproject.com/en/1.3/howto/static-files/"&gt;文档&lt;/a&gt;：  &lt;/p&gt;
&lt;p&gt;使用django.contrib.staticfiles应用，默认配置包含的 AppDirectoriesFinder 会搜索所有已经安装的应用的 &lt;code&gt;static/&lt;/code&gt; 子目录。   &lt;/p&gt;
&lt;p&gt;并且对于一些不适合放进相关app的文件， &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;是默认的搜索路径。不过这些只适用本地开发，并且要安装FileSystemFinder应用。  &lt;/p&gt;
&lt;p&gt;这些文件会以 &lt;code&gt;STATIC_URL&lt;/code&gt; 提供。&lt;/p&gt;
&lt;p&gt;这个服务只在DEBUG为True时，即本地开发时有效。发布网站时，要使用 &lt;code&gt;./manage.py collectstatic&lt;/code&gt; 命令来搜集所有STATICFILES_DIRS路径以及app下的静态文件到STATIC_ROOT文件夹下面。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.path.dirname(__file__)&lt;/code&gt; 可以输出当前路径。  &lt;/p&gt;
&lt;p&gt;当前配置为：&lt;br&gt;
    STATIC_ROOT = '/home/czk/djangoproject/OwnTube/colect_staitic/'
    STATIC_URL = '/static/'
    import …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;20131108启动&lt;/h3&gt;
&lt;p&gt;下载了Owntube，尝试运行。官方文档给出的运行方式是virtualenv，一个虚拟的python环境。我索性直接在系统环境内安装了相关的软件。django版本真的比较低。  &lt;/p&gt;
&lt;p&gt;在settings.py中很多变量需要配置，根据官方给出的&lt;a href="https://docs.djangoproject.com/en/1.3/howto/static-files/"&gt;文档&lt;/a&gt;：  &lt;/p&gt;
&lt;p&gt;使用django.contrib.staticfiles应用，默认配置包含的 AppDirectoriesFinder 会搜索所有已经安装的应用的 &lt;code&gt;static/&lt;/code&gt; 子目录。   &lt;/p&gt;
&lt;p&gt;并且对于一些不适合放进相关app的文件， &lt;code&gt;STATICFILES_DIRS&lt;/code&gt;是默认的搜索路径。不过这些只适用本地开发，并且要安装FileSystemFinder应用。  &lt;/p&gt;
&lt;p&gt;这些文件会以 &lt;code&gt;STATIC_URL&lt;/code&gt; 提供。&lt;/p&gt;
&lt;p&gt;这个服务只在DEBUG为True时，即本地开发时有效。发布网站时，要使用 &lt;code&gt;./manage.py collectstatic&lt;/code&gt; 命令来搜集所有STATICFILES_DIRS路径以及app下的静态文件到STATIC_ROOT文件夹下面。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.path.dirname(__file__)&lt;/code&gt; 可以输出当前路径。  &lt;/p&gt;
&lt;p&gt;当前配置为：&lt;br&gt;
    STATIC_ROOT = '/home/czk/djangoproject/OwnTube/colect_staitic/'
    STATIC_URL = '/static/'
    import os
    PROJECT_PATH = os.path.abspath(os.path.dirname(&lt;strong&gt;file&lt;/strong&gt;))
    STATICFILES_DIRS = (
        PROJECT_PATH + '/static',
    )&lt;/p&gt;
&lt;h4&gt;下一步开发计划：&lt;/h4&gt;
&lt;p&gt;完成一个最简单的视频播放模板，从html文件开始，然后再做模板。&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;20131109 初步搞定&lt;/h3&gt;
&lt;p&gt;之前的&lt;a href="http://www.projekktor.com/"&gt;projekktor&lt;/a&gt;并没有用上。&lt;br&gt;
现在的方案是： &lt;br&gt;
    文件上传根目录
    MEDIA_ROOT = '/home/czk/djangoproject/uvideo/media/'
    static目录下为css等文件，并包括上传的视频，这样就能够用目录+file_path的方式获得视频链接
    STATICFILES_DIRS = (
        '/home/czk/djangoproject/uvideo/static/',
        '/home/czk/djangoproject/uvideo/media/',
    )&lt;/p&gt;
&lt;p&gt;完成了在管理界面整套试卷的视频上传，以及播放。&lt;/p&gt;
&lt;h4&gt;下一步计划&lt;/h4&gt;
&lt;p&gt;部署到学校服务器上面，加入flash播放器。  &lt;/p&gt;
&lt;h4&gt;部署到Apache+wsgi服务器上面要做的改变&lt;/h4&gt;
&lt;p&gt;安装好apache2和libapache2-mod-wsgi之后&lt;br&gt;
首先settings.py里面，DATABASES的NAME要改成绝对路径&lt;br&gt;
修改/etc/apache2/httpd.conf&lt;br&gt;
    LoadModule wsgi_module modules/mod_wsgi.so
    WSGIScriptAlias / "/home/czk/djangoproject/uvideo/django.wsgi"
    Alias /static /home/czk/djangoproject/uvideo/colect_static/
    &lt;Directory "/home/czk/djangoproject/uvideo/"&gt;
        Order Deny,Allow
        Allow from all
    &lt;/Directory&gt;&lt;/p&gt;
&lt;p&gt;目录下建立django.wsgi，写入内容：
    #!/usr/bin/env python
    import os
    import sys
    sys.path.append('/home/czk/djangoproject/uvideo')
    os.environ['DJANGO_SETTINGS_MODULE'] = 'uvideo.settings'
    import django.core.handlers.wsgi
    application = django.core.handlers.wsgi.WSGIHandler()&lt;/p&gt;
&lt;p&gt;deploy过程中碰到python-lib目录权限的问题，更改了所有相应文件的权限才解决。&lt;br&gt;
碰到admin应用无法读取数据库文件的问题，把整个项目文件权限更改为777得到解决。&lt;br&gt;
这次是把所有的文件搜集到了colect_static下面，应该把STATIC_ROOT设置为和MEDIA_ROOT相同。&lt;br&gt;
本来在local开发模式下面，视频是无法快进的，但没想到deploy之后就可以了。&lt;br&gt;
目前视频的播放还是存在问题的，opera无法播放，可能还是需要加入一个flash播放器。  &lt;/p&gt;
&lt;p&gt;在admin界面下上传文件会显示ascii编码错误，这个需要更改 /etc/apache2/envvars 中的 LANG 设置。具体情况见&lt;a href="http://www.hiaward.com:10004/wiki/dev/ApacheConfigure/"&gt;博客1&lt;/a&gt;和&lt;a href="http://hi.baidu.com/justin_jia/item/cda58f5f866ef2464eff20a3"&gt;博客2&lt;/a&gt;.&lt;br&gt;
不过，这个问题另一个解决办法可能是更改上传的文件名为英文，见&lt;a href="http://blog.csdn.net/jianhong1990/article/details/7382873"&gt;博文&lt;/a&gt;。  &lt;/p&gt;</content><category term="App"></category><category term="django"></category></entry><entry><title>Ubuntu系统安装Matlab2012a</title><link href="http://heloman.github.io/pages/2013/09/ubuntuxi-tong-an-zhuang-matlab2012a.html" rel="alternate"></link><published>2013-09-04T00:00:00+08:00</published><updated>2013-09-04T09:57:43+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2013-09-04:/pages/2013/09/ubuntuxi-tong-an-zhuang-matlab2012a.html</id><summary type="html">&lt;h3&gt;下载安装&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;下载matlab的安装镜像，注意一定是unix版本到。 &lt;/li&gt;
&lt;li&gt;挂载iso文件： &lt;code&gt;sudo mount -o loop Mathworks.Matlab.R2012a.UNIX.iso /mnt/tmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;到tmp目录下面执行 &lt;code&gt;sudo ./install&lt;/code&gt;，安装并激活&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;启动程序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;运行matlab的方式为：&lt;code&gt;sudo /usr/local/MATLAB/R2012a/bin/matlab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;运行的时候的警告信息，&lt;code&gt;/usr/local/MATLAB/R2012a/bin/util/oscheck.sh: /lib/libc.so.6: not found&lt;/code&gt;。需要创建一个链接解决:&lt;code&gt;sudo ln -s /lib/i386-linux-gnu/libc …&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h3&gt;下载安装&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;下载matlab的安装镜像，注意一定是unix版本到。 &lt;/li&gt;
&lt;li&gt;挂载iso文件： &lt;code&gt;sudo mount -o loop Mathworks.Matlab.R2012a.UNIX.iso /mnt/tmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;到tmp目录下面执行 &lt;code&gt;sudo ./install&lt;/code&gt;，安装并激活&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;启动程序&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;运行matlab的方式为：&lt;code&gt;sudo /usr/local/MATLAB/R2012a/bin/matlab&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;运行的时候的警告信息，&lt;code&gt;/usr/local/MATLAB/R2012a/bin/util/oscheck.sh: /lib/libc.so.6: not found&lt;/code&gt;。需要创建一个链接解决:&lt;code&gt;sudo ln -s /lib/i386-linux-gnu/libc.so.6 /lib/libc.so.6&lt;/code&gt;64位系统需要改动。&lt;/li&gt;
&lt;li&gt;在软件中心安装matlab-support，添加matlab的安装目录为/usr/local/MATLAB/R2012a，这样可以在面板里面直接运行程序。
11.如果要创建快捷方式，可以在&lt;code&gt;启动运行程序&lt;/code&gt;中添加 &lt;code&gt;gksudo '/usr/local/MATLAB/R2012a/bin/matlab -desktop'&lt;/code&gt;，然后拖动到文件夹。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;设置启动目录&lt;/h3&gt;
&lt;p&gt;可以使用命令：&lt;code&gt;sudo gedit /usr/local/MATLAB/R2012a/toolbox/local/matlabrc.m&lt;/code&gt;，最后加上:&lt;code&gt;cd ‘default path’ %default path&lt;/code&gt;换成你默认目录即可。&lt;/p&gt;
&lt;h3&gt;解决中文乱码问题&lt;/h3&gt;
&lt;p&gt;参考&lt;a href="http://wmyming01.blog.163.com/blog/static/12964879120121120102253573/"&gt;http://wmyming01.blog.163.com/blog/static/12964879120121120102253573/&lt;/a&gt;
关于中文乱码的问题：如果系统已经安装中文字体，则打开Matlab后去File-&amp;gt;Preferences&amp;gt;Fonts里设置Desktop code font 和Desktop text font为支持中文的字体，如WenQuanYi Micro Hei Mono，立即生效。如果系统没中文字体就安装。此时Matlab界面仍是英文，添加自定义工具箱目录时遇到中文乱码问题，可以使用ln -s  源目录  目标目录  命令创建软链接，暂时解决。
此时m文件中的中文注释可能乱码，暂时没找到解决方案，因为中文注释是在windows下用写的，编码有差别。以后注释尽量用英文，在中文编码上时间消耗太多了。&lt;/p&gt;
&lt;h3&gt;解决运行时java错误&lt;/h3&gt;
&lt;p&gt;改变.matlab目录所有者即可：&lt;code&gt;chown -R user:user ./.matlab&lt;/code&gt;&lt;/p&gt;</content><category term="App"></category><category term="ubuntu"></category><category term="matlab"></category></entry><entry><title>Project Euler 001-006 解法总结</title><link href="http://heloman.github.io/pages/2013/08/project-euler-001-006-jie-fa-zong-jie.html" rel="alternate"></link><published>2013-08-27T00:00:00+08:00</published><updated>2013-08-28T16:34:10+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2013-08-27:/pages/2013/08/project-euler-001-006-jie-fa-zong-jie.html</id><summary type="html">&lt;h4&gt;Problem 1&lt;/h4&gt;
&lt;p&gt;Find the sum of all the multiples of 3 or 5 below 1000.&lt;/p&gt;
&lt;p&gt;题目要求找出所有1000以下的3或者5的倍数之和。&lt;br&gt;
最简便的方法是，计算出1000以下总共有多少个3、5、15的倍数，然后用等差数列求三种数分别之和，最后3、5的倍数和减去15的倍数和就得到了结果。&lt;br&gt;
NOte：这是因为15的倍数多算了一遍，所以要减去。  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Problem 2&lt;/h4&gt;
&lt;p&gt;Find the sum of all the even-valued terms in the Fibonacci sequence which do not exceed four million.&lt;/p&gt;
&lt;p&gt;题目要求找出斐波那契数列中偶数之和。&lt;br&gt;
我的方法是，斐波那契数列每三个连续的数中有一个为偶数，计算斐波那契数时用一个长度为3的数据完成缓存 …&lt;/p&gt;</summary><content type="html">&lt;h4&gt;Problem 1&lt;/h4&gt;
&lt;p&gt;Find the sum of all the multiples of 3 or 5 below 1000.&lt;/p&gt;
&lt;p&gt;题目要求找出所有1000以下的3或者5的倍数之和。&lt;br&gt;
最简便的方法是，计算出1000以下总共有多少个3、5、15的倍数，然后用等差数列求三种数分别之和，最后3、5的倍数和减去15的倍数和就得到了结果。&lt;br&gt;
NOte：这是因为15的倍数多算了一遍，所以要减去。  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Problem 2&lt;/h4&gt;
&lt;p&gt;Find the sum of all the even-valued terms in the Fibonacci sequence which do not exceed four million.&lt;/p&gt;
&lt;p&gt;题目要求找出斐波那契数列中偶数之和。&lt;br&gt;
我的方法是，斐波那契数列每三个连续的数中有一个为偶数，计算斐波那契数时用一个长度为3的数据完成缓存，每次循环完成三个数的更新，即计算三次斐波那契数，取偶数位相加即可。&lt;br&gt;
最简便的方法是，既然没三个连续数就有一个为偶数，那个可以推出连续的三个偶数斐波那契数之间的关系，这样就可以用长度为2的数据完成计算，而且计算量减少很多。&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Problem 3&lt;/h4&gt;
&lt;p&gt;Find the largest prime factor of a composite number&lt;/p&gt;
&lt;p&gt;题目要求找出一个数的最大质因子。&lt;br&gt;
我的方法是，首先除以所有为2的质因子，然后从3到sqrt(n)依次找出质因子。排序得到最大的，应该用遍历法得到。过程中参考了CSDN的一篇剪枝的方法（回退法除以所有同一个质因子）。  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Problem 4&lt;/h4&gt;
&lt;p&gt;Find the largest palindrome made from the product of two 3-digit numbers.&lt;/p&gt;
&lt;p&gt;题目要求找出能分解为两个三位数相乘的最大回文数。&lt;br&gt;
我的方法是，判断是否为回文数把每一位都提取出来，看前后是否相等。然后按照因此从999到100遍历啊和b的乘积判断是否为回文数，避免重复。找到第一个回文数后，计算出还有可能的a、b是多少，然后再次遍历。最后对遍历的结果取最大值。&lt;br&gt;
最简便的方法是，在上述方法的基础上，经过分析知道这个回文数一定是11的倍数，因为11是质数，则a或b必须为质数。在遍历时，可以判断出a不是11的倍数时b的可能值范围变成原来的1/11，运算量大大减少。  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Problem 5&lt;/h4&gt;
&lt;p&gt;What is the smallest number divisible by each of the numbers 1 to 20?&lt;/p&gt;
&lt;p&gt;题目要求找出1~20的最小公倍数。&lt;br&gt;
我的方法是首先用费马方法实现最大公因子gcd的计算。然后从大到小依次计算前者最小公倍数与下一个数的最小公因子，然后得到所有数的最小公倍数。&lt;br&gt;
最简单的方法是，对这个公倍数进行分析，必然是小于k的一系列质数的乘积。如果知道质数表，那么对于每一个小于k的质数为底计算floor(log)，然后把所有这些质数的幂相乘就得到了最小公倍数。可以优化的一点是，对于大于sqrt(k)的质数，已经不可能为1次以上的幂了，直接设幂指数为1即可。  &lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;Problem 6&lt;/h4&gt;
&lt;p&gt;What is the di erence between the sum of the squares and the square of the sums?&lt;/p&gt;
&lt;p&gt;题目要求算出和的平方与平方和的差。&lt;br&gt;
我的方法就是直接算，因为没有想到一种方法可以减少运算量。&lt;br&gt;
最简便的方式，是把求和用高斯的方法计算，即n*(n+1)/2，同样的，最好能得到平方和的计算公式。其实计算方法也很简单，假设为三次多项式，用前四个值（含0）来解出系数。也可以参考百度百科平方和的排列组合法。  &lt;/p&gt;</content><category term="Competition"></category><category term="project euler"></category></entry><entry><title>国外大学生谈经验：如何在Github参与开源（Open Source on Github: Your First Contribution）</title><link href="http://heloman.github.io/pages/2013/08/guo-wai-da-xue-sheng-tan-jing-yan-ru-he-zai-githubcan-yu-kai-yuan-open-source-on-github-your-first-contribution.html" rel="alternate"></link><published>2013-08-25T00:00:00+08:00</published><updated>2013-08-28T16:27:20+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2013-08-25:/pages/2013/08/guo-wai-da-xue-sheng-tan-jing-yan-ru-he-zai-githubcan-yu-kai-yuan-open-source-on-github-your-first-contribution.html</id><summary type="html">&lt;p&gt;原作者：spencerpmoran&lt;br&gt;
转载自&lt;a href="http://spencermoran.me/2013/08/13/open-source-on-github-your-first-contribution/"&gt;http://spencermoran.me/2013/08/13/open-source-on-github-your-first-contribution/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我是一个即将毕业的计算机大四学生，我经常听人谈论对github上的开源项目做出贡献是多么有意义的事情。许多职位要求里面都写明这种经历是一个很重要的基本条件或加分项，而且这种事情经常在各种seminar课程和活动中提到。做出贡献确实挺起来很酷，我也应该做啊。可唯一的问题是，我是一个大菜鸟。我的计算机课程学的很好，而且我做过几个被家人同学称赞的项目。可是，我确信我不可能对一个真正有用户的项目做出任何有意义的贡献，对吧？这种想法是正确的吗？&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;大错特错！即使你是一名新手，也可以以很多方式对github上面的项目做出实质的贡献。如果想要做一些真正有意义的影响用户的贡献，你大可不必读懂所有项目代码或者知道如何解决类似于bootstrap里的动态窗格问题。对于每个人都有合适的做出贡献的方法。&lt;/p&gt;
&lt;p&gt;最近，我的第一个实质性的贡献在一个开源项目上完成了。尽管贡献很小，我获得了全新的成就感，因为你知道有人在用你参与完成的东西。你必须从非常小的项目开始并持续前进。下面是我对想要对github上开源项目做出贡献但感觉困难而不敢尝试的同学的建议：&lt;/p&gt;
&lt;p&gt;你要做的第一步就是找到一个有pull request的仓库（项目）。有很多种方式可以找到。最简单直接的办法是读仓库的readme文件，里面经常明确的写明仓库所有者希望有人来完成pull request。如果readme文件没有提到这一点，你可以看看问题然后把代码下载下来。检查一下pull request的日期，看看哪些pull request已经关闭 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;原作者：spencerpmoran&lt;br&gt;
转载自&lt;a href="http://spencermoran.me/2013/08/13/open-source-on-github-your-first-contribution/"&gt;http://spencermoran.me/2013/08/13/open-source-on-github-your-first-contribution/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;我是一个即将毕业的计算机大四学生，我经常听人谈论对github上的开源项目做出贡献是多么有意义的事情。许多职位要求里面都写明这种经历是一个很重要的基本条件或加分项，而且这种事情经常在各种seminar课程和活动中提到。做出贡献确实挺起来很酷，我也应该做啊。可唯一的问题是，我是一个大菜鸟。我的计算机课程学的很好，而且我做过几个被家人同学称赞的项目。可是，我确信我不可能对一个真正有用户的项目做出任何有意义的贡献，对吧？这种想法是正确的吗？&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;大错特错！即使你是一名新手，也可以以很多方式对github上面的项目做出实质的贡献。如果想要做一些真正有意义的影响用户的贡献，你大可不必读懂所有项目代码或者知道如何解决类似于bootstrap里的动态窗格问题。对于每个人都有合适的做出贡献的方法。&lt;/p&gt;
&lt;p&gt;最近，我的第一个实质性的贡献在一个开源项目上完成了。尽管贡献很小，我获得了全新的成就感，因为你知道有人在用你参与完成的东西。你必须从非常小的项目开始并持续前进。下面是我对想要对github上开源项目做出贡献但感觉困难而不敢尝试的同学的建议：&lt;/p&gt;
&lt;p&gt;你要做的第一步就是找到一个有pull request的仓库（项目）。有很多种方式可以找到。最简单直接的办法是读仓库的readme文件，里面经常明确的写明仓库所有者希望有人来完成pull request。如果readme文件没有提到这一点，你可以看看问题然后把代码下载下来。检查一下pull request的日期，看看哪些pull request已经关闭，你就能判断仓库所有者有多大的可能还在更新它。如果你能找到一个你真正喜欢并符合上述要求的项目，你就喜出望外吧。举个我自己的例子，我找到了一个用于创建新工程的rails模版项目，它的readme文件用黑体标出了欢迎pull request。太棒了！&lt;/p&gt;
&lt;p&gt;现在，是时候fork并克隆仓库开工了。如果你还不知道具体怎么操作，下面是一个很好的入门教程。&lt;/p&gt;
&lt;p&gt;按照readme里面说明，你要先确保你在你的电脑上可以正确的配置运行这个项目。如果你碰到了任何没有在readme里面提到的错误或问题，这将成为你的第一个贡献！你可要编辑readme文件把这个问题向其他开发者说清楚。最好的开始贡献的方式之一是使它们更方便运行。你可以整理readme，编辑文档里面的错误或把错误标出来。一头扎进别人的代码库立刻开始改写代码是有点太不礼貌了。不过你可以以温和的方式开始你的开源生涯。我愿意参与改进的代码库都是文档完整简洁的。&lt;/p&gt;
&lt;p&gt;如果你仍然没有找到一种做贡献的方式，就通读这个项目的所有issues吧。Issue是关于增加功能或修改的建议，有时候已经有人给出了伪代码甚至已经有人开始码代码，只是时间紧无法完成而已。你也许能找到这种已经开始的、不需要大量改变的任务。&lt;/p&gt;
&lt;p&gt;如果你感觉无法完成任何一处错误的纠正，仓库所有者也许已经在readme文件中写明了下一步要完成的部分，或者你自己有新的想法。我本身而言已经厌倦了到处浏览检查仓库，甚至是我自己的仓库也不愿意。DS_Store目录被使用Mac的人提交到了github上，这是毫无道理的。我可以把它加到rails模版项目的.gitignore文件里面，这样就保证没人会再干出这种事情。哈哈，我已经有贡献了！你看我只是做了很简单的事情而已。你要确认你遵循了项目已有的约定。查看readme和其他的pull request，找出别人的编程习惯，然后要保证你使用了大家约定的commit说明。我按照上述的教程提交了一个pull request，代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;    # DS_Store gets added to project if viewedin OSX Finder&lt;/span&gt;
&lt;span class="err"&gt;    run&amp;quot;echo &amp;#39;.DS_Store&amp;#39; &amp;gt;&amp;gt; .gitignore&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个小时之后，我的pull request已经被合并到了这个几百人同时关注的项目中了。我感到了一种全新的工作的目标和动力。他们在用我参与完成的东西啊！&lt;/p&gt;
&lt;p&gt;在我作为一个计算机专业本科生的生活里，始终缺乏一种实实在在的成就感，或者说，我希望证明我真的在做事情。我学过算法、数据结构、很多种编程语言，我无休止的编程。我清楚的知道我自己。但是不过我从来没有过一种我的成果影响了其他人的感觉。我总是一个人想，谁做了这件事情？这件事情影响了谁？今天晚上，我想知道我的工作对一些人很重要。&lt;/p&gt;
&lt;p&gt;对github上的开源项目做贡献尽管可能显得不礼貌，而且有一个很陡峭的学习曲线，然而它确实是一种很有意义的获得成就感的途径。&lt;/p&gt;</content><category term="Coding"></category><category term="github"></category><category term="open source"></category><category term="blog"></category><category term="translation"></category></entry><entry><title>My first git blog</title><link href="http://heloman.github.io/pages/2013/08/my-first-git-blog.html" rel="alternate"></link><published>2013-08-19T00:00:00+08:00</published><updated>2013-08-28T16:40:06+08:00</updated><author><name>heLomaN</name></author><id>tag:heloman.github.io,2013-08-19:/pages/2013/08/my-first-git-blog.html</id><summary type="html">&lt;h2&gt;How to build you blog on github&lt;/h2&gt;
&lt;h4&gt;name.github.io&lt;/h4&gt;
&lt;p&gt;Github offer everyone a site:name.github.io, where you can publish you blogs.&lt;/p&gt;
&lt;h3&gt;Use git to publish&lt;/h3&gt;
&lt;p&gt;A very good startup:&lt;a href="http://frantic1048.com/blog/bo-ke-dan-sheng-ji-ji-yu-githubpelicanchuang-jian-bo-ke-de-zheng-ge-guo-cheng.html"&gt;frantic1048's startup&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Improve:google anylytics,sitemap,disqus&lt;/h3&gt;
&lt;p&gt;&lt;a href="&amp;lt;http://www.lizherui.com/pages/2013/08/17/build_blog.html"&gt;Lizherui's blog&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;How to use images and robots.txt&lt;/h3&gt;
&lt;p&gt;Very nice …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;How to build you blog on github&lt;/h2&gt;
&lt;h4&gt;name.github.io&lt;/h4&gt;
&lt;p&gt;Github offer everyone a site:name.github.io, where you can publish you blogs.&lt;/p&gt;
&lt;h3&gt;Use git to publish&lt;/h3&gt;
&lt;p&gt;A very good startup:&lt;a href="http://frantic1048.com/blog/bo-ke-dan-sheng-ji-ji-yu-githubpelicanchuang-jian-bo-ke-de-zheng-ge-guo-cheng.html"&gt;frantic1048's startup&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Improve:google anylytics,sitemap,disqus&lt;/h3&gt;
&lt;p&gt;&lt;a href="&amp;lt;http://www.lizherui.com/pages/2013/08/17/build_blog.html"&gt;Lizherui's blog&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;How to use images and robots.txt&lt;/h3&gt;
&lt;p&gt;Very nice:&lt;a href="http://www.linuxzen.com/shi-yong-pelicanda-zao-jing-tai-bo-ke.html"&gt;linuxzen's blog&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;About mine&lt;/h3&gt;
&lt;p&gt;I edited the makefile, the order &lt;code&gt;make publish&lt;/code&gt; will use pelicanconf.py.
Every time i run pelican, all in the output folder are copyed to git folder.
I used a free domain name &lt;a href="http://caozhk.tk"&gt;http://caozhk.tk&lt;/a&gt;,everyone can imply one. Enjoy&lt;/p&gt;
&lt;h4&gt;How to make a social link with imag&lt;/h4&gt;
&lt;p&gt;Seems the plugin determine it by the url you typein ,not the sitename.
But for rss, this works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;SOCIAL = ((&amp;#39;Rss&amp;#39;, &amp;#39;feeds/all.rss.xml&amp;#39;),)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Still puzzled by how to add a weibo icon, and a favicon.&lt;/p&gt;
&lt;h4&gt;How to add weibo icon and a favicon, modifed 2013-08-27&lt;/h4&gt;
&lt;p&gt;Thanks to Lizherui.&lt;br&gt;
You just put favicon.png in the output folder using &lt;code&gt;FILES_TO_COPY&lt;/code&gt;.&lt;br&gt;
Edit &lt;code&gt;/usr/local/lib/python2.7/site-packages/pelican/themes/tuxlite_tbs/static/local.css&lt;/code&gt; by insert &lt;code&gt;.social a[href*='weibo.com']:before {content: url('./images/icons/weibo.png'); margin-right: 2px; vertical-align: -3px;}&lt;/code&gt;, and put weibo.png in the img folder.  &lt;/p&gt;
&lt;h3&gt;How to use Markdown&lt;/h3&gt;
&lt;p&gt;Wikipedia:&lt;a href="http://zh.wikipedia.org/wiki/Markdown"&gt;http://zh.wikipedia.org/wiki/Markdown&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Hum,this is my pelican.conf.&lt;/h3&gt;
&lt;p&gt;Feel free to share.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;heLomaN&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Focus&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://heloman.github.io&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;



&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Asia/Shanghai&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;zh&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_DATE_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Blogroll&lt;/span&gt;
&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Pelican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://getpelican.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Python.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://python.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="c1"&gt;# Social widget&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Weibo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://weibo.com/focustc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Github&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com/heloman&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CSDN Blog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://blog.csdn.net/caozhk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Rss&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/all.rss.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="c1"&gt;## 主题 disqus帐号和google anylytics帐号&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tuxlite_tbs&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;focustc&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;GOOGLE_ANALYTICS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UA-43314222-1&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;##URL test&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com/heloman&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARCHIVES_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;archives.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pages/{date:%Y}/{date:%m}/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pages/{date:%Y}/{date:%m}/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;.html&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;## 配置RSS robots.txt IMG文件夹&lt;/span&gt;
&lt;span class="n"&gt;FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/all.rss.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;.rss.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;FILES_TO_COPY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;extra/robots.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;robots.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;extra/favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;## 配置sitemap 插件&lt;/span&gt;
&lt;span class="n"&gt;PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pelican-plugins&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sitemap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;SITEMAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;priorities&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;articles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;indexes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changefreqs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;articles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;monthly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;indexes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;daily&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;monthly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</content><category term="Web"></category><category term="pelican"></category><category term="blog"></category></entry></feed>